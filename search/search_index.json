{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"reference/SUMMARY/","text":"bayes_cbf bulletcar racecar safe_control car HyundaiGenesis core main vis cbc1 cbc2 control_affine_model controllers gp_algebra ilqr matrix_variate_multitask_kernel matrix_variate_multitask_model misc numpy2torch optimizers pendulum planner plotting sampling trigger_interval unicycle_move_to_pose","title":"SUMMARY"},{"location":"reference/bayes_cbf/","text":"","title":"bayes_cbf"},{"location":"reference/bayes_cbf/cbc1/","text":"","title":"cbc1"},{"location":"reference/bayes_cbf/cbc2/","text":"cbc2_quadratic_terms ( cbc2 , x , u ) cbc2.mean(x) \u2265 \u221a(1-\u03b4)/\u03b4 cbc2.k(x,x') Source code in bayes_cbf/cbc2.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def cbc2_quadratic_terms ( cbc2 , x , u ): \"\"\" cbc2.mean(x) \u2265 \u221a(1-\u03b4)/\u03b4 cbc2.k(x,x') \"\"\" # TODO: Too complicated and opaque. Try to find a way to simplify mean = lambda up : cbc2 ( up ) . mean ( x ) k_func = lambda up : cbc2 ( up ) . knl ( x , x ) #assert mean(u) > 0, 'cbf2 should be at least satisfied in expectation' mean_A , mean_b = get_affine_terms ( mean , u ) assert not torch . isnan ( mean_A ) . any () assert not torch . isnan ( mean_b ) . any () k_Q , k_p , k_r = get_quadratic_terms ( k_func , u ) assert not torch . isnan ( k_Q ) . any () assert not torch . isnan ( k_p ) . any () assert not torch . isnan ( k_r ) . any () return ( mean_A , mean_b ), ( k_Q , k_p , k_r ), mean ( u ), k_func ( u )","title":"cbc2"},{"location":"reference/bayes_cbf/cbc2/#bayes_cbf.cbc2.cbc2_quadratic_terms","text":"cbc2.mean(x) \u2265 \u221a(1-\u03b4)/\u03b4 cbc2.k(x,x') Source code in bayes_cbf/cbc2.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def cbc2_quadratic_terms ( cbc2 , x , u ): \"\"\" cbc2.mean(x) \u2265 \u221a(1-\u03b4)/\u03b4 cbc2.k(x,x') \"\"\" # TODO: Too complicated and opaque. Try to find a way to simplify mean = lambda up : cbc2 ( up ) . mean ( x ) k_func = lambda up : cbc2 ( up ) . knl ( x , x ) #assert mean(u) > 0, 'cbf2 should be at least satisfied in expectation' mean_A , mean_b = get_affine_terms ( mean , u ) assert not torch . isnan ( mean_A ) . any () assert not torch . isnan ( mean_b ) . any () k_Q , k_p , k_r = get_quadratic_terms ( k_func , u ) assert not torch . isnan ( k_Q ) . any () assert not torch . isnan ( k_p ) . any () assert not torch . isnan ( k_r ) . any () return ( mean_A , mean_b ), ( k_Q , k_p , k_r ), mean ( u ), k_func ( u )","title":"cbc2_quadratic_terms()"},{"location":"reference/bayes_cbf/control_affine_model/","text":"ControlAffineRegMatrixDiag = partial ( ControlAffineRegressorExact , model_class = ControlAffineRegMatrixDiagGP ) module-attribute Regressor with Independendent REgresssor ControlAffineRegMatrixDiagGP = partial ( ControlAffineExactGP , rank = 0 ) module-attribute IndexKernel models are BB\u1d40 + diag(\ud835\udc2f) where B is a low rank matrix whose rank is controlled by the rank parameters. ControlAffineRegVectorDiag = partial ( ControlAffineRegressorVector , model_class = ControlAffineRegVectorDiagGP ) module-attribute Regressor with Independendent REgresssor ControlAffineRegVectorDiagGP = partial ( ControlAffineVectorGP , rank = 0 ) module-attribute IndexKernel models are BB\u1d40 + diag(\ud835\udc2f) where B is a low rank matrix whose rank is controlled by the rank parameters. __directory__ = Path ( __file__ ) . parent or Path ( '.' ) module-attribute The directory for this file Arr Bases: Namespace Namespace for functions that works for both numpy as pytorch Source code in bayes_cbf/control_affine_model.py 62 63 64 65 66 67 68 69 70 71 class Arr ( Namespace ): \"\"\" Namespace for functions that works for both numpy as pytorch \"\"\" def cat ( arrays , axis = 0 ): if isinstance ( arrays [ 0 ], torch . Tensor ): X = torch . cat ( arrays , dim = axis ) else : X = np . concatenate ( arrays , axis = axis ) return X CatEncoder Encodes and decodes the arrays by concatenating them Source code in bayes_cbf/control_affine_model.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CatEncoder : \"\"\" Encodes and decodes the arrays by concatenating them \"\"\" def __init__ ( self , * sizes ): self . sizes = list ( sizes ) @classmethod def from_data ( cls , * arrays ): self = cls ( * [ A . shape [ - 1 ] for A in arrays ]) return self , self . encode ( * arrays ) def encode ( self , * arrays ): X = Arr . cat ( arrays , axis =- 1 ) return X def decode ( self , X ): idxs = np . cumsum ([ 0 ] + self . sizes ) arrays = [ X [ ... , s : e ] for s , e in zip ( idxs [: - 1 ], idxs [ 1 :])] return arrays def state_dict ( self ): return dict ( sizes = self . sizes ) def load_state_dict ( self , state_dict ): self . sizes = state_dict [ 'sizes' ] ControlAffineExactGP Bases: ExactGP ExactGP Model to capture the heterogeneous gaussian process Given MXU, M, X, U = MXU Xdot = F(X)U if M = 1 Y = F(X)\u1d40 if M = 0 Source code in bayes_cbf/control_affine_model.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 class ControlAffineExactGP ( ExactGP ): \"\"\" ExactGP Model to capture the heterogeneous gaussian process Given MXU, M, X, U = MXU Xdot = F(X)U if M = 1 Y = F(X)\u1d40 if M = 0 \"\"\" def __init__ ( self , x_dim , u_dim , likelihood , rank = None , gamma_length_scale_prior = None ): super () . __init__ ( None , None , likelihood ) self . matshape = ( 1 + u_dim , x_dim ) self . decoder = CatEncoder ( 1 , x_dim , 1 + u_dim ) self . mean_module = HetergeneousMatrixVariateMean ( ConstantMean (), self . decoder , self . matshape ) self . task_covar = MatrixVariateIndexKernel ( IndexKernel ( num_tasks = self . matshape [ 1 ], rank = ( self . matshape [ 1 ] if rank is None else rank )), IndexKernel ( num_tasks = self . matshape [ 0 ], rank = ( self . matshape [ 0 ] if rank is None else rank )) ) prior_args = dict ( ard_num_dims = x_dim ) prior_args = ( dict ( ** prior_args ) if gamma_length_scale_prior is None else dict ( lengthscale_prior = GammaPrior ( * gamma_length_scale_prior ), ** prior_args ) ) self . input_covar = ScaleKernel ( RBFKernel ( ** prior_args )) #+ LinearKernel()) # FIXME: how to reduce the variance of LinearKernel self . covar_module = HetergeneousMatrixVariateKernel ( self . task_covar , self . input_covar , self . decoder , ) def set_train_data ( self , Xtrain , Utrain , XdotTrain ): assert self . matshape == ( 1 + Utrain . shape [ - 1 ], Xtrain . shape [ - 1 ]) assert Xtrain . shape [ - 1 ] == XdotTrain . shape [ - 1 ] _ , MXUtrain = self . encode_from_XU ( Xtrain , Utrain , 1 ) super () . set_train_data ( inputs = ( MXUtrain ,), targets = XdotTrain . reshape ( - 1 ), strict = False ) def encode_from_XU ( self , Xtrain , Utrain = None , M = 0 ): Mtrain = Xtrain . new_full ([ Xtrain . size ( 0 ), 1 ], M ) if M : assert Utrain is not None UHtrain = torch . cat ([ Mtrain , Utrain ], dim = 1 ) else : UHtrain = Xtrain . new_zeros (( Xtrain . size ( 0 ), self . matshape [ 0 ])) return CatEncoder . from_data ( Mtrain , Xtrain , UHtrain ) def forward ( self , mxu ): mean_x = self . mean_module ( mxu ) with gpsettings . lazily_evaluate_kernels ( False ): covar_x = self . covar_module ( mxu ) return MultivariateNormal ( mean_x , covar_x ) def state_dict ( self ): sd = dict ( matshape = self . matshape , decoder = self . decoder . state_dict (), mean_module = self . mean_module . state_dict (), task_covar = self . task_covar . state_dict (), input_covar = self . input_covar . state_dict (), covar_module = self . covar_module . state_dict (), train_inputs = self . train_inputs , train_targets = self . train_targets ) return sd def load_state_dict ( self , state_dict ): self . matshape = state_dict . pop ( 'matshape' ) self . train_inputs = state_dict . pop ( 'train_inputs' ) self . train_targets = state_dict . pop ( 'train_targets' ) for k , v in state_dict . items (): getattr ( self , k ) . load_state_dict ( v ) return self ControlAffineRegressor Bases: DynamicsModel Scikit like wrapper around learning and predicting GaussianProcessRegressor Usage: F(X), COV(F(X)) = ControlAffineRegressor() .fit(Xtrain, Utrain, XdotTrain) .predict(Xtest, return_cov=True) Source code in bayes_cbf/control_affine_model.pyclass ControlAffineRegressor ( DynamicsModel ): \"\"\" Scikit like wrapper around learning and predicting GaussianProcessRegressor Usage: F(X), COV(F(X)) = ControlAffineRegressor() .fit(Xtrain, Utrain, XdotTrain) .predict(Xtest, return_cov=True) \"\"\" ground_truth = False def __init__ ( self , x_dim , u_dim , device = None , default_device = default_device , gamma_length_scale_prior = None , model_class = ControlAffineExactGP ): super () . __init__ () self . device = device or default_device () self . x_dim = x_dim self . u_dim = u_dim # Initialize model and likelihood # Noise model for GPs self . likelihood = IdentityLikelihood () # Actual model self . model_class = model_class self . model = model_class ( x_dim , u_dim , self . likelihood , gamma_length_scale_prior = gamma_length_scale_prior ) . to ( device = self . device ) self . _cache = dict () self . _f_func_gp = GaussianProcess ( self . f_func_mean , self . f_func_knl , ( self . x_dim ,), name = \"f\" ) @property def ctrl_size ( self ): return self . u_dim @property def state_size ( self ): return self . x_dim def _ensure_device_dtype ( self , X ): if isinstance ( X , np . ndarray ): X = torch . from_numpy ( X ) X = X . to ( device = self . device , dtype = next ( self . model . parameters ())[ 0 ] . dtype ) return X def fit ( self , * args , max_cg_iterations = 2000 , ** kwargs ): with warnings . catch_warnings (), \\ gpsettings . max_cg_iterations ( max_cg_iterations ): warnings . simplefilter ( \"ignore\" ) return self . _fit_with_warnings ( * args , ** kwargs ) def _fit_with_warnings ( self , Xtrain_in , Utrain_in , XdotTrain_in , training_iter = 50 , lr = 0.1 ): if Xtrain_in . shape [ 0 ] == 0 : # Do nothing if no data return self device = self . device model = self . model likelihood = self . likelihood # Convert to torch Xtrain , Utrain , XdotTrain = [ self . _ensure_device_dtype ( X ) for X in ( Xtrain_in , Utrain_in , XdotTrain_in )] self . clear_cache () model . set_train_data ( Xtrain , Utrain , XdotTrain ) # Set in train mode model . train () likelihood . train () # Find optimal model hyperparameters # Use the adam optimizer optimizer = torch . optim . Adam ( model . parameters (), lr = lr ) scheduler = torch . optim . lr_scheduler . MultiStepLR ( optimizer , milestones = ( torch . tensor ([ 0.3 , 0.6 , 0.8 , 0.90 ]) * training_iter ) . tolist ()) # \"Loss\" for GPs - the marginal log likelihood # num_data refers to the amount of training data # mll = VariationalELBO(likelihood, model, Y.numel()) mll = ExactMarginalLogLikelihood ( likelihood , model ) for i in range ( training_iter ): # Zero backpropped gradients from previous iteration optimizer . zero_grad () # Get predictive output output = model ( * model . train_inputs ) for p in model . parameters ( recurse = True ): assert not torch . isnan ( p ) . any () # Calc loss and backprop gradients loss = - mll ( output , XdotTrain . reshape ( - 1 ) * ( 1 + 1e-6 * torch . rand_like ( XdotTrain . reshape ( - 1 )))) assert not torch . isnan ( loss ) . any () assert not torch . isinf ( loss ) . any () loss . backward () for p in model . parameters ( recurse = True ): if p . grad is not None : assert not torch . isnan ( p . grad ) . any () LOG . debug ( 'Iter %d / %d - Loss: %.3f , lr: %.3g ' % ( i + 1 , training_iter , loss . item (), scheduler . get_lr ()[ 0 ])) optimizer . step () scheduler . step () return self def zero_grad ( self ): for p in self . model . parameters (): if p . grad is not None : p . grad . detach_ () p . grad . zero_ () def predict ( self , Xtest_in , return_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) # Switch back to eval mode if self . model is None or self . likelihood is None : raise RuntimeError ( \"Call fit() with training data before calling predict\" ) # Set in eval mode self . model . eval () self . likelihood . eval () # Concatenate the test set _ , MXUHtest = self . model . encode_from_XU ( Xtest ) output = self . model ( MXUHtest ) mean , cov = ( output . mean . reshape ( - 1 , * self . model . matshape ), output . covariance_matrix ) #mean_np, cov_np = [arr.detach().cpu().numpy() for arr in (mean, cov)] mean = mean . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ) cov = cov . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ) return ( mean , cov ) if return_cov else mean #return mean, cov def _perturbed_cholesky_compute ( self , k , B , Xtrain , UHtrain , cholesky_tries = 10 , cholesky_perturb_init = 1e-5 , cholesky_perturb_scale = 10 ): KXX = k ( Xtrain , Xtrain ) uBu = UHtrain @ B @ UHtrain . T Kb = KXX * uBu # Kb can be singular because of repeated datasamples # Add diagonal jitter Kbp , Kb_sqrt = make_psd ( Kb ) return Kb_sqrt def _perturbed_cholesky ( self , k , B , Xtrain , UHtrain , cache_key = \"perturbed_cholesky\" ): if cache_key not in self . _cache : self . _cache [ cache_key ] = self . _perturbed_cholesky_compute ( k , B , Xtrain , UHtrain ) return self . _cache [ cache_key ] def clear_cache ( self ): self . _cache = dict () def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True , grad_gp = False , grad_check = False , scalar_var_only = False ): \"\"\" Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb*\u1d40 \u03b1 4. v := L \\ kb* 5. k* := k(x*,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () if not grad_gp : k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module else : def grad_mean_s ( xs ): with variable_required_grad ( xs ): # allow_unused=True because the mean_module can be ConstantMean mean_xs = self . model . mean_module ( xs ) grad_mean_xs = torch . autograd . grad ( list ( mean_xs . flatten ()), xs , allow_unused = True )[ 0 ] if grad_mean_xs is None : return xs . new_zeros ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) else : return grad_mean_xs . reshape ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) mean_s = grad_mean_s def grad_ksx ( xs , xx ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xs , xx )), xs )[ 0 ] def grad_kxs ( xx , xs ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xx , xs )), xs )[ 0 ] k_sx = grad_ksx k_xs = grad_kxs def Hessian_kxx ( xs , xsp ): if xs is xsp : xsp = xsp . detach () . clone () return t_hessian ( k_xx , xs , xsp ) k_ss = Hessian_kxx A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (B, (1+m)n) # Make it (B, (1+m), n, 1) then transpose # (B, n, 1, (1+m)) and multiply with UHtest (B, (1+m)) to get # (B, n, 1) fX_mean_test = mean_s ( Xtest ) fu_mean_test = ( fX_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape , - 1 ) # (B, 1+m, n, n or 1) . permute ( 0 , 2 , 3 , 1 ) # (B, n, n or 1, 1+m) . reshape ( Xtest . shape [ 0 ], - 1 , self . model . matshape [ 0 ]) # (B, n(n or 1), 1+m) . bmm ( UHtest . unsqueeze ( - 1 )) # (B, n(n or 1), 1) . squeeze ( - 1 ) # (B, n(n or 1)) ) if self . model . train_inputs is None : # We do not have training data just return the mean and prior covariance if fX_mean_test . ndim == 4 : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :], - 1 ) else : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :]) # Compute k(x*,x*) u\u1d40Bu kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) # 5. k* := k(x*,x*) u\u1d40Bu scalar_var = kb_star_starp return fu_mean_test , torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) if grad_check and not grad_gp : with variable_required_grad ( Xtest ): old_dtype = self . dtype self . double_ () torch . autograd . gradcheck ( lambda X : self . model . covar_module . data_covar_module ( Xtrain . double (), X ) . evaluate (), Xtest . double ()) gradgradcheck ( partial ( lambda s , X , Xp : s . model . covar_module . data_covar_module ( X , Xp ) . evaluate (), self ), Xtest [: 1 , :] . double ()) self . to ( dtype = old_dtype ) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) - self . model . mean_module ( Xtrain ) . reshape ( nsamples , * self . model . matshape ) . transpose ( - 2 , - 1 ) . bmm ( UHtrain . unsqueeze ( - 1 )) . squeeze ( - 1 ) ) # 1. L := cholesky(K) Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) kb_star = k_xs ( Xtrain , Xtest ) * ( UHtrain @ B @ UHtest . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_func = lambda X : k_xs ( Xtrain . double (), X ) * ( UHtrain . double () @ B . double () @ UHtest . double () . t ()) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) \u03b1 = torch . cholesky_solve ( Y , Kb_sqrt ) # check the shape of Y # 3. \u03bc := \u03bc(x) + kb*\u1d40 \u03b1 mean = fu_mean_test + kb_star . t () @ \u03b1 if compute_cov : kb_star_p = ( k_xs ( Xtrain , Xtestp ) * ( UHtrain @ B @ UHtestp . t ()) if Xtestp_in is not None else kb_star ) kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_starp_func = lambda X : k_ss ( X , Xtestp . double ()) * ( UHtest @ B @ UHtestp . t ()) . double () with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_starp_func , Xtest . double ()) kb_star_star_func = lambda X , Xp : k_ss ( X , Xp ) * ( UHtest @ B @ UHtestp . t ()) . double () gradgradcheck ( kb_star_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 4. v := L \\ kb* v = torch . linalg . solve ( Kb_sqrt , kb_star ) if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) vp = torch . linalg . solve ( Kb_sqrt , kb_star_p ) if Xtestp_in is not None else v if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 5. k* := k(x*,x*) - v\u1d40v scalar_var = kb_star_starp - v . t () @ vp if grad_check : old_dtype = self . dtype self . double_ () scalar_var_func = lambda X : ( kb_star_starp_func ( X ) - v_func ( X ) . t () @ v_func ( Xtestp . double ())) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( scalar_var_func , Xtest . double ()) scalar_var_XX_func = lambda X , Xp : ( kb_star_star_func ( X , Xp ) - v_func ( X ) . t () @ v_func ( Xp )) gradgradcheck ( scalar_var_XX_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) covar_mat = torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) if grad_check : old_dtype = self . dtype self . double_ () covar_mat_func = lambda X : ( scalar_var_func ( X ) . reshape ( - 1 , 1 , 1 ) * A . double ())[ 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( covar_mat_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) else : # if not compute_cov covar_mat = 0 * A return mean , ( scalar_var if scalar_var_only else covar_mat ) @property def dtype ( self ): return next ( self . model . parameters ())[ 0 ] . dtype def to ( self , dtype = torch . float64 ): if dtype is torch . float64 : self . double_ () else : self . float_ () def double_ ( self ): self . model . double () assert self . dtype is torch . float64 self . model . train_inputs = tuple ([ inp . double () for inp in self . model . train_inputs ]) self . model . train_targets = self . model . train_targets . double () for k , v in self . _cache . items (): self . _cache [ k ] = v . double () def float_ ( self ): self . model . float () assert self . dtype is torch . float32 self . model . train_inputs = tuple ([ inp . float () for inp in self . model . train_inputs ]) self . model . train_targets = self . model . train_targets . float () for k , v in self . _cache . items (): self . _cache [ k ] = v . float () def _predict_flatten ( self , Xtest_in , Utest_in ): \"\"\" Directly predict f(x, u) = f(x) + g(x) @ u If you need f only, put Utest = [1, 0] \"\"\" device = self . device if isinstance ( Xtest_in , np . ndarray ): Xtest = torch . from_numpy ( Xtest_in ) else : Xtest = Xtest_in Xtest = Xtest . to ( device = device , dtype = self . dtype ) if isinstance ( Utest_in , np . ndarray ): Utest = torch . from_numpy ( Utest_in ) else : Utest = Utest_in Utest = Utest . to ( device = device , dtype = self . dtype ) # Switch back to eval mode if self . model is None or self . likelihood is None : raise RuntimeError ( \"Call fit() with training data before calling predict\" ) # Set in eval mode self . model . eval () self . likelihood . eval () # Concatenate the test set _ , MXUHtest = self . model . encode_from_XU ( Xtest , Utrain = Utest , M = 1 ) output = self . model ( MXUHtest ) mean = output . mean . reshape ( Xtest . shape [ 0 ], - 1 ) cov = output . covariance_matrix . reshape ( Xtest . shape [ 0 ], mean . shape [ - 1 ], mean . shape [ - 1 ], Xtest . shape [ 0 ]) return ( mean . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ), cov . to ( device = Xtest_in . device , dtype = Xtest_in . dtype )) def f_func ( self , Xtest_in , return_cov = False ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = Xtest . new_zeros (( Xtest . shape [ 0 ], self . u_dim )) #mean_fx, cov_fx = self._predict_flatten(Xtest, Utest) mean_fx , cov_fx = self . custom_predict ( Xtest , Utest ) if return_cov : if Xtest_in . ndim == 1 : cov_fx = cov_fx . squeeze ( 0 ) cov_fx = cov_fx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) if Xtest_in . ndim == 1 : mean_fx = mean_fx . squeeze ( 0 ) mean_fx = mean_fx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return ( mean_fx , cov_fx ) if return_cov else mean_fx def _A_mat ( self ): return self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () def _B_mat ( self ): return self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () def f_func_mean ( self , Xtest_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) mean_f , _ = self . custom_predict ( Xtest , compute_cov = False ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) return mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) def f_func_knl ( self , Xtest_in , Xtestp_in , grad_check = False ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) _ , var_f = self . custom_predict ( Xtest , Xtestp_in = Xtestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f_out = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) if grad_check : old_dtype = self . dtype self . double_ () var_f_func = lambda X : self . custom_predict ( X , Xtestp_in = Xtestp , compute_cov = True )[ 1 ][ 0 , 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( var_f_func , Xtest . double ()) var_f_func_2 = lambda X , Xp : self . custom_predict ( X , Xtestp_in = Xp , compute_cov = True )[ 1 ][ 0 , 0 , 0 ] gradgradcheck ( var_f_func_2 , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) return var_f_out def f_func_gp ( self ): #return GaussianProcess(self.f_func_mean, self.f_func_knl, (self.x_dim,)) return self . _f_func_gp def fu_func_mean ( self , Utest_in , Xtest_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) mean_f , _ = self . custom_predict ( Xtest , Utest , compute_cov = False ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) mean_f = mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_f def _grad_fu_func_mean ( self , Xtest_in , Utest_in = None ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in is not None and Utest_in . ndim == 1 else Utest_in ) mean_f , _ = self . custom_predict ( Xtest , Utest , compute_cov = False , grad_gp = True ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) mean_f = mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_f def fu_func_knl ( self , Utest_in , Xtest_in , Xtestp_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) _ , var_f = self . custom_predict ( Xtest , Utest , Xtestp_in = Xtestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return var_f def fu_func_gp ( self , Utest_in ): gp = GaussianProcess ( mean = partial ( self . fu_func_mean , Utest_in ), knl = partial ( self . fu_func_knl , Utest_in ), shape = ( self . x_dim ,), name = \"F(.)u\" ) gp . register_covar ( self . _f_func_gp , partial ( self . covar_fu_f , Utest_in )) return gp def covar_fu_f ( self , Utest_in , Xtest_in , Xtestp_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) Utestp = torch . zeros_like ( Utest ) mean_f , var_f = self . custom_predict ( Xtest , Utest , Xtestp_in = Xtestp , Utestp_in = Utestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return var_f def g_func ( self , Xtest_in , return_cov = False ): assert not return_cov , \"Don't know what matrix covariance looks like\" Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) mean_Fx = self . predict ( Xtest , return_cov = return_cov ) mean_gx = mean_Fx [:, 1 :, :] if Xtest_in . ndim == 1 : mean_gx = mean_gx . squeeze ( 0 ) mean_gx = mean_gx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_gx . transpose ( - 2 , - 1 ) def _gu_func ( self , Xtest_in , Utest_in = None , return_cov = False , Xtestp_in = None ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) if Utest_in is not None : Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) else : Utest = Xtest_in . new_ones ( Xtest . shape [ 0 ], self . u_dim ) mean_gu , var_gu = self . custom_predict ( Xtest , Utest , UHfill = 0 , Xtestp_in = Xtestp_in , compute_cov = True ) if Xtest_in . ndim == 1 and Utest_in . ndim == 1 : mean_gu = mean_gu . squeeze ( 0 ) var_gu = var_gu . squeeze ( 0 ) return ( mean_gu , var_gu ) if return_cov else mean_gu def g_func_mean ( self , Xtest_in ): return self . _gu_func ( Xtest_in , return_cov = False ) def _cbf_func ( self , Xtest , grad_htest , return_cov = False ): if return_cov : mean_Fx , cov_Fx = self . predict ( Xtest , return_cov = True ) cov_hFT = grad_htest . T @ cov_Fx @ grad_htest else : mean_Fx , cov_Fx = self . predict ( Xtest , return_cov = False ) mean_hFT = grad_htest @ mean_Fx return mean_hFT , cov_hFT def state_dict ( self ): return dict ( model = self . model . state_dict (), likelihood = self . likelihood . state_dict ()) def load_state_dict ( self , state_dict ): self . model . load_state_dict ( state_dict [ 'model' ]) self . likelihood . load_state_dict ( state_dict [ 'likelihood' ]) def save ( self , path = '/tmp/saved.pickle' ): torch . save ( self . state_dict (), path ) def load ( self , path = '/tmp/saved.pickle' ): self . load_state_dict ( torch . load ( path )) def get_kernel_param ( self , name ): if name == 'A' : return self . _A_mat () elif name == 'B' : return self . _B_mat () elif name == 'scalefactor' : assert isinstance ( self . model . input_covar , ScaleKernel ) return self . model . input_covar . outputscale elif name == 'lengthscale' : assert isinstance ( self . model . input_covar . base_kernel , RBFKernel ) return self . model . input_covar . base_kernel . lengthscale else : raise ValueError ( 'Unknown param %s ' % name ) custom_predict ( Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True , grad_gp = False , grad_check = False , scalar_var_only = False ) Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb \u1d40 \u03b1 4. v := L \\ kb 5. k := k(x ,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) Source code in bayes_cbf/control_affine_model.pydef custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True , grad_gp = False , grad_check = False , scalar_var_only = False ): \"\"\" Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb*\u1d40 \u03b1 4. v := L \\ kb* 5. k* := k(x*,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () if not grad_gp : k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module else : def grad_mean_s ( xs ): with variable_required_grad ( xs ): # allow_unused=True because the mean_module can be ConstantMean mean_xs = self . model . mean_module ( xs ) grad_mean_xs = torch . autograd . grad ( list ( mean_xs . flatten ()), xs , allow_unused = True )[ 0 ] if grad_mean_xs is None : return xs . new_zeros ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) else : return grad_mean_xs . reshape ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) mean_s = grad_mean_s def grad_ksx ( xs , xx ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xs , xx )), xs )[ 0 ] def grad_kxs ( xx , xs ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xx , xs )), xs )[ 0 ] k_sx = grad_ksx k_xs = grad_kxs def Hessian_kxx ( xs , xsp ): if xs is xsp : xsp = xsp . detach () . clone () return t_hessian ( k_xx , xs , xsp ) k_ss = Hessian_kxx A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (B, (1+m)n) # Make it (B, (1+m), n, 1) then transpose # (B, n, 1, (1+m)) and multiply with UHtest (B, (1+m)) to get # (B, n, 1) fX_mean_test = mean_s ( Xtest ) fu_mean_test = ( fX_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape , - 1 ) # (B, 1+m, n, n or 1) . permute ( 0 , 2 , 3 , 1 ) # (B, n, n or 1, 1+m) . reshape ( Xtest . shape [ 0 ], - 1 , self . model . matshape [ 0 ]) # (B, n(n or 1), 1+m) . bmm ( UHtest . unsqueeze ( - 1 )) # (B, n(n or 1), 1) . squeeze ( - 1 ) # (B, n(n or 1)) ) if self . model . train_inputs is None : # We do not have training data just return the mean and prior covariance if fX_mean_test . ndim == 4 : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :], - 1 ) else : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :]) # Compute k(x*,x*) u\u1d40Bu kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) # 5. k* := k(x*,x*) u\u1d40Bu scalar_var = kb_star_starp return fu_mean_test , torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) if grad_check and not grad_gp : with variable_required_grad ( Xtest ): old_dtype = self . dtype self . double_ () torch . autograd . gradcheck ( lambda X : self . model . covar_module . data_covar_module ( Xtrain . double (), X ) . evaluate (), Xtest . double ()) gradgradcheck ( partial ( lambda s , X , Xp : s . model . covar_module . data_covar_module ( X , Xp ) . evaluate (), self ), Xtest [: 1 , :] . double ()) self . to ( dtype = old_dtype ) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) - self . model . mean_module ( Xtrain ) . reshape ( nsamples , * self . model . matshape ) . transpose ( - 2 , - 1 ) . bmm ( UHtrain . unsqueeze ( - 1 )) . squeeze ( - 1 ) ) # 1. L := cholesky(K) Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) kb_star = k_xs ( Xtrain , Xtest ) * ( UHtrain @ B @ UHtest . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_func = lambda X : k_xs ( Xtrain . double (), X ) * ( UHtrain . double () @ B . double () @ UHtest . double () . t ()) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) \u03b1 = torch . cholesky_solve ( Y , Kb_sqrt ) # check the shape of Y # 3. \u03bc := \u03bc(x) + kb*\u1d40 \u03b1 mean = fu_mean_test + kb_star . t () @ \u03b1 if compute_cov : kb_star_p = ( k_xs ( Xtrain , Xtestp ) * ( UHtrain @ B @ UHtestp . t ()) if Xtestp_in is not None else kb_star ) kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_starp_func = lambda X : k_ss ( X , Xtestp . double ()) * ( UHtest @ B @ UHtestp . t ()) . double () with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_starp_func , Xtest . double ()) kb_star_star_func = lambda X , Xp : k_ss ( X , Xp ) * ( UHtest @ B @ UHtestp . t ()) . double () gradgradcheck ( kb_star_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 4. v := L \\ kb* v = torch . linalg . solve ( Kb_sqrt , kb_star ) if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) vp = torch . linalg . solve ( Kb_sqrt , kb_star_p ) if Xtestp_in is not None else v if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 5. k* := k(x*,x*) - v\u1d40v scalar_var = kb_star_starp - v . t () @ vp if grad_check : old_dtype = self . dtype self . double_ () scalar_var_func = lambda X : ( kb_star_starp_func ( X ) - v_func ( X ) . t () @ v_func ( Xtestp . double ())) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( scalar_var_func , Xtest . double ()) scalar_var_XX_func = lambda X , Xp : ( kb_star_star_func ( X , Xp ) - v_func ( X ) . t () @ v_func ( Xp )) gradgradcheck ( scalar_var_XX_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) covar_mat = torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) if grad_check : old_dtype = self . dtype self . double_ () covar_mat_func = lambda X : ( scalar_var_func ( X ) . reshape ( - 1 , 1 , 1 ) * A . double ())[ 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( covar_mat_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) else : # if not compute_cov covar_mat = 0 * A return mean , ( scalar_var if scalar_var_only else covar_mat ) ControlAffineRegressorExact Bases: ControlAffineRegressor Source code in bayes_cbf/control_affine_model.py 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 class ControlAffineRegressorExact ( ControlAffineRegressor ): def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , A , BkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = compute_cov ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) UHtest_BkXX = UHtest . unsqueeze ( - 1 ) . unsqueeze ( 1 ) # (k', 1, (1+m), 1) UHtestp_BkXX = UHtestp . unsqueeze ( - 1 ) . unsqueeze ( 0 ) # (1, k', (1+m), 1) meanFXU = meanFX . bmm ( UHtest . unsqueeze ( - 1 )) . squeeze ( - 1 ) if compute_cov : varFXU = torch . matmul ( torch . matmul ( UHtest_BkXX . transpose ( - 2 , - 1 ), BkXX ), UHtestp_BkXX ) * A else : varFXU = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], * A . shape ) return ( meanFXU , varFXU ) def custom_predict_fullmat ( self , Xtest_in , Xtestp_in = None ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , A , BkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = True ) assert not torch . isnan ( meanFX ) . any () b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim assert meanFX . shape == ( b , n , ( 1 + m )) meanFX = meanFX . transpose ( - 2 , - 1 ) # (b, (1+m), n) var_FX = torch_kron ( BkXX . transpose ( 2 , 1 ) . reshape ( b * ( 1 + m ), b * ( 1 + m )), # (b(1+m), b(1+m)) A , # (n, n) batch_dims = 0 ) # (b(1+m)n, b(1+m)n) # assert is_psd(var_FX) # (b(1+m)n), (b(1+m)n, b(1+m)n) return meanFX . reshape ( - 1 ), var_FX def _custom_predict_matrix ( self , Xtest_in , Xtestp_in = None , compute_cov = True ): \"\"\" Matrix variate GP: Separate A and B F(x) ~ \ud835\udd44\ud835\udd4d\u2119(\ud835\udc0c(x), \ud835\udc00, \ud835\udc01 k(x, x')) \u2208 (n, 1+m) \ud835\udd05(XU, XU) = [\ud835\udc2e\u1d62\u1d40B\ud835\udc2e\u2c7c (k(x\u1d62, x\u1d62)+\u03c3\u00b2)]\u1d62\u2c7c \u2208 (k, k) \ud835\udd05(XU, x*) = [\ud835\udc2e\u1d62\u1d40B (k(x\u1d62, x*)+\u03c3\u00b2)]\u1d62 \u2208 (k(1+m), k) \ud835\udc0c(XU) = [\ud835\udc0c(x\u1d62)\ud835\udc2e\u1d62]\u1d62 \u2208 (n, k) F*(x*) ~ \ud835\udd44\ud835\udd4d\u2119( \ud835\udc0c(x*) + (X\u0307 - \ud835\udc0c(XU))[\ud835\udd05(XU, XU)]\u207b\u00b9(\ud835\udd05(XU, x*)\u1d40), A, B k(x*, x*) - \ud835\udd05(XU, x*)[\ud835\udd05(XU, XU)]\u207b\u00b9(\ud835\udd05(XU, x*)\u1d40) ) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(\ud835\udd05(XU, XU)) O(k\u00b3) 2. B\u2020 := ( (LL\u1d40) \\ \ud835\udd05(XU, x*)\u1d40 ) \u2208 (k, k(1+m))) O(k\u00b2(1+m)) 3. Y = (X\u0307 - \ud835\udc0c(XU)) \u2208 (n, k) O(kn(1+m)) 3. \ud835\udc0c\u2096(x*) := \ud835\udc0c(x*) + Y @ B\u2020 \u2208 (n, (1+m)) O(nk\u00b2(1+m)) 4. \ud835\udc01\u2096(x*, x*) := B k(x*,x*) - \ud835\udd05(XU, x*) @ B\u2020 \u2208 (1+m, 1+m) O(k\u00b2(1+m)\u00b2) 5. log p(y|X) := -0.5 Y @ ( (LL\u1d40) \\ Y ) - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (b, (1+m)n) # Make it (b, (1+m), n, 1) then transpose # (b, n, 1, (1+m)) and multiply with UHtest (b, (1+m)) to get # (b, n, 1) fX_mean_test = mean_s ( Xtest ) . reshape ( Xtest . shape [ 0 ], * self . model . matshape ) . transpose ( - 2 , - 1 ) # (B, 1+m, n) -> (B, n, 1+m) if self . model . train_inputs is None : # 5. k* := k(x*,x*) B return fX_mean_test , A , B * k_ss ( Xtest , Xtestp ) . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) # Y\u2081\u2096 = X\u0307\u2081\u2096 - \ud835\udc0c\u2081\u2096\ud835\udd18\u2081\u2096 MXtrain = self . model . mean_module ( Xtrain ) # (k, (1+m)n) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) # (k, n) - ( MXtrain . reshape ( nsamples , * self . model . matshape ) # (k, (1+m), n) . transpose ( - 2 , - 1 ) # (k, n, (1+m)) . bmm ( UHtrain . unsqueeze ( - 1 ) # (k, (1+m), 1) ) # (k, n, 1) . squeeze ( - 1 )) # (k, n) ) # (k, n) # 1. L := cholesky(\ud835\udd05(XU, XU)) or LL\u1d40 = \ud835\udd05(XU, XU) # Kb_sqrt = L Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) # (k, k) # kb_star = \ud835\udd05(XU, x*) # k_xs(Xtrain, Xtest) \\in (k, b) # UHtrain \\in (k, (1+m)) # B \\in (1+m, 1+m) kb_star = k_sx ( Xtest , Xtrain ) . unsqueeze ( - 1 ) * ( UHtrain @ B ) . unsqueeze ( 0 ) # (b, k, (1+m)) # 2. B\u2020(x) := ( LL\u1d40) \\ (\ud835\udd05(XU, x)\u1d40) Bdagger = torch . cholesky_solve ( kb_star , Kb_sqrt ) # (b, k, (1+m)) # 3. \ud835\udc0c\u2096 := \ud835\udc0c\u2080(x) + Y\u2081\u2096 B\u2020(x) mean_k = fX_mean_test + torch . matmul ( Y . t () . unsqueeze ( 0 ), Bdagger ) # (b, n, (1+m)) if compute_cov : # 4. \ud835\udc01\u2096(x*, x*) := B k(x*,x*) - \ud835\udd05(XU, x*) @ B\u2020 k_xtest_xtestp = k_ss ( Xtest , Xtestp ) # (b, b) #k_xtest_xtestp, _ = make_psd(k_xtest_xtestp) #assert is_psd(B) KXTestBXTestB = torch_kron ( k_xtest_xtestp , B , batch_dims = 0 ) # (b(1+m), b(1+m)) # assert is_psd(KXTestBXTestB) # assert is_psd( # torch.cat([ # torch.cat([Kb_sqrt @ Kb_sqrt.t(), # kb_star.reshape(-1, b*(1+m))], dim=-1), # torch.cat([kb_star.transpose(0, 2).reshape(b*(1+m),-1), # KXTestBXTestB], dim=-1) # ], dim=0) # ) # v = L\u1d40 \ud835\udd05(XU, x*) # v = torch.linalg.solve(Kb_sqrt, kb_star) # (b, k, (1+m)) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim k = Xtrain . shape [ 0 ] BkXX = ( KXTestBXTestB # (b(1+m), b(1+m)) - ( kb_star . transpose ( - 2 , - 1 ) # (b, (1+m), k) . reshape ( b * ( 1 + m ), k ) # (b (1+m), k) @ ( Bdagger . transpose ( 1 , 0 ) # (k, b, (1+m)) . reshape ( k , b * ( 1 + m ))) # (k, b(1+m)) ) # (b(1+m), b(1+m)) ) BkXX , _ = make_psd ( BkXX ) # assert is_psd(BkXX) BkXX = BkXX . reshape ( b , ( 1 + m ), b , ( 1 + m )) . transpose ( 1 , 2 ) # (b, b, (1+m), (1+m)) else : m = self . u_dim BkXX = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], ( 1 + m ), ( 1 + m )) # (b, n, (1+m)), (n, n), (b, b, (1+m), (1+m)) return mean_k , A , BkXX ControlAffineRegressorVector Bases: ControlAffineRegressor Source code in bayes_cbf/control_affine_model.py 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 class ControlAffineRegressorVector ( ControlAffineRegressor ): def __init__ ( self , * args , model_class = ControlAffineVectorGP , ** kwargs ): super () . __init__ ( * args , model_class = model_class , ** kwargs ) def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , KkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = compute_cov ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) meanFXU = meanFX . bmm ( UHtest . unsqueeze ( - 1 )) . squeeze ( - 1 ) if compute_cov : k , n = Xtest . shape In = torch . eye ( n , dtype = Xtest . dtype , device = Xtest . device ) # (n, n) UHtest_block = torch_kron ( UHtest , In , batch_dims = 0 ) . reshape ( k , 1 , n , - 1 ) # (k, 1, n, (1+m)n) UHtest_block_T = UHtest_block . reshape ( 1 , k , n , - 1 ) . transpose ( - 2 , - 1 ) # (1, k, (1+m)n), n) varFXU = torch . matmul ( torch . matmul ( UHtest_block , KkXX ), UHtest_block_T ) else : k , n = Xtest . shape varFXU = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], n , n ) return ( meanFXU , varFXU ) def custom_predict_fullmat ( self , Xtest_in , Xtestp_in = None ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , varFX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = True ) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim assert meanFX . shape == ( b , n , ( 1 + m )) meanFX = meanFX . transpose ( - 2 , - 1 ) # (b, (1+m), n) return ( meanFX . reshape ( - 1 ), # (b(1+m)n) varFX # (b, b, (1+m)n, (1+m)n)) . transpose ( 2 , 1 ) # (b, (1+m)n, b, (1+m)n) . reshape ( b * ( 1 + m ) * n , b * ( 1 + m ) * n )) def _perturbed_cholesky_compute ( self , k_xx , # function \u03a3 , # ((1+m)n, (1+m)n) Xtrain , # (k, n) UHtrain , # (k, (1+m)) cholesky_tries = 10 , cholesky_perturb_init = 1e-5 , cholesky_perturb_scale = 10 ): k , n = Xtrain . shape In = torch . eye ( n , dtype = Xtrain . dtype , device = Xtrain . device ) # (n, n) KXX = k_xx ( Xtrain , Xtrain ) # (k, k) UHtrain_block = torch_kron ( UHtrain , In , batch_dims = 0 ) . reshape ( k , 1 , n , - 1 ) # (k, 1, n, (1+m)n) UHtrain_block_T = UHtrain_block . reshape ( 1 , k , n , - 1 ) . transpose ( - 2 , - 1 ) # (1, k, (1+m)n), n) u\u03a3u = torch . matmul ( torch . matmul ( UHtrain_block , \u03a3 . unsqueeze ( - 3 ) . unsqueeze ( - 4 )), UHtrain_block_T ) # (k, k, n, n) Kb = (( KXX . reshape ( k , k , 1 , 1 ) * u\u03a3u # (k, k, n, n) ) . transpose ( 1 , 2 ) # (k, n, k, n) . reshape ( k * n , k * n ) ) # Kb can be singular because of repeated datasamples # Add diagonal jitter Kbp , Kb_sqrt = make_psd ( Kb , cholesky_tries = cholesky_tries , cholesky_perturb_init = cholesky_perturb_init , cholesky_perturb_scale = cholesky_perturb_scale ) return Kb_sqrt def _custom_predict_matrix ( self , Xtest_in , Xtestp_in = None , compute_cov = True ): \"\"\" Vector variate GP: \u03a3 \u2208 ((1+m)n, (1+m)n) vec(F(x)) ~ \ud835\udd3e\u2119(vec(\ud835\udc0c(x)), \u03a3 k(x, x')) \u2208 ((1+m)n, 1) \ud835\udd0e(XU, XU) = [(\ud835\udc2e\u1d62\u1d40 \u2297 I\u2099) \u03a3 (\ud835\udc2e\u2c7c \u2297 I\u2099) (k(x\u1d62, x\u1d62)+\u03c3\u00b2)]\u1d62\u2c7c \u2208 (kn, kn) \ud835\udd0e(XU, x*) = [(\ud835\udc2e\u1d62\u1d40 \u2297 I\u2099) \u03a3 (k(x\u1d62, x*)+\u03c3\u00b2)]\u1d62 \u2208 (kn, (1+m)n) \ud835\udc0c(XU) = [\ud835\udc0c(x\u1d62)\ud835\udc2e\u1d62]\u1d62 \u2208 (k, n) vec(F*(x*)) ~ \ud835\udd3e\u2119( vec[\ud835\udc0c(x*) + (X\u0307 - \ud835\udc0c(XU))[\ud835\udd0e(XU, XU)]\u207b\u00b9(\ud835\udd0e(XU, x*)\u1d40)], \u03a3 k(x*, x*) - \ud835\udd0e(XU, x*)[\ud835\udd0e(XU, XU)]\u207b\u00b9(\ud835\udd0e(XU, x*)\u1d40) ) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(\ud835\udd0e(XU, XU)) O(k\u00b3n\u00b3) 2. Y = vec(X\u0307 - \ud835\udc0c(XU)) \u2208 (kn, 1) O(kn) 2. \u03b1 := ( (LL\u1d40) \\ Y ) \u2208 (kn, 1) O(k\u00b3n) 3. \ud835\udc0c\u2096(x*) := \ud835\udc0c(x*) + \ud835\udd0e(XU, x*)\u1d40 \u03b1 \u2208 ((1+m)n, 1) O(k\u00b2n\u00b3(1+m)) 4. v(x*) = L \\ \ud835\udd0e(XU, x*) \u2208 (kn, (1+m)n) O(k\u00b2n\u00b3(1+m)) 5. \u03a3\u2096(x, x') = \u03a3\u2080(x, x') - v(x*)\u1d40 v(x*) \u2208 ((1+m)n, (1+m)n)) O(k\u00b2n\u2074(1+m)\u00b2)) 6. log p(y|X) := -0.5 Y @ ( (LL\u1d40) \\ Y ) - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () mean_s = self . model . mean_module \u03a3 = self . model . covar_module . task_covar_module . covar_matrix . evaluate () # ((1+m)n, (1+m)n) # Output of mean_s(Xtest) is (b, (1+m)n) # Make it (b, (1+m), n, 1) then transpose # (b, n, 1, (1+m)) and multiply with UHtest (b, (1+m)) to get # (b, n, 1) fX_mean_test = mean_s ( Xtest ) . reshape ( Xtest . shape [ 0 ], * self . model . matshape ) . transpose ( - 2 , - 1 ) # (b, 1+m, n) -> (B, n, 1+m) if self . model . train_inputs is None : # 5. k* := k(x*,x*) B return fX_mean_test , \u03a3 * k_xx ( Xtest , Xtestp ) . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) # Y\u2081\u2096 = X\u0307\u2081\u2096 - \ud835\udc0c\u2081\u2096\ud835\udd18\u2081\u2096 MXtrain = self . model . mean_module ( Xtrain ) # (k, (1+m)n) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) # (k, n) - ( MXtrain . reshape ( nsamples , * self . model . matshape ) # (k, (1+m), n) . transpose ( - 2 , - 1 ) # (k, n, (1+m)) . bmm ( UHtrain . unsqueeze ( - 1 ) # (k, (1+m), 1) ) # (k, n, 1) . squeeze ( - 1 )) # (k, n) ) # (k, n) # 1. L := cholesky(\ud835\udd0e(XU, XU)) or LL\u1d40 = \ud835\udd0e(XU, XU) # Kb_sqrt = L Kb_sqrt = self . _perturbed_cholesky ( k_xx , \u03a3 , Xtrain , UHtrain ) # (kn, kn) # kb_star = \ud835\udd0e(XU, x*) # k_xs(Xtrain, Xtest) \\in (k, b) # UHtrain \\in (k, (1+m)) # B \\in (1+m, 1+m) k , n = Xtrain . shape b = Xtest . shape [ 0 ] In = torch . eye ( n , dtype = Xtrain . dtype , device = Xtrain . device ) # (n, n) UHtrain_block = torch_kron ( UHtrain , In , batch_dims = 0 ) # (kn, (1+m)n) kb_star = ( k_xx ( Xtest , Xtrain ) . reshape ( b , k , 1 , 1 ) # (b, k, 1, 1) * ( UHtrain_block @ \u03a3 # (kn, (1+m)n) ) . reshape ( 1 , k , n , - 1 ) # (1, k, n, (1+m)n) ) . reshape ( b , k * n , - 1 ) # (b, kn, (1+m)n) # 2. \u03b1 := ( LL\u1d40) \\ Y \u03b1 = torch . cholesky_solve ( Y . reshape ( - 1 , 1 ), Kb_sqrt ) # (kn, 1) # 3. \ud835\udc0c\u2096 := \ud835\udc0c\u2080(x) + \ud835\udd0e(XU, x*)\u1d40 \u03b1 mean_k = fX_mean_test + ( torch . matmul ( kb_star . transpose ( - 2 , - 1 ), # (b, (1+m)n, kn) \u03b1 . unsqueeze ( 0 )) # (1, kn, 1) . reshape ( b , - 1 , n ) # (b, (1+m)n, 1) . transpose ( - 2 , - 1 ) # (b, n, (1+m)) ) if compute_cov : # 4. v = L \\ \ud835\udd0e(XU, x*) # 5. B\u2096(x, x') = B\u2080(x, x') - v\u1d40 v v = torch . linalg . solve ( Kb_sqrt , # (kn, kn) kb_star , # (b, kn, (1+m)n) ) # (b, kn, (1+m)n) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim k = Xtrain . shape [ 0 ] vb = v . transpose ( 0 , 1 ) . reshape ( k * n , b * ( 1 + m ) * n ) # (kn, b(1+m)n) KkXX = ( torch_kron ( k_xx ( Xtest , Xtestp ), \u03a3 , batch_dims = 0 ) # (b(1+m)n, b(1+m)n) - vb . t () @ vb # (b(1+m)n, b(1+m)n) ) KkXX , _ = make_psd ( KkXX ) KkXX = KkXX . reshape ( b , ( 1 + m ) * n , b , ( 1 + m ) * n ) . transpose ( 2 , 1 ) else : n = self . model . matshape [ 1 ] m = self . model . matshape [ 0 ] - 1 KkXX = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], ( 1 + m ) * n , ( 1 + m ) * n ) # (b, n, (1+m)), (b, b, (1+m)n, (1+m)n) return mean_k , KkXX IdentityLikelihood Bases: _GaussianLikelihoodBase Dummy likelihood class that does not do anything. It tries to be as close to identity as possible. gpytorch.likelihoods.Likelihood is supposed to model p(y|f(x)). GaussianLikelihood model this by y = f(x) + \u03b5, \u03b5 ~ N(0, \u03c3\u00b2) IdentityLikelihood tries to model y = f(x) , without breaking the gpytorch exact_prediction_strategies function which requires GaussianLikelihood. Source code in bayes_cbf/control_affine_model.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class IdentityLikelihood ( _GaussianLikelihoodBase ): \"\"\" Dummy likelihood class that does not do anything. It tries to be as close to identity as possible. gpytorch.likelihoods.Likelihood is supposed to model p(y|f(x)). GaussianLikelihood model this by y = f(x) + \u03b5, \u03b5 ~ N(0, \u03c3\u00b2) IdentityLikelihood tries to model y = f(x) , without breaking the gpytorch `exact_prediction_strategies` function which requires GaussianLikelihood. \"\"\" def __init__ ( self ): self . min_possible_noise = 1e-6 super () . __init__ ( noise_covar = FixedGaussianNoise ( noise = torch . tensor ( self . min_possible_noise ))) @property def noise ( self ): return 0 @noise . setter def noise ( self , _ ): LOG . warn ( \"Ignore setting of noise\" ) def forward ( self , function_samples : torch . Tensor , * params : Any , ** kwargs : Any ) -> base_distributions . Normal : # FIXME: How can we get the covariance of the function samples? return base_distributions . Normal ( function_samples , self . min_possible_noise * torch . eye ( function_samples . size ())) def marginal ( self , function_dist : MultivariateNormal , * params : Any , ** kwargs : Any ) -> MultivariateNormal : return function_dist Namespace Makes a class as a namespace for static functions Source code in bayes_cbf/control_affine_model.py 50 51 52 53 54 55 56 57 58 59 class Namespace : \"\"\" Makes a class as a namespace for static functions \"\"\" def __getattribute__ ( self , name ): val = object . __getattribute__ ( self , name ) if isinstance ( val , Callable ): return staticmethod ( val ) else : return val","title":"control_affine_model"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegMatrixDiag","text":"Regressor with Independendent REgresssor","title":"ControlAffineRegMatrixDiag"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegMatrixDiagGP","text":"IndexKernel models are BB\u1d40 + diag(\ud835\udc2f) where B is a low rank matrix whose rank is controlled by the rank parameters.","title":"ControlAffineRegMatrixDiagGP"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegVectorDiag","text":"Regressor with Independendent REgresssor","title":"ControlAffineRegVectorDiag"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegVectorDiagGP","text":"IndexKernel models are BB\u1d40 + diag(\ud835\udc2f) where B is a low rank matrix whose rank is controlled by the rank parameters.","title":"ControlAffineRegVectorDiagGP"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.__directory__","text":"The directory for this file","title":"__directory__"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.Arr","text":"Bases: Namespace Namespace for functions that works for both numpy as pytorch Source code in bayes_cbf/control_affine_model.py 62 63 64 65 66 67 68 69 70 71 class Arr ( Namespace ): \"\"\" Namespace for functions that works for both numpy as pytorch \"\"\" def cat ( arrays , axis = 0 ): if isinstance ( arrays [ 0 ], torch . Tensor ): X = torch . cat ( arrays , dim = axis ) else : X = np . concatenate ( arrays , axis = axis ) return X","title":"Arr"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.CatEncoder","text":"Encodes and decodes the arrays by concatenating them Source code in bayes_cbf/control_affine_model.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 class CatEncoder : \"\"\" Encodes and decodes the arrays by concatenating them \"\"\" def __init__ ( self , * sizes ): self . sizes = list ( sizes ) @classmethod def from_data ( cls , * arrays ): self = cls ( * [ A . shape [ - 1 ] for A in arrays ]) return self , self . encode ( * arrays ) def encode ( self , * arrays ): X = Arr . cat ( arrays , axis =- 1 ) return X def decode ( self , X ): idxs = np . cumsum ([ 0 ] + self . sizes ) arrays = [ X [ ... , s : e ] for s , e in zip ( idxs [: - 1 ], idxs [ 1 :])] return arrays def state_dict ( self ): return dict ( sizes = self . sizes ) def load_state_dict ( self , state_dict ): self . sizes = state_dict [ 'sizes' ]","title":"CatEncoder"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineExactGP","text":"Bases: ExactGP ExactGP Model to capture the heterogeneous gaussian process Given MXU, M, X, U = MXU Xdot = F(X)U if M = 1 Y = F(X)\u1d40 if M = 0 Source code in bayes_cbf/control_affine_model.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 class ControlAffineExactGP ( ExactGP ): \"\"\" ExactGP Model to capture the heterogeneous gaussian process Given MXU, M, X, U = MXU Xdot = F(X)U if M = 1 Y = F(X)\u1d40 if M = 0 \"\"\" def __init__ ( self , x_dim , u_dim , likelihood , rank = None , gamma_length_scale_prior = None ): super () . __init__ ( None , None , likelihood ) self . matshape = ( 1 + u_dim , x_dim ) self . decoder = CatEncoder ( 1 , x_dim , 1 + u_dim ) self . mean_module = HetergeneousMatrixVariateMean ( ConstantMean (), self . decoder , self . matshape ) self . task_covar = MatrixVariateIndexKernel ( IndexKernel ( num_tasks = self . matshape [ 1 ], rank = ( self . matshape [ 1 ] if rank is None else rank )), IndexKernel ( num_tasks = self . matshape [ 0 ], rank = ( self . matshape [ 0 ] if rank is None else rank )) ) prior_args = dict ( ard_num_dims = x_dim ) prior_args = ( dict ( ** prior_args ) if gamma_length_scale_prior is None else dict ( lengthscale_prior = GammaPrior ( * gamma_length_scale_prior ), ** prior_args ) ) self . input_covar = ScaleKernel ( RBFKernel ( ** prior_args )) #+ LinearKernel()) # FIXME: how to reduce the variance of LinearKernel self . covar_module = HetergeneousMatrixVariateKernel ( self . task_covar , self . input_covar , self . decoder , ) def set_train_data ( self , Xtrain , Utrain , XdotTrain ): assert self . matshape == ( 1 + Utrain . shape [ - 1 ], Xtrain . shape [ - 1 ]) assert Xtrain . shape [ - 1 ] == XdotTrain . shape [ - 1 ] _ , MXUtrain = self . encode_from_XU ( Xtrain , Utrain , 1 ) super () . set_train_data ( inputs = ( MXUtrain ,), targets = XdotTrain . reshape ( - 1 ), strict = False ) def encode_from_XU ( self , Xtrain , Utrain = None , M = 0 ): Mtrain = Xtrain . new_full ([ Xtrain . size ( 0 ), 1 ], M ) if M : assert Utrain is not None UHtrain = torch . cat ([ Mtrain , Utrain ], dim = 1 ) else : UHtrain = Xtrain . new_zeros (( Xtrain . size ( 0 ), self . matshape [ 0 ])) return CatEncoder . from_data ( Mtrain , Xtrain , UHtrain ) def forward ( self , mxu ): mean_x = self . mean_module ( mxu ) with gpsettings . lazily_evaluate_kernels ( False ): covar_x = self . covar_module ( mxu ) return MultivariateNormal ( mean_x , covar_x ) def state_dict ( self ): sd = dict ( matshape = self . matshape , decoder = self . decoder . state_dict (), mean_module = self . mean_module . state_dict (), task_covar = self . task_covar . state_dict (), input_covar = self . input_covar . state_dict (), covar_module = self . covar_module . state_dict (), train_inputs = self . train_inputs , train_targets = self . train_targets ) return sd def load_state_dict ( self , state_dict ): self . matshape = state_dict . pop ( 'matshape' ) self . train_inputs = state_dict . pop ( 'train_inputs' ) self . train_targets = state_dict . pop ( 'train_targets' ) for k , v in state_dict . items (): getattr ( self , k ) . load_state_dict ( v ) return self","title":"ControlAffineExactGP"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegressor","text":"Bases: DynamicsModel Scikit like wrapper around learning and predicting GaussianProcessRegressor Usage: F(X), COV(F(X)) = ControlAffineRegressor() .fit(Xtrain, Utrain, XdotTrain) .predict(Xtest, return_cov=True) Source code in bayes_cbf/control_affine_model.pyclass ControlAffineRegressor ( DynamicsModel ): \"\"\" Scikit like wrapper around learning and predicting GaussianProcessRegressor Usage: F(X), COV(F(X)) = ControlAffineRegressor() .fit(Xtrain, Utrain, XdotTrain) .predict(Xtest, return_cov=True) \"\"\" ground_truth = False def __init__ ( self , x_dim , u_dim , device = None , default_device = default_device , gamma_length_scale_prior = None , model_class = ControlAffineExactGP ): super () . __init__ () self . device = device or default_device () self . x_dim = x_dim self . u_dim = u_dim # Initialize model and likelihood # Noise model for GPs self . likelihood = IdentityLikelihood () # Actual model self . model_class = model_class self . model = model_class ( x_dim , u_dim , self . likelihood , gamma_length_scale_prior = gamma_length_scale_prior ) . to ( device = self . device ) self . _cache = dict () self . _f_func_gp = GaussianProcess ( self . f_func_mean , self . f_func_knl , ( self . x_dim ,), name = \"f\" ) @property def ctrl_size ( self ): return self . u_dim @property def state_size ( self ): return self . x_dim def _ensure_device_dtype ( self , X ): if isinstance ( X , np . ndarray ): X = torch . from_numpy ( X ) X = X . to ( device = self . device , dtype = next ( self . model . parameters ())[ 0 ] . dtype ) return X def fit ( self , * args , max_cg_iterations = 2000 , ** kwargs ): with warnings . catch_warnings (), \\ gpsettings . max_cg_iterations ( max_cg_iterations ): warnings . simplefilter ( \"ignore\" ) return self . _fit_with_warnings ( * args , ** kwargs ) def _fit_with_warnings ( self , Xtrain_in , Utrain_in , XdotTrain_in , training_iter = 50 , lr = 0.1 ): if Xtrain_in . shape [ 0 ] == 0 : # Do nothing if no data return self device = self . device model = self . model likelihood = self . likelihood # Convert to torch Xtrain , Utrain , XdotTrain = [ self . _ensure_device_dtype ( X ) for X in ( Xtrain_in , Utrain_in , XdotTrain_in )] self . clear_cache () model . set_train_data ( Xtrain , Utrain , XdotTrain ) # Set in train mode model . train () likelihood . train () # Find optimal model hyperparameters # Use the adam optimizer optimizer = torch . optim . Adam ( model . parameters (), lr = lr ) scheduler = torch . optim . lr_scheduler . MultiStepLR ( optimizer , milestones = ( torch . tensor ([ 0.3 , 0.6 , 0.8 , 0.90 ]) * training_iter ) . tolist ()) # \"Loss\" for GPs - the marginal log likelihood # num_data refers to the amount of training data # mll = VariationalELBO(likelihood, model, Y.numel()) mll = ExactMarginalLogLikelihood ( likelihood , model ) for i in range ( training_iter ): # Zero backpropped gradients from previous iteration optimizer . zero_grad () # Get predictive output output = model ( * model . train_inputs ) for p in model . parameters ( recurse = True ): assert not torch . isnan ( p ) . any () # Calc loss and backprop gradients loss = - mll ( output , XdotTrain . reshape ( - 1 ) * ( 1 + 1e-6 * torch . rand_like ( XdotTrain . reshape ( - 1 )))) assert not torch . isnan ( loss ) . any () assert not torch . isinf ( loss ) . any () loss . backward () for p in model . parameters ( recurse = True ): if p . grad is not None : assert not torch . isnan ( p . grad ) . any () LOG . debug ( 'Iter %d / %d - Loss: %.3f , lr: %.3g ' % ( i + 1 , training_iter , loss . item (), scheduler . get_lr ()[ 0 ])) optimizer . step () scheduler . step () return self def zero_grad ( self ): for p in self . model . parameters (): if p . grad is not None : p . grad . detach_ () p . grad . zero_ () def predict ( self , Xtest_in , return_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) # Switch back to eval mode if self . model is None or self . likelihood is None : raise RuntimeError ( \"Call fit() with training data before calling predict\" ) # Set in eval mode self . model . eval () self . likelihood . eval () # Concatenate the test set _ , MXUHtest = self . model . encode_from_XU ( Xtest ) output = self . model ( MXUHtest ) mean , cov = ( output . mean . reshape ( - 1 , * self . model . matshape ), output . covariance_matrix ) #mean_np, cov_np = [arr.detach().cpu().numpy() for arr in (mean, cov)] mean = mean . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ) cov = cov . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ) return ( mean , cov ) if return_cov else mean #return mean, cov def _perturbed_cholesky_compute ( self , k , B , Xtrain , UHtrain , cholesky_tries = 10 , cholesky_perturb_init = 1e-5 , cholesky_perturb_scale = 10 ): KXX = k ( Xtrain , Xtrain ) uBu = UHtrain @ B @ UHtrain . T Kb = KXX * uBu # Kb can be singular because of repeated datasamples # Add diagonal jitter Kbp , Kb_sqrt = make_psd ( Kb ) return Kb_sqrt def _perturbed_cholesky ( self , k , B , Xtrain , UHtrain , cache_key = \"perturbed_cholesky\" ): if cache_key not in self . _cache : self . _cache [ cache_key ] = self . _perturbed_cholesky_compute ( k , B , Xtrain , UHtrain ) return self . _cache [ cache_key ] def clear_cache ( self ): self . _cache = dict () def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True , grad_gp = False , grad_check = False , scalar_var_only = False ): \"\"\" Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb*\u1d40 \u03b1 4. v := L \\ kb* 5. k* := k(x*,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () if not grad_gp : k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module else : def grad_mean_s ( xs ): with variable_required_grad ( xs ): # allow_unused=True because the mean_module can be ConstantMean mean_xs = self . model . mean_module ( xs ) grad_mean_xs = torch . autograd . grad ( list ( mean_xs . flatten ()), xs , allow_unused = True )[ 0 ] if grad_mean_xs is None : return xs . new_zeros ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) else : return grad_mean_xs . reshape ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) mean_s = grad_mean_s def grad_ksx ( xs , xx ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xs , xx )), xs )[ 0 ] def grad_kxs ( xx , xs ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xx , xs )), xs )[ 0 ] k_sx = grad_ksx k_xs = grad_kxs def Hessian_kxx ( xs , xsp ): if xs is xsp : xsp = xsp . detach () . clone () return t_hessian ( k_xx , xs , xsp ) k_ss = Hessian_kxx A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (B, (1+m)n) # Make it (B, (1+m), n, 1) then transpose # (B, n, 1, (1+m)) and multiply with UHtest (B, (1+m)) to get # (B, n, 1) fX_mean_test = mean_s ( Xtest ) fu_mean_test = ( fX_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape , - 1 ) # (B, 1+m, n, n or 1) . permute ( 0 , 2 , 3 , 1 ) # (B, n, n or 1, 1+m) . reshape ( Xtest . shape [ 0 ], - 1 , self . model . matshape [ 0 ]) # (B, n(n or 1), 1+m) . bmm ( UHtest . unsqueeze ( - 1 )) # (B, n(n or 1), 1) . squeeze ( - 1 ) # (B, n(n or 1)) ) if self . model . train_inputs is None : # We do not have training data just return the mean and prior covariance if fX_mean_test . ndim == 4 : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :], - 1 ) else : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :]) # Compute k(x*,x*) u\u1d40Bu kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) # 5. k* := k(x*,x*) u\u1d40Bu scalar_var = kb_star_starp return fu_mean_test , torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) if grad_check and not grad_gp : with variable_required_grad ( Xtest ): old_dtype = self . dtype self . double_ () torch . autograd . gradcheck ( lambda X : self . model . covar_module . data_covar_module ( Xtrain . double (), X ) . evaluate (), Xtest . double ()) gradgradcheck ( partial ( lambda s , X , Xp : s . model . covar_module . data_covar_module ( X , Xp ) . evaluate (), self ), Xtest [: 1 , :] . double ()) self . to ( dtype = old_dtype ) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) - self . model . mean_module ( Xtrain ) . reshape ( nsamples , * self . model . matshape ) . transpose ( - 2 , - 1 ) . bmm ( UHtrain . unsqueeze ( - 1 )) . squeeze ( - 1 ) ) # 1. L := cholesky(K) Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) kb_star = k_xs ( Xtrain , Xtest ) * ( UHtrain @ B @ UHtest . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_func = lambda X : k_xs ( Xtrain . double (), X ) * ( UHtrain . double () @ B . double () @ UHtest . double () . t ()) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) \u03b1 = torch . cholesky_solve ( Y , Kb_sqrt ) # check the shape of Y # 3. \u03bc := \u03bc(x) + kb*\u1d40 \u03b1 mean = fu_mean_test + kb_star . t () @ \u03b1 if compute_cov : kb_star_p = ( k_xs ( Xtrain , Xtestp ) * ( UHtrain @ B @ UHtestp . t ()) if Xtestp_in is not None else kb_star ) kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_starp_func = lambda X : k_ss ( X , Xtestp . double ()) * ( UHtest @ B @ UHtestp . t ()) . double () with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_starp_func , Xtest . double ()) kb_star_star_func = lambda X , Xp : k_ss ( X , Xp ) * ( UHtest @ B @ UHtestp . t ()) . double () gradgradcheck ( kb_star_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 4. v := L \\ kb* v = torch . linalg . solve ( Kb_sqrt , kb_star ) if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) vp = torch . linalg . solve ( Kb_sqrt , kb_star_p ) if Xtestp_in is not None else v if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 5. k* := k(x*,x*) - v\u1d40v scalar_var = kb_star_starp - v . t () @ vp if grad_check : old_dtype = self . dtype self . double_ () scalar_var_func = lambda X : ( kb_star_starp_func ( X ) - v_func ( X ) . t () @ v_func ( Xtestp . double ())) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( scalar_var_func , Xtest . double ()) scalar_var_XX_func = lambda X , Xp : ( kb_star_star_func ( X , Xp ) - v_func ( X ) . t () @ v_func ( Xp )) gradgradcheck ( scalar_var_XX_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) covar_mat = torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) if grad_check : old_dtype = self . dtype self . double_ () covar_mat_func = lambda X : ( scalar_var_func ( X ) . reshape ( - 1 , 1 , 1 ) * A . double ())[ 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( covar_mat_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) else : # if not compute_cov covar_mat = 0 * A return mean , ( scalar_var if scalar_var_only else covar_mat ) @property def dtype ( self ): return next ( self . model . parameters ())[ 0 ] . dtype def to ( self , dtype = torch . float64 ): if dtype is torch . float64 : self . double_ () else : self . float_ () def double_ ( self ): self . model . double () assert self . dtype is torch . float64 self . model . train_inputs = tuple ([ inp . double () for inp in self . model . train_inputs ]) self . model . train_targets = self . model . train_targets . double () for k , v in self . _cache . items (): self . _cache [ k ] = v . double () def float_ ( self ): self . model . float () assert self . dtype is torch . float32 self . model . train_inputs = tuple ([ inp . float () for inp in self . model . train_inputs ]) self . model . train_targets = self . model . train_targets . float () for k , v in self . _cache . items (): self . _cache [ k ] = v . float () def _predict_flatten ( self , Xtest_in , Utest_in ): \"\"\" Directly predict f(x, u) = f(x) + g(x) @ u If you need f only, put Utest = [1, 0] \"\"\" device = self . device if isinstance ( Xtest_in , np . ndarray ): Xtest = torch . from_numpy ( Xtest_in ) else : Xtest = Xtest_in Xtest = Xtest . to ( device = device , dtype = self . dtype ) if isinstance ( Utest_in , np . ndarray ): Utest = torch . from_numpy ( Utest_in ) else : Utest = Utest_in Utest = Utest . to ( device = device , dtype = self . dtype ) # Switch back to eval mode if self . model is None or self . likelihood is None : raise RuntimeError ( \"Call fit() with training data before calling predict\" ) # Set in eval mode self . model . eval () self . likelihood . eval () # Concatenate the test set _ , MXUHtest = self . model . encode_from_XU ( Xtest , Utrain = Utest , M = 1 ) output = self . model ( MXUHtest ) mean = output . mean . reshape ( Xtest . shape [ 0 ], - 1 ) cov = output . covariance_matrix . reshape ( Xtest . shape [ 0 ], mean . shape [ - 1 ], mean . shape [ - 1 ], Xtest . shape [ 0 ]) return ( mean . to ( device = Xtest_in . device , dtype = Xtest_in . dtype ), cov . to ( device = Xtest_in . device , dtype = Xtest_in . dtype )) def f_func ( self , Xtest_in , return_cov = False ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = Xtest . new_zeros (( Xtest . shape [ 0 ], self . u_dim )) #mean_fx, cov_fx = self._predict_flatten(Xtest, Utest) mean_fx , cov_fx = self . custom_predict ( Xtest , Utest ) if return_cov : if Xtest_in . ndim == 1 : cov_fx = cov_fx . squeeze ( 0 ) cov_fx = cov_fx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) if Xtest_in . ndim == 1 : mean_fx = mean_fx . squeeze ( 0 ) mean_fx = mean_fx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return ( mean_fx , cov_fx ) if return_cov else mean_fx def _A_mat ( self ): return self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () def _B_mat ( self ): return self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () def f_func_mean ( self , Xtest_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) mean_f , _ = self . custom_predict ( Xtest , compute_cov = False ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) return mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) def f_func_knl ( self , Xtest_in , Xtestp_in , grad_check = False ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) _ , var_f = self . custom_predict ( Xtest , Xtestp_in = Xtestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f_out = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) if grad_check : old_dtype = self . dtype self . double_ () var_f_func = lambda X : self . custom_predict ( X , Xtestp_in = Xtestp , compute_cov = True )[ 1 ][ 0 , 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( var_f_func , Xtest . double ()) var_f_func_2 = lambda X , Xp : self . custom_predict ( X , Xtestp_in = Xp , compute_cov = True )[ 1 ][ 0 , 0 , 0 ] gradgradcheck ( var_f_func_2 , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) return var_f_out def f_func_gp ( self ): #return GaussianProcess(self.f_func_mean, self.f_func_knl, (self.x_dim,)) return self . _f_func_gp def fu_func_mean ( self , Utest_in , Xtest_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) mean_f , _ = self . custom_predict ( Xtest , Utest , compute_cov = False ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) mean_f = mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_f def _grad_fu_func_mean ( self , Xtest_in , Utest_in = None ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in is not None and Utest_in . ndim == 1 else Utest_in ) mean_f , _ = self . custom_predict ( Xtest , Utest , compute_cov = False , grad_gp = True ) if Xtest_in . ndim == 1 : mean_f = mean_f . squeeze ( 0 ) mean_f = mean_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_f def fu_func_knl ( self , Utest_in , Xtest_in , Xtestp_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) _ , var_f = self . custom_predict ( Xtest , Utest , Xtestp_in = Xtestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return var_f def fu_func_gp ( self , Utest_in ): gp = GaussianProcess ( mean = partial ( self . fu_func_mean , Utest_in ), knl = partial ( self . fu_func_knl , Utest_in ), shape = ( self . x_dim ,), name = \"F(.)u\" ) gp . register_covar ( self . _f_func_gp , partial ( self . covar_fu_f , Utest_in )) return gp def covar_fu_f ( self , Utest_in , Xtest_in , Xtestp_in ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) Xtestp = ( Xtestp_in . unsqueeze ( 0 ) if Xtestp_in . ndim == 1 else Xtestp_in ) Utestp = torch . zeros_like ( Utest ) mean_f , var_f = self . custom_predict ( Xtest , Utest , Xtestp_in = Xtestp , Utestp_in = Utestp , compute_cov = True ) if Xtest_in . ndim == 1 : var_f = var_f . squeeze ( 0 ) var_f = var_f . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return var_f def g_func ( self , Xtest_in , return_cov = False ): assert not return_cov , \"Don't know what matrix covariance looks like\" Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) mean_Fx = self . predict ( Xtest , return_cov = return_cov ) mean_gx = mean_Fx [:, 1 :, :] if Xtest_in . ndim == 1 : mean_gx = mean_gx . squeeze ( 0 ) mean_gx = mean_gx . to ( dtype = Xtest_in . dtype , device = Xtest_in . device ) return mean_gx . transpose ( - 2 , - 1 ) def _gu_func ( self , Xtest_in , Utest_in = None , return_cov = False , Xtestp_in = None ): Xtest = ( Xtest_in . unsqueeze ( 0 ) if Xtest_in . ndim == 1 else Xtest_in ) if Utest_in is not None : Utest = ( Utest_in . unsqueeze ( 0 ) if Utest_in . ndim == 1 else Utest_in ) else : Utest = Xtest_in . new_ones ( Xtest . shape [ 0 ], self . u_dim ) mean_gu , var_gu = self . custom_predict ( Xtest , Utest , UHfill = 0 , Xtestp_in = Xtestp_in , compute_cov = True ) if Xtest_in . ndim == 1 and Utest_in . ndim == 1 : mean_gu = mean_gu . squeeze ( 0 ) var_gu = var_gu . squeeze ( 0 ) return ( mean_gu , var_gu ) if return_cov else mean_gu def g_func_mean ( self , Xtest_in ): return self . _gu_func ( Xtest_in , return_cov = False ) def _cbf_func ( self , Xtest , grad_htest , return_cov = False ): if return_cov : mean_Fx , cov_Fx = self . predict ( Xtest , return_cov = True ) cov_hFT = grad_htest . T @ cov_Fx @ grad_htest else : mean_Fx , cov_Fx = self . predict ( Xtest , return_cov = False ) mean_hFT = grad_htest @ mean_Fx return mean_hFT , cov_hFT def state_dict ( self ): return dict ( model = self . model . state_dict (), likelihood = self . likelihood . state_dict ()) def load_state_dict ( self , state_dict ): self . model . load_state_dict ( state_dict [ 'model' ]) self . likelihood . load_state_dict ( state_dict [ 'likelihood' ]) def save ( self , path = '/tmp/saved.pickle' ): torch . save ( self . state_dict (), path ) def load ( self , path = '/tmp/saved.pickle' ): self . load_state_dict ( torch . load ( path )) def get_kernel_param ( self , name ): if name == 'A' : return self . _A_mat () elif name == 'B' : return self . _B_mat () elif name == 'scalefactor' : assert isinstance ( self . model . input_covar , ScaleKernel ) return self . model . input_covar . outputscale elif name == 'lengthscale' : assert isinstance ( self . model . input_covar . base_kernel , RBFKernel ) return self . model . input_covar . base_kernel . lengthscale else : raise ValueError ( 'Unknown param %s ' % name )","title":"ControlAffineRegressor"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegressor.custom_predict","text":"Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb \u1d40 \u03b1 4. v := L \\ kb 5. k := k(x ,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) Source code in bayes_cbf/control_affine_model.pydef custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True , grad_gp = False , grad_check = False , scalar_var_only = False ): \"\"\" Gpytorch is complicated. It uses terminology like fantasy something, something. Even simple exact prediction strategy uses Laczos. I do not understand Laczos and Gpytorch code. Let the training be handled by Gpytorch. After that i take things in my own hands and predict myself. Vector variate GP (preffered): K\u1da0(u, u') = u\u1d40Bu' \u2297 A = (u\u1d40Bu)A = b\u1da0(u, u') A x\u0307 = f(x;u) cov(f(x;u), f(x';u')) = k(x,x')K\u1da0(u, u') = k(x,x')b\u1da0(u, u') \u2297 A f(x; u) ~ \ud835\udd3e\u2119(\u03bc(x)u, k(x, x')b\u1da0(u, u') \u2297 A) Kb\u207b\u00b9:= [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c kb* := [k(x\u1d62,x\u2c7c)u\u1d62\u1d40Bu\u2c7c]\u1d62\u2c7c f*(x*; u) ~ \ud835\udd3e\u2119( {[(kb*\u1d40K_b\u207b\u00b9) \u2297 I\u2099]}(Y-\u03bc(x)u), [kb(x*,x*) - k*b\u1d40Kb\u207b\u00b9kb*] \u2297 A) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(K) 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) 3. \u03bc := kb*\u1d40 \u03b1 4. v := L \\ kb* 5. k* := k(x*,x*) - v\u1d40v 6. log p(y|X) := -0.5 y\u1d40 \u03b1 - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () if not grad_gp : k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module else : def grad_mean_s ( xs ): with variable_required_grad ( xs ): # allow_unused=True because the mean_module can be ConstantMean mean_xs = self . model . mean_module ( xs ) grad_mean_xs = torch . autograd . grad ( list ( mean_xs . flatten ()), xs , allow_unused = True )[ 0 ] if grad_mean_xs is None : return xs . new_zeros ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) else : return grad_mean_xs . reshape ( xs . shape [ 0 ], * self . model . matshape , xs . shape [ - 1 ]) mean_s = grad_mean_s def grad_ksx ( xs , xx ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xs , xx )), xs )[ 0 ] def grad_kxs ( xx , xs ): with variable_required_grad ( xs ): return torch . autograd . grad ( list ( k_xx ( xx , xs )), xs )[ 0 ] k_sx = grad_ksx k_xs = grad_kxs def Hessian_kxx ( xs , xsp ): if xs is xsp : xsp = xsp . detach () . clone () return t_hessian ( k_xx , xs , xsp ) k_ss = Hessian_kxx A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (B, (1+m)n) # Make it (B, (1+m), n, 1) then transpose # (B, n, 1, (1+m)) and multiply with UHtest (B, (1+m)) to get # (B, n, 1) fX_mean_test = mean_s ( Xtest ) fu_mean_test = ( fX_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape , - 1 ) # (B, 1+m, n, n or 1) . permute ( 0 , 2 , 3 , 1 ) # (B, n, n or 1, 1+m) . reshape ( Xtest . shape [ 0 ], - 1 , self . model . matshape [ 0 ]) # (B, n(n or 1), 1+m) . bmm ( UHtest . unsqueeze ( - 1 )) # (B, n(n or 1), 1) . squeeze ( - 1 ) # (B, n(n or 1)) ) if self . model . train_inputs is None : # We do not have training data just return the mean and prior covariance if fX_mean_test . ndim == 4 : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :], - 1 ) else : fu_mean_test = fu_mean_test . reshape ( Xtest . shape [ 0 ], * self . model . matshape [ 1 :]) # Compute k(x*,x*) u\u1d40Bu kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) # 5. k* := k(x*,x*) u\u1d40Bu scalar_var = kb_star_starp return fu_mean_test , torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) if grad_check and not grad_gp : with variable_required_grad ( Xtest ): old_dtype = self . dtype self . double_ () torch . autograd . gradcheck ( lambda X : self . model . covar_module . data_covar_module ( Xtrain . double (), X ) . evaluate (), Xtest . double ()) gradgradcheck ( partial ( lambda s , X , Xp : s . model . covar_module . data_covar_module ( X , Xp ) . evaluate (), self ), Xtest [: 1 , :] . double ()) self . to ( dtype = old_dtype ) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) - self . model . mean_module ( Xtrain ) . reshape ( nsamples , * self . model . matshape ) . transpose ( - 2 , - 1 ) . bmm ( UHtrain . unsqueeze ( - 1 )) . squeeze ( - 1 ) ) # 1. L := cholesky(K) Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) kb_star = k_xs ( Xtrain , Xtest ) * ( UHtrain @ B @ UHtest . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_func = lambda X : k_xs ( Xtrain . double (), X ) * ( UHtrain . double () @ B . double () @ UHtest . double () . t ()) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 2. \u03b1 := L\u1d40 \\ ( L \\ Y ) \u03b1 = torch . cholesky_solve ( Y , Kb_sqrt ) # check the shape of Y # 3. \u03bc := \u03bc(x) + kb*\u1d40 \u03b1 mean = fu_mean_test + kb_star . t () @ \u03b1 if compute_cov : kb_star_p = ( k_xs ( Xtrain , Xtestp ) * ( UHtrain @ B @ UHtestp . t ()) if Xtestp_in is not None else kb_star ) kb_star_starp = k_ss ( Xtest , Xtestp ) * ( UHtest @ B @ UHtestp . t ()) if grad_check : old_dtype = self . dtype self . double_ () kb_star_starp_func = lambda X : k_ss ( X , Xtestp . double ()) * ( UHtest @ B @ UHtestp . t ()) . double () with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( kb_star_starp_func , Xtest . double ()) kb_star_star_func = lambda X , Xp : k_ss ( X , Xp ) * ( UHtest @ B @ UHtestp . t ()) . double () gradgradcheck ( kb_star_star_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 4. v := L \\ kb* v = torch . linalg . solve ( Kb_sqrt , kb_star ) if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) vp = torch . linalg . solve ( Kb_sqrt , kb_star_p ) if Xtestp_in is not None else v if grad_check : old_dtype = self . dtype self . double_ () v_func = lambda X : torch . linalg . solve ( Kb_sqrt . double (), kb_star_func ( X )) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( v_func , Xtest . double ()) self . to ( dtype = old_dtype ) # 5. k* := k(x*,x*) - v\u1d40v scalar_var = kb_star_starp - v . t () @ vp if grad_check : old_dtype = self . dtype self . double_ () scalar_var_func = lambda X : ( kb_star_starp_func ( X ) - v_func ( X ) . t () @ v_func ( Xtestp . double ())) with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( scalar_var_func , Xtest . double ()) scalar_var_XX_func = lambda X , Xp : ( kb_star_star_func ( X , Xp ) - v_func ( X ) . t () @ v_func ( Xp )) gradgradcheck ( scalar_var_XX_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) covar_mat = torch_kron ( scalar_var . unsqueeze ( 0 ), A . unsqueeze ( 0 )) if grad_check : old_dtype = self . dtype self . double_ () covar_mat_func = lambda X : ( scalar_var_func ( X ) . reshape ( - 1 , 1 , 1 ) * A . double ())[ 0 , 0 ] with variable_required_grad ( Xtest ): torch . autograd . gradcheck ( covar_mat_func , Xtest . double ()) self . model . float () self . to ( dtype = old_dtype ) else : # if not compute_cov covar_mat = 0 * A return mean , ( scalar_var if scalar_var_only else covar_mat )","title":"custom_predict()"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegressorExact","text":"Bases: ControlAffineRegressor Source code in bayes_cbf/control_affine_model.py 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 class ControlAffineRegressorExact ( ControlAffineRegressor ): def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , A , BkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = compute_cov ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) UHtest_BkXX = UHtest . unsqueeze ( - 1 ) . unsqueeze ( 1 ) # (k', 1, (1+m), 1) UHtestp_BkXX = UHtestp . unsqueeze ( - 1 ) . unsqueeze ( 0 ) # (1, k', (1+m), 1) meanFXU = meanFX . bmm ( UHtest . unsqueeze ( - 1 )) . squeeze ( - 1 ) if compute_cov : varFXU = torch . matmul ( torch . matmul ( UHtest_BkXX . transpose ( - 2 , - 1 ), BkXX ), UHtestp_BkXX ) * A else : varFXU = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], * A . shape ) return ( meanFXU , varFXU ) def custom_predict_fullmat ( self , Xtest_in , Xtestp_in = None ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , A , BkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = True ) assert not torch . isnan ( meanFX ) . any () b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim assert meanFX . shape == ( b , n , ( 1 + m )) meanFX = meanFX . transpose ( - 2 , - 1 ) # (b, (1+m), n) var_FX = torch_kron ( BkXX . transpose ( 2 , 1 ) . reshape ( b * ( 1 + m ), b * ( 1 + m )), # (b(1+m), b(1+m)) A , # (n, n) batch_dims = 0 ) # (b(1+m)n, b(1+m)n) # assert is_psd(var_FX) # (b(1+m)n), (b(1+m)n, b(1+m)n) return meanFX . reshape ( - 1 ), var_FX def _custom_predict_matrix ( self , Xtest_in , Xtestp_in = None , compute_cov = True ): \"\"\" Matrix variate GP: Separate A and B F(x) ~ \ud835\udd44\ud835\udd4d\u2119(\ud835\udc0c(x), \ud835\udc00, \ud835\udc01 k(x, x')) \u2208 (n, 1+m) \ud835\udd05(XU, XU) = [\ud835\udc2e\u1d62\u1d40B\ud835\udc2e\u2c7c (k(x\u1d62, x\u1d62)+\u03c3\u00b2)]\u1d62\u2c7c \u2208 (k, k) \ud835\udd05(XU, x*) = [\ud835\udc2e\u1d62\u1d40B (k(x\u1d62, x*)+\u03c3\u00b2)]\u1d62 \u2208 (k(1+m), k) \ud835\udc0c(XU) = [\ud835\udc0c(x\u1d62)\ud835\udc2e\u1d62]\u1d62 \u2208 (n, k) F*(x*) ~ \ud835\udd44\ud835\udd4d\u2119( \ud835\udc0c(x*) + (X\u0307 - \ud835\udc0c(XU))[\ud835\udd05(XU, XU)]\u207b\u00b9(\ud835\udd05(XU, x*)\u1d40), A, B k(x*, x*) - \ud835\udd05(XU, x*)[\ud835\udd05(XU, XU)]\u207b\u00b9(\ud835\udd05(XU, x*)\u1d40) ) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(\ud835\udd05(XU, XU)) O(k\u00b3) 2. B\u2020 := ( (LL\u1d40) \\ \ud835\udd05(XU, x*)\u1d40 ) \u2208 (k, k(1+m))) O(k\u00b2(1+m)) 3. Y = (X\u0307 - \ud835\udc0c(XU)) \u2208 (n, k) O(kn(1+m)) 3. \ud835\udc0c\u2096(x*) := \ud835\udc0c(x*) + Y @ B\u2020 \u2208 (n, (1+m)) O(nk\u00b2(1+m)) 4. \ud835\udc01\u2096(x*, x*) := B k(x*,x*) - \ud835\udd05(XU, x*) @ B\u2020 \u2208 (1+m, 1+m) O(k\u00b2(1+m)\u00b2) 5. log p(y|X) := -0.5 Y @ ( (LL\u1d40) \\ Y ) - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () k_ss = k_xs = k_sx = k_xx mean_s = self . model . mean_module A = self . model . covar_module . task_covar_module . U . covar_matrix . evaluate () B = self . model . covar_module . task_covar_module . V . covar_matrix . evaluate () # Output of mean_s(Xtest) is (b, (1+m)n) # Make it (b, (1+m), n, 1) then transpose # (b, n, 1, (1+m)) and multiply with UHtest (b, (1+m)) to get # (b, n, 1) fX_mean_test = mean_s ( Xtest ) . reshape ( Xtest . shape [ 0 ], * self . model . matshape ) . transpose ( - 2 , - 1 ) # (B, 1+m, n) -> (B, n, 1+m) if self . model . train_inputs is None : # 5. k* := k(x*,x*) B return fX_mean_test , A , B * k_ss ( Xtest , Xtestp ) . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) # Y\u2081\u2096 = X\u0307\u2081\u2096 - \ud835\udc0c\u2081\u2096\ud835\udd18\u2081\u2096 MXtrain = self . model . mean_module ( Xtrain ) # (k, (1+m)n) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) # (k, n) - ( MXtrain . reshape ( nsamples , * self . model . matshape ) # (k, (1+m), n) . transpose ( - 2 , - 1 ) # (k, n, (1+m)) . bmm ( UHtrain . unsqueeze ( - 1 ) # (k, (1+m), 1) ) # (k, n, 1) . squeeze ( - 1 )) # (k, n) ) # (k, n) # 1. L := cholesky(\ud835\udd05(XU, XU)) or LL\u1d40 = \ud835\udd05(XU, XU) # Kb_sqrt = L Kb_sqrt = self . _perturbed_cholesky ( k_xx , B , Xtrain , UHtrain ) # (k, k) # kb_star = \ud835\udd05(XU, x*) # k_xs(Xtrain, Xtest) \\in (k, b) # UHtrain \\in (k, (1+m)) # B \\in (1+m, 1+m) kb_star = k_sx ( Xtest , Xtrain ) . unsqueeze ( - 1 ) * ( UHtrain @ B ) . unsqueeze ( 0 ) # (b, k, (1+m)) # 2. B\u2020(x) := ( LL\u1d40) \\ (\ud835\udd05(XU, x)\u1d40) Bdagger = torch . cholesky_solve ( kb_star , Kb_sqrt ) # (b, k, (1+m)) # 3. \ud835\udc0c\u2096 := \ud835\udc0c\u2080(x) + Y\u2081\u2096 B\u2020(x) mean_k = fX_mean_test + torch . matmul ( Y . t () . unsqueeze ( 0 ), Bdagger ) # (b, n, (1+m)) if compute_cov : # 4. \ud835\udc01\u2096(x*, x*) := B k(x*,x*) - \ud835\udd05(XU, x*) @ B\u2020 k_xtest_xtestp = k_ss ( Xtest , Xtestp ) # (b, b) #k_xtest_xtestp, _ = make_psd(k_xtest_xtestp) #assert is_psd(B) KXTestBXTestB = torch_kron ( k_xtest_xtestp , B , batch_dims = 0 ) # (b(1+m), b(1+m)) # assert is_psd(KXTestBXTestB) # assert is_psd( # torch.cat([ # torch.cat([Kb_sqrt @ Kb_sqrt.t(), # kb_star.reshape(-1, b*(1+m))], dim=-1), # torch.cat([kb_star.transpose(0, 2).reshape(b*(1+m),-1), # KXTestBXTestB], dim=-1) # ], dim=0) # ) # v = L\u1d40 \ud835\udd05(XU, x*) # v = torch.linalg.solve(Kb_sqrt, kb_star) # (b, k, (1+m)) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim k = Xtrain . shape [ 0 ] BkXX = ( KXTestBXTestB # (b(1+m), b(1+m)) - ( kb_star . transpose ( - 2 , - 1 ) # (b, (1+m), k) . reshape ( b * ( 1 + m ), k ) # (b (1+m), k) @ ( Bdagger . transpose ( 1 , 0 ) # (k, b, (1+m)) . reshape ( k , b * ( 1 + m ))) # (k, b(1+m)) ) # (b(1+m), b(1+m)) ) BkXX , _ = make_psd ( BkXX ) # assert is_psd(BkXX) BkXX = BkXX . reshape ( b , ( 1 + m ), b , ( 1 + m )) . transpose ( 1 , 2 ) # (b, b, (1+m), (1+m)) else : m = self . u_dim BkXX = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], ( 1 + m ), ( 1 + m )) # (b, n, (1+m)), (n, n), (b, b, (1+m), (1+m)) return mean_k , A , BkXX","title":"ControlAffineRegressorExact"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.ControlAffineRegressorVector","text":"Bases: ControlAffineRegressor Source code in bayes_cbf/control_affine_model.py 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 class ControlAffineRegressorVector ( ControlAffineRegressor ): def __init__ ( self , * args , model_class = ControlAffineVectorGP , ** kwargs ): super () . __init__ ( * args , model_class = model_class , ** kwargs ) def custom_predict ( self , Xtest_in , Utest_in = None , UHfill = 1 , Xtestp_in = None , Utestp_in = None , UHfillp = 1 , compute_cov = True ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , KkXX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = compute_cov ) if Utest_in is None : UHtest = Xtest . new_zeros ( Xtest . shape [ 0 ], self . model . matshape [ 0 ]) UHtest [:, 0 ] = 1 else : Utest = self . _ensure_device_dtype ( Utest_in ) UHtest = torch . cat (( Utest . new_full (( Utest . shape [ 0 ], 1 ), UHfill ), Utest ), dim =- 1 ) if Utestp_in is None : UHtestp = UHtest else : Utestp = self . _ensure_device_dtype ( Utestp_in ) UHtestp = torch . cat (( Utest . new_full (( Utestp . shape [ 0 ], 1 ), UHfillp ), Utestp ), dim =- 1 ) meanFXU = meanFX . bmm ( UHtest . unsqueeze ( - 1 )) . squeeze ( - 1 ) if compute_cov : k , n = Xtest . shape In = torch . eye ( n , dtype = Xtest . dtype , device = Xtest . device ) # (n, n) UHtest_block = torch_kron ( UHtest , In , batch_dims = 0 ) . reshape ( k , 1 , n , - 1 ) # (k, 1, n, (1+m)n) UHtest_block_T = UHtest_block . reshape ( 1 , k , n , - 1 ) . transpose ( - 2 , - 1 ) # (1, k, (1+m)n), n) varFXU = torch . matmul ( torch . matmul ( UHtest_block , KkXX ), UHtest_block_T ) else : k , n = Xtest . shape varFXU = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], n , n ) return ( meanFXU , varFXU ) def custom_predict_fullmat ( self , Xtest_in , Xtestp_in = None ): Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) meanFX , varFX = self . _custom_predict_matrix ( Xtest_in , Xtestp_in , compute_cov = True ) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim assert meanFX . shape == ( b , n , ( 1 + m )) meanFX = meanFX . transpose ( - 2 , - 1 ) # (b, (1+m), n) return ( meanFX . reshape ( - 1 ), # (b(1+m)n) varFX # (b, b, (1+m)n, (1+m)n)) . transpose ( 2 , 1 ) # (b, (1+m)n, b, (1+m)n) . reshape ( b * ( 1 + m ) * n , b * ( 1 + m ) * n )) def _perturbed_cholesky_compute ( self , k_xx , # function \u03a3 , # ((1+m)n, (1+m)n) Xtrain , # (k, n) UHtrain , # (k, (1+m)) cholesky_tries = 10 , cholesky_perturb_init = 1e-5 , cholesky_perturb_scale = 10 ): k , n = Xtrain . shape In = torch . eye ( n , dtype = Xtrain . dtype , device = Xtrain . device ) # (n, n) KXX = k_xx ( Xtrain , Xtrain ) # (k, k) UHtrain_block = torch_kron ( UHtrain , In , batch_dims = 0 ) . reshape ( k , 1 , n , - 1 ) # (k, 1, n, (1+m)n) UHtrain_block_T = UHtrain_block . reshape ( 1 , k , n , - 1 ) . transpose ( - 2 , - 1 ) # (1, k, (1+m)n), n) u\u03a3u = torch . matmul ( torch . matmul ( UHtrain_block , \u03a3 . unsqueeze ( - 3 ) . unsqueeze ( - 4 )), UHtrain_block_T ) # (k, k, n, n) Kb = (( KXX . reshape ( k , k , 1 , 1 ) * u\u03a3u # (k, k, n, n) ) . transpose ( 1 , 2 ) # (k, n, k, n) . reshape ( k * n , k * n ) ) # Kb can be singular because of repeated datasamples # Add diagonal jitter Kbp , Kb_sqrt = make_psd ( Kb , cholesky_tries = cholesky_tries , cholesky_perturb_init = cholesky_perturb_init , cholesky_perturb_scale = cholesky_perturb_scale ) return Kb_sqrt def _custom_predict_matrix ( self , Xtest_in , Xtestp_in = None , compute_cov = True ): \"\"\" Vector variate GP: \u03a3 \u2208 ((1+m)n, (1+m)n) vec(F(x)) ~ \ud835\udd3e\u2119(vec(\ud835\udc0c(x)), \u03a3 k(x, x')) \u2208 ((1+m)n, 1) \ud835\udd0e(XU, XU) = [(\ud835\udc2e\u1d62\u1d40 \u2297 I\u2099) \u03a3 (\ud835\udc2e\u2c7c \u2297 I\u2099) (k(x\u1d62, x\u1d62)+\u03c3\u00b2)]\u1d62\u2c7c \u2208 (kn, kn) \ud835\udd0e(XU, x*) = [(\ud835\udc2e\u1d62\u1d40 \u2297 I\u2099) \u03a3 (k(x\u1d62, x*)+\u03c3\u00b2)]\u1d62 \u2208 (kn, (1+m)n) \ud835\udc0c(XU) = [\ud835\udc0c(x\u1d62)\ud835\udc2e\u1d62]\u1d62 \u2208 (k, n) vec(F*(x*)) ~ \ud835\udd3e\u2119( vec[\ud835\udc0c(x*) + (X\u0307 - \ud835\udc0c(XU))[\ud835\udd0e(XU, XU)]\u207b\u00b9(\ud835\udd0e(XU, x*)\u1d40)], \u03a3 k(x*, x*) - \ud835\udd0e(XU, x*)[\ud835\udd0e(XU, XU)]\u207b\u00b9(\ud835\udd0e(XU, x*)\u1d40) ) Algorithm (Rasmussen and Williams 2006) 1. L := cholesky(\ud835\udd0e(XU, XU)) O(k\u00b3n\u00b3) 2. Y = vec(X\u0307 - \ud835\udc0c(XU)) \u2208 (kn, 1) O(kn) 2. \u03b1 := ( (LL\u1d40) \\ Y ) \u2208 (kn, 1) O(k\u00b3n) 3. \ud835\udc0c\u2096(x*) := \ud835\udc0c(x*) + \ud835\udd0e(XU, x*)\u1d40 \u03b1 \u2208 ((1+m)n, 1) O(k\u00b2n\u00b3(1+m)) 4. v(x*) = L \\ \ud835\udd0e(XU, x*) \u2208 (kn, (1+m)n) O(k\u00b2n\u00b3(1+m)) 5. \u03a3\u2096(x, x') = \u03a3\u2080(x, x') - v(x*)\u1d40 v(x*) \u2208 ((1+m)n, (1+m)n)) O(k\u00b2n\u2074(1+m)\u00b2)) 6. log p(y|X) := -0.5 Y @ ( (LL\u1d40) \\ Y ) - \u2211 log L\u1d62\u1d62 - 0.5 n log(2\u03c0) \"\"\" Xtest = self . _ensure_device_dtype ( Xtest_in ) Xtestp = ( self . _ensure_device_dtype ( Xtestp_in ) if Xtestp_in is not None else Xtest ) k_xx = lambda x , xp : self . model . covar_module . data_covar_module ( x , xp ) . evaluate () mean_s = self . model . mean_module \u03a3 = self . model . covar_module . task_covar_module . covar_matrix . evaluate () # ((1+m)n, (1+m)n) # Output of mean_s(Xtest) is (b, (1+m)n) # Make it (b, (1+m), n, 1) then transpose # (b, n, 1, (1+m)) and multiply with UHtest (b, (1+m)) to get # (b, n, 1) fX_mean_test = mean_s ( Xtest ) . reshape ( Xtest . shape [ 0 ], * self . model . matshape ) . transpose ( - 2 , - 1 ) # (b, 1+m, n) -> (B, n, 1+m) if self . model . train_inputs is None : # 5. k* := k(x*,x*) B return fX_mean_test , \u03a3 * k_xx ( Xtest , Xtestp ) . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) MXUHtrain = self . model . train_inputs [ 0 ] Mtrain , Xtrain , UHtrain = self . model . decoder . decode ( MXUHtrain ) nsamples = Xtrain . size ( 0 ) # Y\u2081\u2096 = X\u0307\u2081\u2096 - \ud835\udc0c\u2081\u2096\ud835\udd18\u2081\u2096 MXtrain = self . model . mean_module ( Xtrain ) # (k, (1+m)n) Y = ( self . model . train_targets . reshape ( nsamples , - 1 ) # (k, n) - ( MXtrain . reshape ( nsamples , * self . model . matshape ) # (k, (1+m), n) . transpose ( - 2 , - 1 ) # (k, n, (1+m)) . bmm ( UHtrain . unsqueeze ( - 1 ) # (k, (1+m), 1) ) # (k, n, 1) . squeeze ( - 1 )) # (k, n) ) # (k, n) # 1. L := cholesky(\ud835\udd0e(XU, XU)) or LL\u1d40 = \ud835\udd0e(XU, XU) # Kb_sqrt = L Kb_sqrt = self . _perturbed_cholesky ( k_xx , \u03a3 , Xtrain , UHtrain ) # (kn, kn) # kb_star = \ud835\udd0e(XU, x*) # k_xs(Xtrain, Xtest) \\in (k, b) # UHtrain \\in (k, (1+m)) # B \\in (1+m, 1+m) k , n = Xtrain . shape b = Xtest . shape [ 0 ] In = torch . eye ( n , dtype = Xtrain . dtype , device = Xtrain . device ) # (n, n) UHtrain_block = torch_kron ( UHtrain , In , batch_dims = 0 ) # (kn, (1+m)n) kb_star = ( k_xx ( Xtest , Xtrain ) . reshape ( b , k , 1 , 1 ) # (b, k, 1, 1) * ( UHtrain_block @ \u03a3 # (kn, (1+m)n) ) . reshape ( 1 , k , n , - 1 ) # (1, k, n, (1+m)n) ) . reshape ( b , k * n , - 1 ) # (b, kn, (1+m)n) # 2. \u03b1 := ( LL\u1d40) \\ Y \u03b1 = torch . cholesky_solve ( Y . reshape ( - 1 , 1 ), Kb_sqrt ) # (kn, 1) # 3. \ud835\udc0c\u2096 := \ud835\udc0c\u2080(x) + \ud835\udd0e(XU, x*)\u1d40 \u03b1 mean_k = fX_mean_test + ( torch . matmul ( kb_star . transpose ( - 2 , - 1 ), # (b, (1+m)n, kn) \u03b1 . unsqueeze ( 0 )) # (1, kn, 1) . reshape ( b , - 1 , n ) # (b, (1+m)n, 1) . transpose ( - 2 , - 1 ) # (b, n, (1+m)) ) if compute_cov : # 4. v = L \\ \ud835\udd0e(XU, x*) # 5. B\u2096(x, x') = B\u2080(x, x') - v\u1d40 v v = torch . linalg . solve ( Kb_sqrt , # (kn, kn) kb_star , # (b, kn, (1+m)n) ) # (b, kn, (1+m)n) b = Xtest . shape [ 0 ] m = self . u_dim n = self . x_dim k = Xtrain . shape [ 0 ] vb = v . transpose ( 0 , 1 ) . reshape ( k * n , b * ( 1 + m ) * n ) # (kn, b(1+m)n) KkXX = ( torch_kron ( k_xx ( Xtest , Xtestp ), \u03a3 , batch_dims = 0 ) # (b(1+m)n, b(1+m)n) - vb . t () @ vb # (b(1+m)n, b(1+m)n) ) KkXX , _ = make_psd ( KkXX ) KkXX = KkXX . reshape ( b , ( 1 + m ) * n , b , ( 1 + m ) * n ) . transpose ( 2 , 1 ) else : n = self . model . matshape [ 1 ] m = self . model . matshape [ 0 ] - 1 KkXX = Xtest . new_zeros ( Xtest . shape [ 0 ], Xtestp . shape [ 0 ], ( 1 + m ) * n , ( 1 + m ) * n ) # (b, n, (1+m)), (b, b, (1+m)n, (1+m)n) return mean_k , KkXX","title":"ControlAffineRegressorVector"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.IdentityLikelihood","text":"Bases: _GaussianLikelihoodBase Dummy likelihood class that does not do anything. It tries to be as close to identity as possible. gpytorch.likelihoods.Likelihood is supposed to model p(y|f(x)). GaussianLikelihood model this by y = f(x) + \u03b5, \u03b5 ~ N(0, \u03c3\u00b2) IdentityLikelihood tries to model y = f(x) , without breaking the gpytorch exact_prediction_strategies function which requires GaussianLikelihood. Source code in bayes_cbf/control_affine_model.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class IdentityLikelihood ( _GaussianLikelihoodBase ): \"\"\" Dummy likelihood class that does not do anything. It tries to be as close to identity as possible. gpytorch.likelihoods.Likelihood is supposed to model p(y|f(x)). GaussianLikelihood model this by y = f(x) + \u03b5, \u03b5 ~ N(0, \u03c3\u00b2) IdentityLikelihood tries to model y = f(x) , without breaking the gpytorch `exact_prediction_strategies` function which requires GaussianLikelihood. \"\"\" def __init__ ( self ): self . min_possible_noise = 1e-6 super () . __init__ ( noise_covar = FixedGaussianNoise ( noise = torch . tensor ( self . min_possible_noise ))) @property def noise ( self ): return 0 @noise . setter def noise ( self , _ ): LOG . warn ( \"Ignore setting of noise\" ) def forward ( self , function_samples : torch . Tensor , * params : Any , ** kwargs : Any ) -> base_distributions . Normal : # FIXME: How can we get the covariance of the function samples? return base_distributions . Normal ( function_samples , self . min_possible_noise * torch . eye ( function_samples . size ())) def marginal ( self , function_dist : MultivariateNormal , * params : Any , ** kwargs : Any ) -> MultivariateNormal : return function_dist","title":"IdentityLikelihood"},{"location":"reference/bayes_cbf/control_affine_model/#bayes_cbf.control_affine_model.Namespace","text":"Makes a class as a namespace for static functions Source code in bayes_cbf/control_affine_model.py 50 51 52 53 54 55 56 57 58 59 class Namespace : \"\"\" Makes a class as a namespace for static functions \"\"\" def __getattribute__ ( self , name ): val = object . __getattribute__ ( self , name ) if isinstance ( val , Callable ): return staticmethod ( val ) else : return val","title":"Namespace"},{"location":"reference/bayes_cbf/controllers/","text":"Controller Bases: ABC Controller interface Source code in bayes_cbf/controllers.py 54 55 56 57 58 59 60 61 class Controller ( ABC ): \"\"\" Controller interface \"\"\" needs_ground_truth = False @abstractmethod def control ( self , xi , t = None ): pass NamedAffineFunc Bases: ABC Source code in bayes_cbf/controllers.py 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 class NamedAffineFunc ( ABC ): @property def __name__ ( self ): \"\"\" Name used for plots \"\"\" return self . name @abstractmethod def value ( self , x ): \"\"\" Scalar value function \"\"\" @abstractmethod def b ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" @abstractmethod def A ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" def __call__ ( self , x , u ): \"\"\" A(x) @ u - b(x) \"\"\" return self . A ( x ) @ u - self . b ( x ) A ( x ) abstractmethod A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 759 760 761 762 763 @abstractmethod def A ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" __call__ ( x , u ) A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 765 766 767 768 769 def __call__ ( self , x , u ): \"\"\" A(x) @ u - b(x) \"\"\" return self . A ( x ) @ u - self . b ( x ) __name__ () property Name used for plots Source code in bayes_cbf/controllers.py 740 741 742 743 744 745 @property def __name__ ( self ): \"\"\" Name used for plots \"\"\" return self . name b ( x ) abstractmethod A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 753 754 755 756 757 @abstractmethod def b ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" value ( x ) abstractmethod Scalar value function Source code in bayes_cbf/controllers.py 747 748 749 750 751 @abstractmethod def value ( self , x ): \"\"\" Scalar value function \"\"\" QPController Bases: Controller Source code in bayes_cbf/controllers.py 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 class QPController ( Controller ): def __init__ ( self , x_dim , u_dim , ctrl_reg , clf_relax_weight , net_model , cbfs , clf , unsafe_controller , summary_writer ): self . x_dim = x_dim self . u_dim = u_dim self . ctrl_reg = ctrl_reg self . clf_relax_weight = clf_relax_weight self . net_model = net_model self . cbfs = cbfs self . clf = clf self . unsafe_controller = unsafe_controller self . summary_writer = summary_writer def _qp_stability ( self , clc , t , x , u0 , extravars = None ): \"\"\" SOCP compatible representation of condition d clf(x) / dt + gamma * clf(x) < rho \"\"\" # grad_clf(x) @ f(x) + grad_clf(x) @ g(x) @ u + gamma * clf(x) < 0 # ||[0] [y_1; u] + [0]||_2 <= - [grad_clf(x) @ g(x)] u - grad_clf(x) @ ||f(x) - gamma * clf(x) m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( lambda u : clc ( t , u ), x , u0 ) A , bfb , bfc , d = SOCPController . convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars ) # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'u + d return ( bfc , d ) def _plots ( self , t , xi , y_uopt_t , extravars ): uopt = y_uopt_t [ extravars :] x_p = self . clf . _planner . plan ( t ) self . summary_writer . add_scalar ( 'QPController/plan0' , x_p [ 0 ], t ) self . summary_writer . add_scalar ( 'QPController/plan1' , x_p [ 1 ], t ) self . summary_writer . add_scalar ( 'QPController/plan2' , x_p [ 2 ], t ) self . summary_writer . add_scalar ( 'QPController/clf' , self . clf . _clf ( xi , x_p ), t ) self . summary_writer . add_scalar ( 'QPController/clf/dot' , self . clf . _dot_clf_gp ( t , x_p , uopt ) . mean ( xi ), t ) self . summary_writer . add_scalar ( 'QPController/clf/dotctrl' , self . clf . _grad_clf_x ( xi , x_p ) @ self . clf . model . g_func ( xi ) @ uopt , t ) self . summary_writer . add_scalar ( 'QPController/clc' , self . clf . clc ( t , uopt ) . mean ( xi ), t ) self . summary_writer . add_scalar ( 'QPController/\u03c1' , y_uopt_t [ 0 ], t ) def control ( self , xi , t = None , extravars = 1 ): tic = time . time () u_ref = self . unsafe_controller . control ( xi , t = t ) assert extravars == 1 , \"I assumed extravars to be \u03b4\" m = u_ref . shape [ - 1 ] A = np . zeros (( extravars + m , extravars + m )) sqrt_Q = np . eye ( self . u_dim ) * math . sqrt ( self . ctrl_reg ) A [ 0 , 0 ] = math . sqrt ( self . clf_relax_weight ) A [ extravars :, extravars :] = to_numpy ( sqrt_Q ) bfb = np . zeros (( extravars + m ,)) ( bfc , d ) = list ( map ( to_numpy , self . _qp_stability ( self . clf . clc , t , xi , u_ref , extravars = extravars ))) y_uopt_init = np . hstack ([ np . zeros ( extravars ), u_ref . detach () . numpy ()]) y_uopt = optimizer_qp_cvxpy ( y_uopt_init , ( A , bfb ), [( 'Safety' , ( bfc , d ))]) # assert bfc @ y_uopt + d >= 0 y_uopt_t = torch . from_numpy ( y_uopt ) . to ( dtype = xi . dtype , device = xi . device ) uopt = y_uopt_t [ extravars :] print ( \"Controller step {0:d} took {1:.4f} sec\" . format ( t , time . time () - tic )) self . _plots ( t , xi , y_uopt_t , extravars ) return uopt SOCPController Bases: Controller Source code in bayes_cbf/controllers.pyclass SOCPController ( Controller ): def __init__ ( self , x_dim , u_dim , ctrl_reg , clf_relax_weight , net_model , cbfs , clf , unsafe_controller , summary_writer ): self . x_dim = x_dim self . u_dim = u_dim self . ctrl_reg = ctrl_reg self . clf_relax_weight = clf_relax_weight self . net_model = net_model self . cbfs = cbfs self . clf = clf self . unsafe_controller = unsafe_controller self . summary_writer = summary_writer def _socp_objective ( self , i , x , u0 , yidx = 0 , extravars = None ): # s.t. ||[0, 1, Q][y_1; \u03c1; u] - Q u_0||_2 <= [1, 0, 0] [y_1; \u03c1; u] + 0 # s.t. ||R[y_1; \u03c1; u] + h||_2 <= a' [y_1; \u03c1; u] + b assert yidx < extravars # R = [ 0, \u221a\u03bb, 0 ] # [ 0, 0 , \u221aQ ] # h = [0, - \u221aQ u\u2080] # a = [1, 0, 0] # b = 0 sqrt_Q = torch . eye ( self . u_dim ) * math . sqrt ( self . ctrl_reg ) \u03bb = self . clf_relax_weight assert extravars >= 2 R = torch . zeros ( self . u_dim + 1 , self . u_dim + extravars ) h = torch . zeros ( self . u_dim + 1 ) with torch . no_grad (): assert extravars >= 2 R [ 0 , 1 ] = math . sqrt ( \u03bb ) # for \u03b4 R [ 1 :, extravars :] = sqrt_Q h [ 1 :] = - sqrt_Q @ u0 a = torch . zeros (( self . u_dim + extravars ,)) a [ yidx ] = 1 b = torch . tensor ( 0. ) # s.t. ||R[y_1; \u03c1; u] + h||_2 <= a' [y_1; \u03c1; u] + b return ( R , h , a , b ) @staticmethod def convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars , testing = False ): m = bfe . shape [ - 1 ] bfc = bfe . new_zeros (( m + extravars )) if testing : u0 = torch . zeros (( m ,)) u0_hom = torch . cat (( torch . tensor ([ 1. ]), u0 )) with torch . no_grad (): # [1, u] Asq [1; u] Asq = torch . cat ( ( torch . cat (( torch . tensor ([[ v ]]), ( bfv / 2 ) . reshape ( 1 , - 1 )), dim =- 1 ), torch . cat ((( bfv / 2 ) . reshape ( - 1 , 1 ), V ), dim =- 1 ) ), dim =- 2 ) if testing : np . testing . assert_allclose ( u0_hom @ Asq @ u0_hom , u0 @ V @ u0 + bfv @ u0 + v ) # [1, u] Asq [1; u] = |L[1; u]|_2 = |[0, A] [y_1; y_2; u] + b|_2 n_constraints = m + 1 try : L = torch . cholesky ( Asq ) # (m+1) x (m+1) except RuntimeError as err : if \"cholesky\" in str ( err ) and \"singular\" in str ( err ): L = torch . cholesky ( Asq + torch . diag ( torch . ones ( m + 1 ) * 1e-3 )) else : raise # try: # n_constraints = m+1 # L = torch.cholesky(Asq) # (m+1) x (m+1) # except RuntimeError as err: # if \"cholesky\" in str(err) and \"singular\" in str(err): # if torch.allclose(v, torch.zeros((1,))) and torch.allclose(bfv, torch.zeros(bfv.shape[0])): # L = torch.zeros((m+1, m+1)) # L[1:, 1:] = torch.cholesky(V) # else: # diag_e, U = torch.symeig(Asq, eigenvectors=True) # n_constraints = torch.nonzero(diag_e, as_tuple=True)[0].shape[-1] # L = torch.diag(diag_e).sqrt() @ U[:, -n_constraints:] # else: # raise if testing : np . testing . assert_allclose ( L @ L . T , Asq , rtol = 1e-2 , atol = 1e-3 ) A = torch . zeros (( n_constraints , m + extravars )) A [:, extravars :] = L . T [:, 1 :] bfb = L . T [:, 0 ] # (m+1) if testing : y_u0 = torch . cat (( torch . zeros ( extravars ), u0 )) np . testing . assert_allclose ( A @ y_u0 + bfb , L . T @ u0_hom ) np . testing . assert_allclose ( u0_hom @ Asq @ u0_hom , u0_hom @ L @ L . T @ u0_hom , rtol = 1e-2 , atol = 1e-3 ) np . testing . assert_allclose ( u0 @ V @ u0 + bfv @ u0 + v , ( A @ y_u0 + bfb ) @ ( A @ y_u0 + bfb ), rtol = 1e-2 , atol = 1e-3 ) assert extravars >= 1 , \"I assumed atleast \u03b4 \" bfc [ extravars - 1 ] = 1 # For delta the relaxation factor bfc [ extravars :] = bfe # only affine terms need to be negative? d = e return A , bfb , bfc , d def _socp_stability ( self , clc , t , x , u0 , extravars = None ): \"\"\" SOCP compatible representation of condition d clf(x) / dt + gamma * clf(x) < rho \"\"\" # grad_clf(x) @ f(x) + grad_clf(x) @ g(x) @ u + gamma * clf(x) < 0 # ||[0] [y_1; u] + [0]||_2 <= - [grad_clf(x) @ g(x)] u - grad_clf(x) @ ||f(x) - gamma * clf(x) m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( lambda u : clc ( t , u ), x , u0 ) A , bfb , bfc , d = self . convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars ) # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'u + d return ( A , bfb , bfc , d ) def _socp_safety ( self , cbc2 , x , u0 , safety_factor = None , extravars = None ): \"\"\" Var(CBC2) = Au\u00b2 + b' u + c E(CBC2) = e' u + e \"\"\" factor = safety_factor m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( cbc2 , x , u0 ) with torch . no_grad (): # [1, u] Asq [1; u] Asq = torch . cat ( ( torch . cat (( torch . tensor ([[ v ]]), ( bfv / 2 ) . reshape ( 1 , - 1 )), dim =- 1 ), torch . cat ((( bfv / 2 ) . reshape ( - 1 , 1 ), V ), dim =- 1 ) ), dim =- 2 ) # [1, u] Asq [1; u] = |L[1; u]|_2 = |[0, A] [y_1; y_2; u] + b|_2 A = torch . zeros (( m + 1 , m + extravars )) try : L = torch . cholesky ( Asq ) # (m+1) x (m+1) except RuntimeError as err : if \"cholesky\" in str ( err ) and \"singular\" in str ( err ): diag_e , V = torch . symeig ( Asq , eigenvectors = True ) L = torch . max ( torch . diag ( diag_e ), torch . tensor ( 0. )) . sqrt () @ V . t () else : raise A [:, extravars :] = L [:, 1 :] b = L [:, 0 ] # (m+1) c = torch . zeros (( m + extravars ,)) c [ extravars :] = bfe # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'x + d return ( factor * A , factor * b , c , e ) def _named_socp_constraints ( self , t , x , u_ref , convert_out = to_numpy , extravars = None ): constraints = [ ( \"Objective\" , list ( map ( to_numpy , self . _socp_objective ( t , x , u_ref , yidx = 0 , extravars = extravars )))) ] + [ ( \"Safety_ %d gt 0\" % i , list ( map ( to_numpy , self . _socp_safety ( cbf . cbc , x , u_ref , safety_factor = cbf . safety_factor (), extravars = extravars )))) for i , cbf in enumerate ( self . cbfs ) ] if self . clf is not None : constraints += [ ( \"Stability gt 0\" , list ( map ( convert_out , self . _socp_stability ( self . clf . clc , t , x , u_ref , extravars = extravars )))) ] return constraints def control ( self , xi , t = None , extravars = 2 ): tic = time . time () u_ref = self . unsafe_controller . control ( xi , t = t ) y_uopt_init = np . hstack ([ np . zeros ( extravars ), u_ref . detach () . numpy ()]) assert extravars == 2 , \"I assumed extravars to be \u03b4\" linear_obj = np . hstack ([ np . array ([ 1. , 0 ]), np . zeros ( u_ref . shape )]) try : y_uopt = optimizer_socp_cvxpy ( y_uopt_init , linear_obj , self . _named_socp_constraints ( t , xi , u_ref , convert_out = to_numpy , extravars = extravars )) except InfeasibleProblemError as e : y_uopt = torch . from_numpy ( y_uopt_init ) . to ( dtype = xi . dtype , device = xi . device ) raise y_uopt_t = torch . from_numpy ( y_uopt ) . to ( dtype = xi . dtype , device = xi . device ) uopt = y_uopt_t [ extravars :] print ( \"Controller step {0:d} took {1:.4f} sec\" . format ( t , time . time () - tic )) return uopt","title":"controllers"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.Controller","text":"Bases: ABC Controller interface Source code in bayes_cbf/controllers.py 54 55 56 57 58 59 60 61 class Controller ( ABC ): \"\"\" Controller interface \"\"\" needs_ground_truth = False @abstractmethod def control ( self , xi , t = None ): pass","title":"Controller"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc","text":"Bases: ABC Source code in bayes_cbf/controllers.py 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 class NamedAffineFunc ( ABC ): @property def __name__ ( self ): \"\"\" Name used for plots \"\"\" return self . name @abstractmethod def value ( self , x ): \"\"\" Scalar value function \"\"\" @abstractmethod def b ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" @abstractmethod def A ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\" def __call__ ( self , x , u ): \"\"\" A(x) @ u - b(x) \"\"\" return self . A ( x ) @ u - self . b ( x )","title":"NamedAffineFunc"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc.A","text":"A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 759 760 761 762 763 @abstractmethod def A ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\"","title":"A()"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc.__call__","text":"A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 765 766 767 768 769 def __call__ ( self , x , u ): \"\"\" A(x) @ u - b(x) \"\"\" return self . A ( x ) @ u - self . b ( x )","title":"__call__()"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc.__name__","text":"Name used for plots Source code in bayes_cbf/controllers.py 740 741 742 743 744 745 @property def __name__ ( self ): \"\"\" Name used for plots \"\"\" return self . name","title":"__name__()"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc.b","text":"A(x) @ u - b(x) Source code in bayes_cbf/controllers.py 753 754 755 756 757 @abstractmethod def b ( self , x ): \"\"\" A(x) @ u - b(x) \"\"\"","title":"b()"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.NamedAffineFunc.value","text":"Scalar value function Source code in bayes_cbf/controllers.py 747 748 749 750 751 @abstractmethod def value ( self , x ): \"\"\" Scalar value function \"\"\"","title":"value()"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.QPController","text":"Bases: Controller Source code in bayes_cbf/controllers.py 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 class QPController ( Controller ): def __init__ ( self , x_dim , u_dim , ctrl_reg , clf_relax_weight , net_model , cbfs , clf , unsafe_controller , summary_writer ): self . x_dim = x_dim self . u_dim = u_dim self . ctrl_reg = ctrl_reg self . clf_relax_weight = clf_relax_weight self . net_model = net_model self . cbfs = cbfs self . clf = clf self . unsafe_controller = unsafe_controller self . summary_writer = summary_writer def _qp_stability ( self , clc , t , x , u0 , extravars = None ): \"\"\" SOCP compatible representation of condition d clf(x) / dt + gamma * clf(x) < rho \"\"\" # grad_clf(x) @ f(x) + grad_clf(x) @ g(x) @ u + gamma * clf(x) < 0 # ||[0] [y_1; u] + [0]||_2 <= - [grad_clf(x) @ g(x)] u - grad_clf(x) @ ||f(x) - gamma * clf(x) m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( lambda u : clc ( t , u ), x , u0 ) A , bfb , bfc , d = SOCPController . convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars ) # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'u + d return ( bfc , d ) def _plots ( self , t , xi , y_uopt_t , extravars ): uopt = y_uopt_t [ extravars :] x_p = self . clf . _planner . plan ( t ) self . summary_writer . add_scalar ( 'QPController/plan0' , x_p [ 0 ], t ) self . summary_writer . add_scalar ( 'QPController/plan1' , x_p [ 1 ], t ) self . summary_writer . add_scalar ( 'QPController/plan2' , x_p [ 2 ], t ) self . summary_writer . add_scalar ( 'QPController/clf' , self . clf . _clf ( xi , x_p ), t ) self . summary_writer . add_scalar ( 'QPController/clf/dot' , self . clf . _dot_clf_gp ( t , x_p , uopt ) . mean ( xi ), t ) self . summary_writer . add_scalar ( 'QPController/clf/dotctrl' , self . clf . _grad_clf_x ( xi , x_p ) @ self . clf . model . g_func ( xi ) @ uopt , t ) self . summary_writer . add_scalar ( 'QPController/clc' , self . clf . clc ( t , uopt ) . mean ( xi ), t ) self . summary_writer . add_scalar ( 'QPController/\u03c1' , y_uopt_t [ 0 ], t ) def control ( self , xi , t = None , extravars = 1 ): tic = time . time () u_ref = self . unsafe_controller . control ( xi , t = t ) assert extravars == 1 , \"I assumed extravars to be \u03b4\" m = u_ref . shape [ - 1 ] A = np . zeros (( extravars + m , extravars + m )) sqrt_Q = np . eye ( self . u_dim ) * math . sqrt ( self . ctrl_reg ) A [ 0 , 0 ] = math . sqrt ( self . clf_relax_weight ) A [ extravars :, extravars :] = to_numpy ( sqrt_Q ) bfb = np . zeros (( extravars + m ,)) ( bfc , d ) = list ( map ( to_numpy , self . _qp_stability ( self . clf . clc , t , xi , u_ref , extravars = extravars ))) y_uopt_init = np . hstack ([ np . zeros ( extravars ), u_ref . detach () . numpy ()]) y_uopt = optimizer_qp_cvxpy ( y_uopt_init , ( A , bfb ), [( 'Safety' , ( bfc , d ))]) # assert bfc @ y_uopt + d >= 0 y_uopt_t = torch . from_numpy ( y_uopt ) . to ( dtype = xi . dtype , device = xi . device ) uopt = y_uopt_t [ extravars :] print ( \"Controller step {0:d} took {1:.4f} sec\" . format ( t , time . time () - tic )) self . _plots ( t , xi , y_uopt_t , extravars ) return uopt","title":"QPController"},{"location":"reference/bayes_cbf/controllers/#bayes_cbf.controllers.SOCPController","text":"Bases: Controller Source code in bayes_cbf/controllers.pyclass SOCPController ( Controller ): def __init__ ( self , x_dim , u_dim , ctrl_reg , clf_relax_weight , net_model , cbfs , clf , unsafe_controller , summary_writer ): self . x_dim = x_dim self . u_dim = u_dim self . ctrl_reg = ctrl_reg self . clf_relax_weight = clf_relax_weight self . net_model = net_model self . cbfs = cbfs self . clf = clf self . unsafe_controller = unsafe_controller self . summary_writer = summary_writer def _socp_objective ( self , i , x , u0 , yidx = 0 , extravars = None ): # s.t. ||[0, 1, Q][y_1; \u03c1; u] - Q u_0||_2 <= [1, 0, 0] [y_1; \u03c1; u] + 0 # s.t. ||R[y_1; \u03c1; u] + h||_2 <= a' [y_1; \u03c1; u] + b assert yidx < extravars # R = [ 0, \u221a\u03bb, 0 ] # [ 0, 0 , \u221aQ ] # h = [0, - \u221aQ u\u2080] # a = [1, 0, 0] # b = 0 sqrt_Q = torch . eye ( self . u_dim ) * math . sqrt ( self . ctrl_reg ) \u03bb = self . clf_relax_weight assert extravars >= 2 R = torch . zeros ( self . u_dim + 1 , self . u_dim + extravars ) h = torch . zeros ( self . u_dim + 1 ) with torch . no_grad (): assert extravars >= 2 R [ 0 , 1 ] = math . sqrt ( \u03bb ) # for \u03b4 R [ 1 :, extravars :] = sqrt_Q h [ 1 :] = - sqrt_Q @ u0 a = torch . zeros (( self . u_dim + extravars ,)) a [ yidx ] = 1 b = torch . tensor ( 0. ) # s.t. ||R[y_1; \u03c1; u] + h||_2 <= a' [y_1; \u03c1; u] + b return ( R , h , a , b ) @staticmethod def convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars , testing = False ): m = bfe . shape [ - 1 ] bfc = bfe . new_zeros (( m + extravars )) if testing : u0 = torch . zeros (( m ,)) u0_hom = torch . cat (( torch . tensor ([ 1. ]), u0 )) with torch . no_grad (): # [1, u] Asq [1; u] Asq = torch . cat ( ( torch . cat (( torch . tensor ([[ v ]]), ( bfv / 2 ) . reshape ( 1 , - 1 )), dim =- 1 ), torch . cat ((( bfv / 2 ) . reshape ( - 1 , 1 ), V ), dim =- 1 ) ), dim =- 2 ) if testing : np . testing . assert_allclose ( u0_hom @ Asq @ u0_hom , u0 @ V @ u0 + bfv @ u0 + v ) # [1, u] Asq [1; u] = |L[1; u]|_2 = |[0, A] [y_1; y_2; u] + b|_2 n_constraints = m + 1 try : L = torch . cholesky ( Asq ) # (m+1) x (m+1) except RuntimeError as err : if \"cholesky\" in str ( err ) and \"singular\" in str ( err ): L = torch . cholesky ( Asq + torch . diag ( torch . ones ( m + 1 ) * 1e-3 )) else : raise # try: # n_constraints = m+1 # L = torch.cholesky(Asq) # (m+1) x (m+1) # except RuntimeError as err: # if \"cholesky\" in str(err) and \"singular\" in str(err): # if torch.allclose(v, torch.zeros((1,))) and torch.allclose(bfv, torch.zeros(bfv.shape[0])): # L = torch.zeros((m+1, m+1)) # L[1:, 1:] = torch.cholesky(V) # else: # diag_e, U = torch.symeig(Asq, eigenvectors=True) # n_constraints = torch.nonzero(diag_e, as_tuple=True)[0].shape[-1] # L = torch.diag(diag_e).sqrt() @ U[:, -n_constraints:] # else: # raise if testing : np . testing . assert_allclose ( L @ L . T , Asq , rtol = 1e-2 , atol = 1e-3 ) A = torch . zeros (( n_constraints , m + extravars )) A [:, extravars :] = L . T [:, 1 :] bfb = L . T [:, 0 ] # (m+1) if testing : y_u0 = torch . cat (( torch . zeros ( extravars ), u0 )) np . testing . assert_allclose ( A @ y_u0 + bfb , L . T @ u0_hom ) np . testing . assert_allclose ( u0_hom @ Asq @ u0_hom , u0_hom @ L @ L . T @ u0_hom , rtol = 1e-2 , atol = 1e-3 ) np . testing . assert_allclose ( u0 @ V @ u0 + bfv @ u0 + v , ( A @ y_u0 + bfb ) @ ( A @ y_u0 + bfb ), rtol = 1e-2 , atol = 1e-3 ) assert extravars >= 1 , \"I assumed atleast \u03b4 \" bfc [ extravars - 1 ] = 1 # For delta the relaxation factor bfc [ extravars :] = bfe # only affine terms need to be negative? d = e return A , bfb , bfc , d def _socp_stability ( self , clc , t , x , u0 , extravars = None ): \"\"\" SOCP compatible representation of condition d clf(x) / dt + gamma * clf(x) < rho \"\"\" # grad_clf(x) @ f(x) + grad_clf(x) @ g(x) @ u + gamma * clf(x) < 0 # ||[0] [y_1; u] + [0]||_2 <= - [grad_clf(x) @ g(x)] u - grad_clf(x) @ ||f(x) - gamma * clf(x) m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( lambda u : clc ( t , u ), x , u0 ) A , bfb , bfc , d = self . convert_cbc_terms_to_socp_terms ( bfe , e , V , bfv , v , extravars ) # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'u + d return ( A , bfb , bfc , d ) def _socp_safety ( self , cbc2 , x , u0 , safety_factor = None , extravars = None ): \"\"\" Var(CBC2) = Au\u00b2 + b' u + c E(CBC2) = e' u + e \"\"\" factor = safety_factor m = u0 . shape [ - 1 ] ( bfe , e ), ( V , bfv , v ), mean , var = cbc2_quadratic_terms ( cbc2 , x , u0 ) with torch . no_grad (): # [1, u] Asq [1; u] Asq = torch . cat ( ( torch . cat (( torch . tensor ([[ v ]]), ( bfv / 2 ) . reshape ( 1 , - 1 )), dim =- 1 ), torch . cat ((( bfv / 2 ) . reshape ( - 1 , 1 ), V ), dim =- 1 ) ), dim =- 2 ) # [1, u] Asq [1; u] = |L[1; u]|_2 = |[0, A] [y_1; y_2; u] + b|_2 A = torch . zeros (( m + 1 , m + extravars )) try : L = torch . cholesky ( Asq ) # (m+1) x (m+1) except RuntimeError as err : if \"cholesky\" in str ( err ) and \"singular\" in str ( err ): diag_e , V = torch . symeig ( Asq , eigenvectors = True ) L = torch . max ( torch . diag ( diag_e ), torch . tensor ( 0. )) . sqrt () @ V . t () else : raise A [:, extravars :] = L [:, 1 :] b = L [:, 0 ] # (m+1) c = torch . zeros (( m + extravars ,)) c [ extravars :] = bfe # # We want to return in format? # (name, (A, b, c, d)) # s.t. factor * ||A[y_1; u] + b||_2 <= c'x + d return ( factor * A , factor * b , c , e ) def _named_socp_constraints ( self , t , x , u_ref , convert_out = to_numpy , extravars = None ): constraints = [ ( \"Objective\" , list ( map ( to_numpy , self . _socp_objective ( t , x , u_ref , yidx = 0 , extravars = extravars )))) ] + [ ( \"Safety_ %d gt 0\" % i , list ( map ( to_numpy , self . _socp_safety ( cbf . cbc , x , u_ref , safety_factor = cbf . safety_factor (), extravars = extravars )))) for i , cbf in enumerate ( self . cbfs ) ] if self . clf is not None : constraints += [ ( \"Stability gt 0\" , list ( map ( convert_out , self . _socp_stability ( self . clf . clc , t , x , u_ref , extravars = extravars )))) ] return constraints def control ( self , xi , t = None , extravars = 2 ): tic = time . time () u_ref = self . unsafe_controller . control ( xi , t = t ) y_uopt_init = np . hstack ([ np . zeros ( extravars ), u_ref . detach () . numpy ()]) assert extravars == 2 , \"I assumed extravars to be \u03b4\" linear_obj = np . hstack ([ np . array ([ 1. , 0 ]), np . zeros ( u_ref . shape )]) try : y_uopt = optimizer_socp_cvxpy ( y_uopt_init , linear_obj , self . _named_socp_constraints ( t , xi , u_ref , convert_out = to_numpy , extravars = extravars )) except InfeasibleProblemError as e : y_uopt = torch . from_numpy ( y_uopt_init ) . to ( dtype = xi . dtype , device = xi . device ) raise y_uopt_t = torch . from_numpy ( y_uopt ) . to ( dtype = xi . dtype , device = xi . device ) uopt = y_uopt_t [ extravars :] print ( \"Controller step {0:d} took {1:.4f} sec\" . format ( t , time . time () - tic )) return uopt","title":"SOCPController"},{"location":"reference/bayes_cbf/gp_algebra/","text":"GradientGP Bases: GaussianProcessExpr return \u2207f, H\u2093\u2093 k_f, \u2207 covar_fg Source code in bayes_cbf/gp_algebra.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 class GradientGP ( GaussianProcessExpr ): \"\"\" return \u2207f, H\u2093\u2093 k_f, \u2207 covar_fg \"\"\" def __init__ ( self , f , x_shape , grad_check = False , analytical_hessian = True ): self . gp = f self . x_shape = x_shape self . grad_check = grad_check self . analytical_hessian = analytical_hessian @property def shape ( self ): return self . x_shape @property def dtype ( self ): return self . gp . dtype def to ( self , dtype ): self . gp . to ( dtype ) def mean ( self , x ): f = self . gp if self . grad_check : old_dtype = self . dtype self . to ( torch . float64 ) with variable_required_grad ( x ): torch . autograd . gradcheck ( f . mean , x . double ()) self . to ( dtype = old_dtype ) with variable_required_grad ( x ): return torch . autograd . grad ( f . mean ( x ), x )[ 0 ] def knl ( self , x , xp , eigeps = EPS ): f = self . gp if xp is x : xp = xp . detach () . clone () grad_k_func = lambda xs , xt : torch . autograd . grad ( f . knl ( xs , xt ), xs , create_graph = True )[ 0 ] if self . grad_check : old_dtype = self . dtype self . to ( torch . float64 ) f_knl_func = lambda xt : f . knl ( xt , xp . double ()) with variable_required_grad ( x ): torch . autograd . gradcheck ( f_knl_func , x . double ()) torch . autograd . gradgradcheck ( lambda x : f . knl ( x , x ), x . double ()) with variable_required_grad ( x ): with variable_required_grad ( xp ): torch . autograd . gradcheck ( lambda xp : grad_k_func ( x . double (), xp )[ 0 ], xp . double ()) self . to ( dtype = old_dtype ) analytical = self . analytical_hessian if analytical : Hxx_k = t_hessian ( f . knl , x , xp ) else : with variable_required_grad ( x ): with variable_required_grad ( xp ): old_dtype = self . dtype self . to ( torch . float64 ) Hxx_k = tgradcheck . get_numerical_jacobian ( partial ( grad_k_func , x . double ()), xp . double ()) self . to ( dtype = old_dtype ) Hxx_k = Hxx_k . to ( old_dtype ) if torch . allclose ( x , xp ): eigenvalues , eigenvectors = torch . eig ( Hxx_k , eigenvectors = False ) assert ( eigenvalues [:, 0 ] > - eigeps ) . all (), \" Hessian must be positive definite\" small_neg_eig = (( eigenvalues [:, 0 ] > - eigeps ) & ( eigenvalues [:, 0 ] < 0 )) if small_neg_eig . any (): eigenvalues , eigenvectors = torch . eig ( Hxx_k , eigenvectors = True ) evalz = eigenvalues [:, 0 ] evalz [ small_neg_eig ] = 0 Hxx_k = eigenvectors . T @ torch . diag ( evalz ) @ eigenvectors return Hxx_k def covar ( self , G , x , xp ): \"\"\" returns covar(\u2207f, g) given covar(f, g) \"\"\" f = self . gp with variable_required_grad ( x ): J_covar_fg = t_jac ( self . gp . covar ( G , x , xp ), x ) return J_covar_fg . t () def __str__ ( self ): return \"\u2207 {self.gp!s} \" . format ( self = self ) covar ( G , x , xp ) returns covar(\u2207f, g) given covar(f, g) Source code in bayes_cbf/gp_algebra.py 395 396 397 398 399 400 401 402 def covar ( self , G , x , xp ): \"\"\" returns covar(\u2207f, g) given covar(f, g) \"\"\" f = self . gp with variable_required_grad ( x ): J_covar_fg = t_jac ( self . gp . covar ( G , x , xp ), x ) return J_covar_fg . t ()","title":"gp_algebra"},{"location":"reference/bayes_cbf/gp_algebra/#bayes_cbf.gp_algebra.GradientGP","text":"Bases: GaussianProcessExpr return \u2207f, H\u2093\u2093 k_f, \u2207 covar_fg Source code in bayes_cbf/gp_algebra.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 class GradientGP ( GaussianProcessExpr ): \"\"\" return \u2207f, H\u2093\u2093 k_f, \u2207 covar_fg \"\"\" def __init__ ( self , f , x_shape , grad_check = False , analytical_hessian = True ): self . gp = f self . x_shape = x_shape self . grad_check = grad_check self . analytical_hessian = analytical_hessian @property def shape ( self ): return self . x_shape @property def dtype ( self ): return self . gp . dtype def to ( self , dtype ): self . gp . to ( dtype ) def mean ( self , x ): f = self . gp if self . grad_check : old_dtype = self . dtype self . to ( torch . float64 ) with variable_required_grad ( x ): torch . autograd . gradcheck ( f . mean , x . double ()) self . to ( dtype = old_dtype ) with variable_required_grad ( x ): return torch . autograd . grad ( f . mean ( x ), x )[ 0 ] def knl ( self , x , xp , eigeps = EPS ): f = self . gp if xp is x : xp = xp . detach () . clone () grad_k_func = lambda xs , xt : torch . autograd . grad ( f . knl ( xs , xt ), xs , create_graph = True )[ 0 ] if self . grad_check : old_dtype = self . dtype self . to ( torch . float64 ) f_knl_func = lambda xt : f . knl ( xt , xp . double ()) with variable_required_grad ( x ): torch . autograd . gradcheck ( f_knl_func , x . double ()) torch . autograd . gradgradcheck ( lambda x : f . knl ( x , x ), x . double ()) with variable_required_grad ( x ): with variable_required_grad ( xp ): torch . autograd . gradcheck ( lambda xp : grad_k_func ( x . double (), xp )[ 0 ], xp . double ()) self . to ( dtype = old_dtype ) analytical = self . analytical_hessian if analytical : Hxx_k = t_hessian ( f . knl , x , xp ) else : with variable_required_grad ( x ): with variable_required_grad ( xp ): old_dtype = self . dtype self . to ( torch . float64 ) Hxx_k = tgradcheck . get_numerical_jacobian ( partial ( grad_k_func , x . double ()), xp . double ()) self . to ( dtype = old_dtype ) Hxx_k = Hxx_k . to ( old_dtype ) if torch . allclose ( x , xp ): eigenvalues , eigenvectors = torch . eig ( Hxx_k , eigenvectors = False ) assert ( eigenvalues [:, 0 ] > - eigeps ) . all (), \" Hessian must be positive definite\" small_neg_eig = (( eigenvalues [:, 0 ] > - eigeps ) & ( eigenvalues [:, 0 ] < 0 )) if small_neg_eig . any (): eigenvalues , eigenvectors = torch . eig ( Hxx_k , eigenvectors = True ) evalz = eigenvalues [:, 0 ] evalz [ small_neg_eig ] = 0 Hxx_k = eigenvectors . T @ torch . diag ( evalz ) @ eigenvectors return Hxx_k def covar ( self , G , x , xp ): \"\"\" returns covar(\u2207f, g) given covar(f, g) \"\"\" f = self . gp with variable_required_grad ( x ): J_covar_fg = t_jac ( self . gp . covar ( G , x , xp ), x ) return J_covar_fg . t () def __str__ ( self ): return \"\u2207 {self.gp!s} \" . format ( self = self )","title":"GradientGP"},{"location":"reference/bayes_cbf/gp_algebra/#bayes_cbf.gp_algebra.GradientGP.covar","text":"returns covar(\u2207f, g) given covar(f, g) Source code in bayes_cbf/gp_algebra.py 395 396 397 398 399 400 401 402 def covar ( self , G , x , xp ): \"\"\" returns covar(\u2207f, g) given covar(f, g) \"\"\" f = self . gp with variable_required_grad ( x ): J_covar_fg = t_jac ( self . gp . covar ( G , x , xp ), x ) return J_covar_fg . t ()","title":"covar()"},{"location":"reference/bayes_cbf/ilqr/","text":"affine_backpropagation ( Q , s , R , z , A , B , P , o , \u03b3 = 1 ) minimize\u1d64 \u2211\u209c u\u209cR\u209cu\u209c + 2 z\u209c\u1d40 u\u209c + x\u209cQ\u209cx\u209c + 2 s\u209c\u1d40 x\u209c s.t. x\u209c\u208a\u2081 = A x\u209c\u208a\u2081 + B u\u209c returns P\u209c, o\u209c\u1d40, K\u209c, k\u209c s.t. optimal u\u209c = - K\u209cx\u209c - k\u209c and Value function is quadratic x\u209cP\u209cx\u209c + 2 o\u209c\u1d40 x\u209c \u2261 \u2211\u2096\u208c\u209c\u1d40 u\u2096Ru\u2096 + 2 z\u2096\u1d40 u\u2096 + x\u2096Qx\u2096 + 2 s\u2096\u1d40 x\u2096 s.t. x\u2096\u208a\u2081 = A x\u2096\u208a\u2081 + B u\u2096 Source code in bayes_cbf/ilqr.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def affine_backpropagation ( Q , s , R , z , A , B , P , o , \u03b3 = 1 ): \"\"\" minimize\u1d64 \u2211\u209c u\u209cR\u209cu\u209c + 2 z\u209c\u1d40 u\u209c + x\u209cQ\u209cx\u209c + 2 s\u209c\u1d40 x\u209c s.t. x\u209c\u208a\u2081 = A x\u209c\u208a\u2081 + B u\u209c returns P\u209c, o\u209c\u1d40, K\u209c, k\u209c s.t. optimal u\u209c = - K\u209cx\u209c - k\u209c and Value function is quadratic x\u209cP\u209cx\u209c + 2 o\u209c\u1d40 x\u209c \u2261 \u2211\u2096\u208c\u209c\u1d40 u\u2096Ru\u2096 + 2 z\u2096\u1d40 u\u2096 + x\u2096Qx\u2096 + 2 s\u2096\u1d40 x\u2096 s.t. x\u2096\u208a\u2081 = A x\u2096\u208a\u2081 + B u\u2096 \"\"\" # Solution: # (1) K\u209c = (R + B\u1d40P\u209c\u208a\u2081B)\u207b\u00b9B\u1d40P\u209c\u208a\u2081A\u209c # (2) P\u209c = Q\u209c + A\u209c\u1d40P\u209c\u208a\u2081A\u209c - A\u209c\u1d40P\u209c\u208a\u2081BK\u209c # (3) o\u209c = s\u209c + A\u209c\u1d40o\u209c\u208a\u2081 - K\u209c\u1d40(z\u209c + B\u1d40o\u209c\u208a\u2081) # (4) k\u209c = (R + B\u1d40P\u209c\u208a\u2081B)\u207b\u00b9(z\u209c + B\u1d40o\u209c\u208a\u2081) # Eq(1) P = \u03b3 * P o = \u03b3 * o G = R + B . T @ ( P ) @ ( B ) K = torch . solve ( B . T @ ( P ) @ ( A ), G )[ 0 ] # Eq(2) P_new = Q + A . T @ ( P ) @ ( A ) - A . T @ ( P ) @ ( B ) @ ( K ) # Eq(3) o_new = s + A . T @ ( o ) - K . T @ ( z + B . T @ ( o )) # Eq(4) k = torch . solve (( z + B . T @ ( o )) . unsqueeze ( - 1 ), G )[ 0 ] . squeeze ( - 1 ) return P_new , o_new , K , k","title":"ilqr"},{"location":"reference/bayes_cbf/ilqr/#bayes_cbf.ilqr.affine_backpropagation","text":"minimize\u1d64 \u2211\u209c u\u209cR\u209cu\u209c + 2 z\u209c\u1d40 u\u209c + x\u209cQ\u209cx\u209c + 2 s\u209c\u1d40 x\u209c s.t. x\u209c\u208a\u2081 = A x\u209c\u208a\u2081 + B u\u209c returns P\u209c, o\u209c\u1d40, K\u209c, k\u209c s.t. optimal u\u209c = - K\u209cx\u209c - k\u209c and Value function is quadratic x\u209cP\u209cx\u209c + 2 o\u209c\u1d40 x\u209c \u2261 \u2211\u2096\u208c\u209c\u1d40 u\u2096Ru\u2096 + 2 z\u2096\u1d40 u\u2096 + x\u2096Qx\u2096 + 2 s\u2096\u1d40 x\u2096 s.t. x\u2096\u208a\u2081 = A x\u2096\u208a\u2081 + B u\u2096 Source code in bayes_cbf/ilqr.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def affine_backpropagation ( Q , s , R , z , A , B , P , o , \u03b3 = 1 ): \"\"\" minimize\u1d64 \u2211\u209c u\u209cR\u209cu\u209c + 2 z\u209c\u1d40 u\u209c + x\u209cQ\u209cx\u209c + 2 s\u209c\u1d40 x\u209c s.t. x\u209c\u208a\u2081 = A x\u209c\u208a\u2081 + B u\u209c returns P\u209c, o\u209c\u1d40, K\u209c, k\u209c s.t. optimal u\u209c = - K\u209cx\u209c - k\u209c and Value function is quadratic x\u209cP\u209cx\u209c + 2 o\u209c\u1d40 x\u209c \u2261 \u2211\u2096\u208c\u209c\u1d40 u\u2096Ru\u2096 + 2 z\u2096\u1d40 u\u2096 + x\u2096Qx\u2096 + 2 s\u2096\u1d40 x\u2096 s.t. x\u2096\u208a\u2081 = A x\u2096\u208a\u2081 + B u\u2096 \"\"\" # Solution: # (1) K\u209c = (R + B\u1d40P\u209c\u208a\u2081B)\u207b\u00b9B\u1d40P\u209c\u208a\u2081A\u209c # (2) P\u209c = Q\u209c + A\u209c\u1d40P\u209c\u208a\u2081A\u209c - A\u209c\u1d40P\u209c\u208a\u2081BK\u209c # (3) o\u209c = s\u209c + A\u209c\u1d40o\u209c\u208a\u2081 - K\u209c\u1d40(z\u209c + B\u1d40o\u209c\u208a\u2081) # (4) k\u209c = (R + B\u1d40P\u209c\u208a\u2081B)\u207b\u00b9(z\u209c + B\u1d40o\u209c\u208a\u2081) # Eq(1) P = \u03b3 * P o = \u03b3 * o G = R + B . T @ ( P ) @ ( B ) K = torch . solve ( B . T @ ( P ) @ ( A ), G )[ 0 ] # Eq(2) P_new = Q + A . T @ ( P ) @ ( A ) - A . T @ ( P ) @ ( B ) @ ( K ) # Eq(3) o_new = s + A . T @ ( o ) - K . T @ ( z + B . T @ ( o )) # Eq(4) k = torch . solve (( z + B . T @ ( o )) . unsqueeze ( - 1 ), G )[ 0 ] . squeeze ( - 1 ) return P_new , o_new , K , k","title":"affine_backpropagation()"},{"location":"reference/bayes_cbf/matrix_variate_multitask_kernel/","text":"MatrixVariateIndexKernel Bases: Kernel Wraps IndexKernel to represent https://en.wikipedia.org/wiki/Matrix_normal_distribution P(X | M, U, V) = exp(-0.5 tr[ V\u207b\u00b9 (X - M)\u1d40 U\u207b\u00b9 (X-M) ] ) / \u221a((2\u03c0)\u207f\u1d56|V|\u207f|U|\u1d56) vec(X) ~ \ud835\udca9(M, V \u2297 U) This kernel represents the covariance_matrix V \u2297 U given V and U. Source code in bayes_cbf/matrix_variate_multitask_kernel.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class MatrixVariateIndexKernel ( Kernel ): \"\"\" Wraps IndexKernel to represent https://en.wikipedia.org/wiki/Matrix_normal_distribution P(X | M, U, V) = exp(-0.5 tr[ V\u207b\u00b9 (X - M)\u1d40 U\u207b\u00b9 (X-M) ] ) / \u221a((2\u03c0)\u207f\u1d56|V|\u207f|U|\u1d56) vec(X) ~ \ud835\udca9(M, V \u2297 U) This kernel represents the covariance_matrix V \u2297 U given V and U. \"\"\" def __init__ ( self , U : IndexKernel , V : IndexKernel ): super ( MatrixVariateIndexKernel , self ) . __init__ () self . U = U self . V = V n = self . U . raw_var . shape [ - 1 ] p = self . V . raw_var . shape [ - 1 ] self . matshape = ( n , p ) @property def covar_matrix ( self ): U = self . U . covar_matrix V = self . V . covar_matrix return KroneckerProductLazyTensor ( V , U ) def forward ( self , i1 , i2 , ** params ): assert i1 . dtype in ( torch . int64 , torch . int32 ) assert i2 . dtype in ( torch . int64 , torch . int32 ) covar_matrix = self . covar_matrix res = InterpolatedLazyTensor ( base_lazy_tensor = covar_matrix , left_interp_indices = i1 , right_interp_indices = i2 ) return res MatrixVariateKernel Bases: Kernel Kernel supporting Kronecker style matrix variate Gaussian processes (where every data point is evaluated at every task). Given a base covariance module to be used for the data, :math: K_{XX} , this kernel computes a task kernel of specified size :math: K_{TT} and returns :math: K = K_{TT} \\otimes K_{XX} . as an :obj: gpytorch.lazy.KroneckerProductLazyTensor . Parameters: Name Type Description Default task_covar_module obj: gpytorch.kernels.IndexKernel ): Kernel to use as the task kernel required data_covar_module obj: gpytorch.kernels.Kernel ): Kernel to use as the data kernel. required num_tasks int Number of tasks required batch_size int Set if the MultitaskKernel is operating on batches of data (and you want different parameters for each batch) required rank int Rank of index kernel to use for task covariance matrix. required task_covar_prior obj: gpytorch.priors.Prior ): Prior to use for task kernel. See :class: gpytorch.kernels.IndexKernel for details. required Source code in bayes_cbf/matrix_variate_multitask_kernel.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class MatrixVariateKernel ( Kernel ): r \"\"\" Kernel supporting Kronecker style matrix variate Gaussian processes (where every data point is evaluated at every task). Given a base covariance module to be used for the data, :math:`K_{XX}`, this kernel computes a task kernel of specified size :math:`K_{TT}` and returns :math:`K = K_{TT} \\otimes K_{XX}`. as an :obj:`gpytorch.lazy.KroneckerProductLazyTensor`. Args: task_covar_module (:obj:`gpytorch.kernels.IndexKernel`): Kernel to use as the task kernel data_covar_module (:obj:`gpytorch.kernels.Kernel`): Kernel to use as the data kernel. num_tasks (int): Number of tasks batch_size (int, optional): Set if the MultitaskKernel is operating on batches of data (and you want different parameters for each batch) rank (int): Rank of index kernel to use for task covariance matrix. task_covar_prior (:obj:`gpytorch.priors.Prior`): Prior to use for task kernel. See :class:`gpytorch.kernels.IndexKernel` for details.\"\"\" @property def num_tasks ( self ): return prod ( self . task_covar_module . matshape ) def __init__ ( self , task_covar_module , data_covar_module , decoder , ** kwargs ): \"\"\" \"\"\" super () . __init__ ( ** kwargs ) self . task_covar_module = task_covar_module self . data_covar_module = data_covar_module self . decoder = decoder","title":"matrix_variate_multitask_kernel"},{"location":"reference/bayes_cbf/matrix_variate_multitask_kernel/#bayes_cbf.matrix_variate_multitask_kernel.MatrixVariateIndexKernel","text":"Bases: Kernel Wraps IndexKernel to represent https://en.wikipedia.org/wiki/Matrix_normal_distribution P(X | M, U, V) = exp(-0.5 tr[ V\u207b\u00b9 (X - M)\u1d40 U\u207b\u00b9 (X-M) ] ) / \u221a((2\u03c0)\u207f\u1d56|V|\u207f|U|\u1d56) vec(X) ~ \ud835\udca9(M, V \u2297 U) This kernel represents the covariance_matrix V \u2297 U given V and U. Source code in bayes_cbf/matrix_variate_multitask_kernel.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class MatrixVariateIndexKernel ( Kernel ): \"\"\" Wraps IndexKernel to represent https://en.wikipedia.org/wiki/Matrix_normal_distribution P(X | M, U, V) = exp(-0.5 tr[ V\u207b\u00b9 (X - M)\u1d40 U\u207b\u00b9 (X-M) ] ) / \u221a((2\u03c0)\u207f\u1d56|V|\u207f|U|\u1d56) vec(X) ~ \ud835\udca9(M, V \u2297 U) This kernel represents the covariance_matrix V \u2297 U given V and U. \"\"\" def __init__ ( self , U : IndexKernel , V : IndexKernel ): super ( MatrixVariateIndexKernel , self ) . __init__ () self . U = U self . V = V n = self . U . raw_var . shape [ - 1 ] p = self . V . raw_var . shape [ - 1 ] self . matshape = ( n , p ) @property def covar_matrix ( self ): U = self . U . covar_matrix V = self . V . covar_matrix return KroneckerProductLazyTensor ( V , U ) def forward ( self , i1 , i2 , ** params ): assert i1 . dtype in ( torch . int64 , torch . int32 ) assert i2 . dtype in ( torch . int64 , torch . int32 ) covar_matrix = self . covar_matrix res = InterpolatedLazyTensor ( base_lazy_tensor = covar_matrix , left_interp_indices = i1 , right_interp_indices = i2 ) return res","title":"MatrixVariateIndexKernel"},{"location":"reference/bayes_cbf/matrix_variate_multitask_kernel/#bayes_cbf.matrix_variate_multitask_kernel.MatrixVariateKernel","text":"Bases: Kernel Kernel supporting Kronecker style matrix variate Gaussian processes (where every data point is evaluated at every task). Given a base covariance module to be used for the data, :math: K_{XX} , this kernel computes a task kernel of specified size :math: K_{TT} and returns :math: K = K_{TT} \\otimes K_{XX} . as an :obj: gpytorch.lazy.KroneckerProductLazyTensor . Parameters: Name Type Description Default task_covar_module obj: gpytorch.kernels.IndexKernel ): Kernel to use as the task kernel required data_covar_module obj: gpytorch.kernels.Kernel ): Kernel to use as the data kernel. required num_tasks int Number of tasks required batch_size int Set if the MultitaskKernel is operating on batches of data (and you want different parameters for each batch) required rank int Rank of index kernel to use for task covariance matrix. required task_covar_prior obj: gpytorch.priors.Prior ): Prior to use for task kernel. See :class: gpytorch.kernels.IndexKernel for details. required Source code in bayes_cbf/matrix_variate_multitask_kernel.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class MatrixVariateKernel ( Kernel ): r \"\"\" Kernel supporting Kronecker style matrix variate Gaussian processes (where every data point is evaluated at every task). Given a base covariance module to be used for the data, :math:`K_{XX}`, this kernel computes a task kernel of specified size :math:`K_{TT}` and returns :math:`K = K_{TT} \\otimes K_{XX}`. as an :obj:`gpytorch.lazy.KroneckerProductLazyTensor`. Args: task_covar_module (:obj:`gpytorch.kernels.IndexKernel`): Kernel to use as the task kernel data_covar_module (:obj:`gpytorch.kernels.Kernel`): Kernel to use as the data kernel. num_tasks (int): Number of tasks batch_size (int, optional): Set if the MultitaskKernel is operating on batches of data (and you want different parameters for each batch) rank (int): Rank of index kernel to use for task covariance matrix. task_covar_prior (:obj:`gpytorch.priors.Prior`): Prior to use for task kernel. See :class:`gpytorch.kernels.IndexKernel` for details.\"\"\" @property def num_tasks ( self ): return prod ( self . task_covar_module . matshape ) def __init__ ( self , task_covar_module , data_covar_module , decoder , ** kwargs ): \"\"\" \"\"\" super () . __init__ ( ** kwargs ) self . task_covar_module = task_covar_module self . data_covar_module = data_covar_module self . decoder = decoder","title":"MatrixVariateKernel"},{"location":"reference/bayes_cbf/matrix_variate_multitask_model/","text":"HetergeneousMatrixVariateMean Bases: MultitaskMean Computes a mean depending on the input. Our mean can be the mean of either of the two related GaussianProcesses Xdot = F(X)\u1d40U or Y = F(X)\u1d40 We take input in the form M, X, U = MXU where M is the mask, where 1 value means we want Xdot = F(X)\u1d40U, while 0 means that we want Y = F(X)\u1d40 Source code in bayes_cbf/matrix_variate_multitask_model.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class HetergeneousMatrixVariateMean ( MultitaskMean ): \"\"\" Computes a mean depending on the input. Our mean can be the mean of either of the two related GaussianProcesses Xdot = F(X)\u1d40U or Y = F(X)\u1d40 We take input in the form M, X, U = MXU where M is the mask, where 1 value means we want Xdot = F(X)\u1d40U, while 0 means that we want Y = F(X)\u1d40 \"\"\" def __init__ ( self , mean_module , decoder , matshape , ** kwargs ): num_tasks = prod ( matshape ) super () . __init__ ( mean_module , num_tasks , ** kwargs ) self . decoder = decoder self . matshape = matshape def mean1 ( self , UH , mu ): # TODO: Make this a separate module XdotMean = UH . unsqueeze ( - 2 ) @ mu # D x n output = XdotMean . reshape ( - 1 ) return output def mean2 ( self , mu ): # TODO: Make this a separate module return mu . reshape ( - 1 ) def forward ( self , MXU ): assert not torch . isnan ( MXU ) . any () B = MXU . shape [: - 1 ] Ms , _ , UH = self . decoder . decode ( MXU ) assert Ms . size ( - 1 ) == 1 Ms = Ms [ ... , 0 ] idxs = torch . nonzero ( Ms - Ms . new_ones ( Ms . size ())) idxend = torch . min ( idxs ) if idxs . numel () else Ms . size ( - 1 ) mu = torch . cat ([ sub_mean ( MXU ) . unsqueeze ( - 1 ) for sub_mean in self . base_means ], dim =- 1 ) assert not torch . isnan ( mu ) . any () mu = mu . reshape ( - 1 , * self . matshape ) output = None if idxend != 0 : # assume sorted assert ( Ms [ ... , idxend :] == 0 ) . all () output = self . mean1 ( UH [ ... , : idxend , :], mu [: idxend , ... ]) if Ms . size ( - 1 ) != idxend : Fmean = self . mean2 ( mu [ idxend :, ... ]) output = torch . cat ([ output , Fmean ]) if output is not None else Fmean return output def state_dict ( self ): return dict ( matshape = self . matshape , decoder = self . decoder . state_dict () ) def load_state_dict ( self , state_dict ): self . matshape = state_dict . pop ( 'matshape' ) self . decoder . load_state_dict ( state_dict [ 'decoder' ])","title":"matrix_variate_multitask_model"},{"location":"reference/bayes_cbf/matrix_variate_multitask_model/#bayes_cbf.matrix_variate_multitask_model.HetergeneousMatrixVariateMean","text":"Bases: MultitaskMean Computes a mean depending on the input. Our mean can be the mean of either of the two related GaussianProcesses Xdot = F(X)\u1d40U or Y = F(X)\u1d40 We take input in the form M, X, U = MXU where M is the mask, where 1 value means we want Xdot = F(X)\u1d40U, while 0 means that we want Y = F(X)\u1d40 Source code in bayes_cbf/matrix_variate_multitask_model.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class HetergeneousMatrixVariateMean ( MultitaskMean ): \"\"\" Computes a mean depending on the input. Our mean can be the mean of either of the two related GaussianProcesses Xdot = F(X)\u1d40U or Y = F(X)\u1d40 We take input in the form M, X, U = MXU where M is the mask, where 1 value means we want Xdot = F(X)\u1d40U, while 0 means that we want Y = F(X)\u1d40 \"\"\" def __init__ ( self , mean_module , decoder , matshape , ** kwargs ): num_tasks = prod ( matshape ) super () . __init__ ( mean_module , num_tasks , ** kwargs ) self . decoder = decoder self . matshape = matshape def mean1 ( self , UH , mu ): # TODO: Make this a separate module XdotMean = UH . unsqueeze ( - 2 ) @ mu # D x n output = XdotMean . reshape ( - 1 ) return output def mean2 ( self , mu ): # TODO: Make this a separate module return mu . reshape ( - 1 ) def forward ( self , MXU ): assert not torch . isnan ( MXU ) . any () B = MXU . shape [: - 1 ] Ms , _ , UH = self . decoder . decode ( MXU ) assert Ms . size ( - 1 ) == 1 Ms = Ms [ ... , 0 ] idxs = torch . nonzero ( Ms - Ms . new_ones ( Ms . size ())) idxend = torch . min ( idxs ) if idxs . numel () else Ms . size ( - 1 ) mu = torch . cat ([ sub_mean ( MXU ) . unsqueeze ( - 1 ) for sub_mean in self . base_means ], dim =- 1 ) assert not torch . isnan ( mu ) . any () mu = mu . reshape ( - 1 , * self . matshape ) output = None if idxend != 0 : # assume sorted assert ( Ms [ ... , idxend :] == 0 ) . all () output = self . mean1 ( UH [ ... , : idxend , :], mu [: idxend , ... ]) if Ms . size ( - 1 ) != idxend : Fmean = self . mean2 ( mu [ idxend :, ... ]) output = torch . cat ([ output , Fmean ]) if output is not None else Fmean return output def state_dict ( self ): return dict ( matshape = self . matshape , decoder = self . decoder . state_dict () ) def load_state_dict ( self , state_dict ): self . matshape = state_dict . pop ( 'matshape' ) self . decoder . load_state_dict ( state_dict [ 'decoder' ])","title":"HetergeneousMatrixVariateMean"},{"location":"reference/bayes_cbf/misc/","text":"Home for functions/classes that haven't find a home of their own t_hstack = partial ( torch . cat , dim =- 1 ) module-attribute Similar to np.hstack t_vstack = partial ( torch . cat , dim =- 2 ) module-attribute Similar to np.vstack BayesianDynamicsModel Bases: DynamicsModel Source code in bayes_cbf/misc.py 187 188 189 190 191 192 class BayesianDynamicsModel ( DynamicsModel ): @abstractmethod def fu_func_gp ( self , U ): \"\"\" return a GaussianProcessBase \"\"\" fu_func_gp ( U ) abstractmethod return a GaussianProcessBase Source code in bayes_cbf/misc.py 188 189 190 191 192 @abstractmethod def fu_func_gp ( self , U ): \"\"\" return a GaussianProcessBase \"\"\" DynamicsModel Bases: ABC Represents mode of the form: x\u0307 = f(x) + g(x)u Source code in bayes_cbf/misc.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 class DynamicsModel ( ABC ): \"\"\" Represents mode of the form: x\u0307 = f(x) + g(x)u \"\"\" def __init__ ( self ): self . _state = None @property @abstractmethod def ctrl_size ( self ): \"\"\" Dimension of ctrl \"\"\" @property @abstractmethod def state_size ( self ): \"\"\" Dimension of state \"\"\" @abstractmethod def f_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) \"\"\" @abstractmethod def g_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) \"\"\" def normalize_state ( self , X_in ): return X_in def forward ( self , x , u ): if x . ndim == 1 : X_b = x . unsqueeze ( 0 ) else : X_b = x if u . ndim == 1 : U_b = u . unsqueeze ( 0 ) . unsqueeze ( - 1 ) elif u . ndim == 2 : U_b = u . unsqueeze ( 0 ) else : U_b = u Xdot_b = self . f_func ( X_b ) + self . g_func ( X_b ) . bmm ( U_b ) . squeeze ( - 1 ) if x . ndim == 1 : xdot = Xdot_b . squeeze ( 0 ) else : xdot = Xdot_b return xdot def step ( self , u , dt ): x = self . _state xdot = self . forward ( x , u ) xtp1 = self . normalize_state ( x + xdot * dt ) self . _state = xtp1 return dict ( x = xtp1 , xdot = xdot ) def set_init_state ( self , x0 ): self . _state = x0 . clone () def F_func ( self , X ): return torch . cat ([ self . f_func ( X ) . unsqueeze ( - 1 ), self . g_func ( X )], dim =- 1 ) ctrl_size () property abstractmethod Dimension of ctrl Source code in bayes_cbf/misc.py 118 119 120 121 122 123 @property @abstractmethod def ctrl_size ( self ): \"\"\" Dimension of ctrl \"\"\" f_func ( X ) abstractmethod x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) Source code in bayes_cbf/misc.py 132 133 134 135 136 137 138 139 @abstractmethod def f_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) \"\"\" g_func ( X ) abstractmethod x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) Source code in bayes_cbf/misc.py 141 142 143 144 145 146 147 148 @abstractmethod def g_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) \"\"\" state_size () property abstractmethod Dimension of state Source code in bayes_cbf/misc.py 125 126 127 128 129 130 @property @abstractmethod def state_size ( self ): \"\"\" Dimension of state \"\"\" plot_to_image ( figure ) Converts the matplotlib plot specified by 'figure' to a PNG image and returns it. The supplied figure is closed and inaccessible after this call. Source code in bayes_cbf/misc.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def plot_to_image ( figure ): \"\"\"Converts the matplotlib plot specified by 'figure' to a PNG image and returns it. The supplied figure is closed and inaccessible after this call.\"\"\" # Save the plot to a PNG in memory. buf = io . BytesIO () figure . savefig ( buf , format = 'png' ) # Closing the figure prevents it from being displayed directly inside # the notebook. plt . close ( figure ) buf . seek ( 0 ) # Convert PNG buffer to TF image image = Image . open ( buf ) # Add the batch dimension return torch . from_numpy ( np . asarray ( image )) t_hessian ( f , x , xp , grad_check = True ) Computes second derivative, Hessian Source code in bayes_cbf/misc.py 236 237 238 239 240 241 242 243 244 245 def t_hessian ( f , x , xp , grad_check = True ): \"\"\" Computes second derivative, Hessian \"\"\" with variable_required_grad ( x ): with variable_required_grad ( xp ): grad_k_func = lambda xs , xt : torch . autograd . grad ( f ( xs , xt ), xs , create_graph = True )[ 0 ] Hxx_k = t_jac ( grad_k_func ( x , xp ), xp ) return Hxx_k torch_kron ( A , B , batch_dims = 1 ) B = torch.rand(5,3,3) A = torch.rand(5,2,2) AB = torch_kron(A, B) torch.allclose(AB[1, :3, :3] , A[1, 0,0] * B[1, ...]) True BA = torch_kron(B, A) torch.allclose(BA[1, :2, :2] , B[1, 0,0] * A[1, ...]) True B = torch.rand(3,2) A = torch.rand(2,3) AB = torch_kron(A, B, batch_dims=0) AB.shape = (6, 6) True Source code in bayes_cbf/misc.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def torch_kron ( A , B , batch_dims = 1 ): \"\"\" >>> B = torch.rand(5,3,3) >>> A = torch.rand(5,2,2) >>> AB = torch_kron(A, B) >>> torch.allclose(AB[1, :3, :3] , A[1, 0,0] * B[1, ...]) True >>> BA = torch_kron(B, A) >>> torch.allclose(BA[1, :2, :2] , B[1, 0,0] * A[1, ...]) True >>> B = torch.rand(3,2) >>> A = torch.rand(2,3) >>> AB = torch_kron(A, B, batch_dims=0) >>> AB.shape = (6, 6) True \"\"\" assert A . ndim == B . ndim b = B . shape [ 0 : batch_dims ] #assert A.shape[0:batch_dims] == b a = A . shape [ 0 : batch_dims ] B_shape = sum ([[ 1 , si ] for si in B . shape [ batch_dims :]], []) A_shape = sum ([[ si , 1 ] for si in A . shape [ batch_dims :]], []) kron_shape = [ a * b for a , b in zip_longest ( A . shape [ batch_dims :], B . shape [ batch_dims :], fillvalue = 1 )] kron = ( A . reshape ( * a , * A_shape ) * B . reshape ( * b , * B_shape )) k = kron . shape [: batch_dims ] return kron . reshape ( * k , * kron_shape ) variable_required_grad ( x ) creates context for x requiring gradient Source code in bayes_cbf/misc.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @contextmanager def variable_required_grad ( x ): \"\"\" creates context for x requiring gradient \"\"\" old_x_requires_grad = x . requires_grad if isleaf ( x ): xleaf = x else : xleaf = x . detach () . clone () try : yield xleaf . requires_grad_ ( True ) finally : if isleaf ( x ): x . requires_grad_ ( old_x_requires_grad )","title":"misc"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.t_hstack","text":"Similar to np.hstack","title":"t_hstack"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.t_vstack","text":"Similar to np.vstack","title":"t_vstack"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.BayesianDynamicsModel","text":"Bases: DynamicsModel Source code in bayes_cbf/misc.py 187 188 189 190 191 192 class BayesianDynamicsModel ( DynamicsModel ): @abstractmethod def fu_func_gp ( self , U ): \"\"\" return a GaussianProcessBase \"\"\"","title":"BayesianDynamicsModel"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.BayesianDynamicsModel.fu_func_gp","text":"return a GaussianProcessBase Source code in bayes_cbf/misc.py 188 189 190 191 192 @abstractmethod def fu_func_gp ( self , U ): \"\"\" return a GaussianProcessBase \"\"\"","title":"fu_func_gp()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.DynamicsModel","text":"Bases: ABC Represents mode of the form: x\u0307 = f(x) + g(x)u Source code in bayes_cbf/misc.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 class DynamicsModel ( ABC ): \"\"\" Represents mode of the form: x\u0307 = f(x) + g(x)u \"\"\" def __init__ ( self ): self . _state = None @property @abstractmethod def ctrl_size ( self ): \"\"\" Dimension of ctrl \"\"\" @property @abstractmethod def state_size ( self ): \"\"\" Dimension of state \"\"\" @abstractmethod def f_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) \"\"\" @abstractmethod def g_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) \"\"\" def normalize_state ( self , X_in ): return X_in def forward ( self , x , u ): if x . ndim == 1 : X_b = x . unsqueeze ( 0 ) else : X_b = x if u . ndim == 1 : U_b = u . unsqueeze ( 0 ) . unsqueeze ( - 1 ) elif u . ndim == 2 : U_b = u . unsqueeze ( 0 ) else : U_b = u Xdot_b = self . f_func ( X_b ) + self . g_func ( X_b ) . bmm ( U_b ) . squeeze ( - 1 ) if x . ndim == 1 : xdot = Xdot_b . squeeze ( 0 ) else : xdot = Xdot_b return xdot def step ( self , u , dt ): x = self . _state xdot = self . forward ( x , u ) xtp1 = self . normalize_state ( x + xdot * dt ) self . _state = xtp1 return dict ( x = xtp1 , xdot = xdot ) def set_init_state ( self , x0 ): self . _state = x0 . clone () def F_func ( self , X ): return torch . cat ([ self . f_func ( X ) . unsqueeze ( - 1 ), self . g_func ( X )], dim =- 1 )","title":"DynamicsModel"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.DynamicsModel.ctrl_size","text":"Dimension of ctrl Source code in bayes_cbf/misc.py 118 119 120 121 122 123 @property @abstractmethod def ctrl_size ( self ): \"\"\" Dimension of ctrl \"\"\"","title":"ctrl_size()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.DynamicsModel.f_func","text":"x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) Source code in bayes_cbf/misc.py 132 133 134 135 136 137 138 139 @abstractmethod def f_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: f(X) \"\"\"","title":"f_func()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.DynamicsModel.g_func","text":"x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) Source code in bayes_cbf/misc.py 141 142 143 144 145 146 147 148 @abstractmethod def g_func ( self , X ): \"\"\" x\u0307 = f(x) + g(x)u @param: X : d x self.state_size vector or self.state_size vector @returns: g(X) \"\"\"","title":"g_func()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.DynamicsModel.state_size","text":"Dimension of state Source code in bayes_cbf/misc.py 125 126 127 128 129 130 @property @abstractmethod def state_size ( self ): \"\"\" Dimension of state \"\"\"","title":"state_size()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.plot_to_image","text":"Converts the matplotlib plot specified by 'figure' to a PNG image and returns it. The supplied figure is closed and inaccessible after this call. Source code in bayes_cbf/misc.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def plot_to_image ( figure ): \"\"\"Converts the matplotlib plot specified by 'figure' to a PNG image and returns it. The supplied figure is closed and inaccessible after this call.\"\"\" # Save the plot to a PNG in memory. buf = io . BytesIO () figure . savefig ( buf , format = 'png' ) # Closing the figure prevents it from being displayed directly inside # the notebook. plt . close ( figure ) buf . seek ( 0 ) # Convert PNG buffer to TF image image = Image . open ( buf ) # Add the batch dimension return torch . from_numpy ( np . asarray ( image ))","title":"plot_to_image()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.t_hessian","text":"Computes second derivative, Hessian Source code in bayes_cbf/misc.py 236 237 238 239 240 241 242 243 244 245 def t_hessian ( f , x , xp , grad_check = True ): \"\"\" Computes second derivative, Hessian \"\"\" with variable_required_grad ( x ): with variable_required_grad ( xp ): grad_k_func = lambda xs , xt : torch . autograd . grad ( f ( xs , xt ), xs , create_graph = True )[ 0 ] Hxx_k = t_jac ( grad_k_func ( x , xp ), xp ) return Hxx_k","title":"t_hessian()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.torch_kron","text":"B = torch.rand(5,3,3) A = torch.rand(5,2,2) AB = torch_kron(A, B) torch.allclose(AB[1, :3, :3] , A[1, 0,0] * B[1, ...]) True BA = torch_kron(B, A) torch.allclose(BA[1, :2, :2] , B[1, 0,0] * A[1, ...]) True B = torch.rand(3,2) A = torch.rand(2,3) AB = torch_kron(A, B, batch_dims=0) AB.shape = (6, 6) True Source code in bayes_cbf/misc.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def torch_kron ( A , B , batch_dims = 1 ): \"\"\" >>> B = torch.rand(5,3,3) >>> A = torch.rand(5,2,2) >>> AB = torch_kron(A, B) >>> torch.allclose(AB[1, :3, :3] , A[1, 0,0] * B[1, ...]) True >>> BA = torch_kron(B, A) >>> torch.allclose(BA[1, :2, :2] , B[1, 0,0] * A[1, ...]) True >>> B = torch.rand(3,2) >>> A = torch.rand(2,3) >>> AB = torch_kron(A, B, batch_dims=0) >>> AB.shape = (6, 6) True \"\"\" assert A . ndim == B . ndim b = B . shape [ 0 : batch_dims ] #assert A.shape[0:batch_dims] == b a = A . shape [ 0 : batch_dims ] B_shape = sum ([[ 1 , si ] for si in B . shape [ batch_dims :]], []) A_shape = sum ([[ si , 1 ] for si in A . shape [ batch_dims :]], []) kron_shape = [ a * b for a , b in zip_longest ( A . shape [ batch_dims :], B . shape [ batch_dims :], fillvalue = 1 )] kron = ( A . reshape ( * a , * A_shape ) * B . reshape ( * b , * B_shape )) k = kron . shape [: batch_dims ] return kron . reshape ( * k , * kron_shape )","title":"torch_kron()"},{"location":"reference/bayes_cbf/misc/#bayes_cbf.misc.variable_required_grad","text":"creates context for x requiring gradient Source code in bayes_cbf/misc.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @contextmanager def variable_required_grad ( x ): \"\"\" creates context for x requiring gradient \"\"\" old_x_requires_grad = x . requires_grad if isleaf ( x ): xleaf = x else : xleaf = x . detach () . clone () try : yield xleaf . requires_grad_ ( True ) finally : if isleaf ( x ): x . requires_grad_ ( old_x_requires_grad )","title":"variable_required_grad()"},{"location":"reference/bayes_cbf/numpy2torch/","text":"","title":"numpy2torch"},{"location":"reference/bayes_cbf/optimizers/","text":"convert_socp_to_cvxopt_format ( c , socp_constraints ) socp_constraints = [(Name\u2096, (A\u2096, bfb\u2096, bfc\u2096, d\u2096), ...] min_u c\u1d40u s.t. d\u2096 + bfc\u2096 u \u227b |A\u2096 u + bfb\u2096|\u2082 min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M Source code in bayes_cbf/optimizers.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def convert_socp_to_cvxopt_format ( c , socp_constraints ): \"\"\" socp_constraints = [(Name\u2096, (A\u2096, bfb\u2096, bfc\u2096, d\u2096), ...] min_u c\u1d40u s.t. d\u2096 + bfc\u2096 u \u227b |A\u2096 u + bfb\u2096|\u2082 min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M \"\"\" m = np . asarray ( c ) . shape [ - 1 ] Gqs = [] hqs = [] for name , ( A , bfb , bfc , d ) in socp_constraints : # (name, (A, b, c, d)) # |Au + bfb| < bfc' u + d # s.t. ||Ax + b||_2 <= c'x + d # But || h\u2081 - G\u2081x ||\u2082 \u227a h\u2080 - g\u2080' x # G = [g\u2080'; G\u2081] = [-c'; -A] # h = [h\u2080; h\u2081] = [d; b] Gqi = np . zeros (( A . shape [ 0 ] + 1 , m )) Gqi [ 0 , :] = - bfc Gqi [ 1 :, :] = - A Gqs . append ( Gqi ) hqi = np . zeros (( A . shape [ 0 ] + 1 , 1 )) hqi [ 0 , 0 ] = d . reshape ( 1 , 1 ) hqi [ 1 :, 0 ] = bfb hqs . append ( hqi ) return c , Gqs , hqs optimizer_socp_cvxopt ( u0 , linear_objective , socp_constraints ) Solve the optimization problem min_u A u + b s.t. h\u2080 - (G u)\u2080 \u227b |h\u2081 - (Gu)\u2081 |\u2082 u0: reference control signal linear_objective: ( convert to cvxopt format and pass to cvxopt min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b s\u2080 \u2ab0 0 # Component wise inequalities s\u2096\u2080 \u2ab0 | s\u2096\u2081 |\u2082, k = 1, ..., M min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M Source code in bayes_cbf/optimizers.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def optimizer_socp_cvxopt ( u0 , linear_objective , socp_constraints ): \"\"\" Solve the optimization problem min_u A u + b s.t. h\u2080 - (G u)\u2080 \u227b |h\u2081 - (Gu)\u2081 |\u2082 u0: reference control signal linear_objective: ( convert to cvxopt format and pass to cvxopt min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b s\u2080 \u2ab0 0 # Component wise inequalities s\u2096\u2080 \u2ab0 | s\u2096\u2081 |\u2082, k = 1, ..., M min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M \"\"\" from cvxopt import solvers , matrix c , Gqs , hqs = convert_socp_to_cvxopt_format ( linear_objective , socp_constraints ) inputs_socp = dict ( c = matrix ( c ), Gq = list ( map ( matrix , Gqs )), hq = list ( map ( matrix , hqs ))) #print(\"optimizers.py:72\", inputs_socp) sol = solvers . socp ( ** inputs_socp ) if sol [ 'status' ] != 'optimal' : if sol [ 'status' ] == 'primal infeasible' : y_uopt = sol . get ( 'z' , u0 ) else : y_uopt = u0 print ( \" {c} .T [y, u] \\n \" . format ( c = c ) + \"s.t. \" + \"\" . join (( \" sq = {hq} - {Gq} [ {y_uopt} ] \\n \" . format ( hq = np . asarray ( hq ), Gq = np . asarray ( Gq ), y_uopt = np . asarray ( y_uopt )) for Gq , hq in zip ( Gqs , hqs )))) raise InfeasibleProblemError ( \"Infeasible problem: %s \" % sol [ 'status' ]) return np . asarray ( sol [ 'x' ]) . astype ( u0 . dtype ) . reshape ( - 1 )","title":"optimizers"},{"location":"reference/bayes_cbf/optimizers/#bayes_cbf.optimizers.convert_socp_to_cvxopt_format","text":"socp_constraints = [(Name\u2096, (A\u2096, bfb\u2096, bfc\u2096, d\u2096), ...] min_u c\u1d40u s.t. d\u2096 + bfc\u2096 u \u227b |A\u2096 u + bfb\u2096|\u2082 min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M Source code in bayes_cbf/optimizers.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def convert_socp_to_cvxopt_format ( c , socp_constraints ): \"\"\" socp_constraints = [(Name\u2096, (A\u2096, bfb\u2096, bfc\u2096, d\u2096), ...] min_u c\u1d40u s.t. d\u2096 + bfc\u2096 u \u227b |A\u2096 u + bfb\u2096|\u2082 min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M \"\"\" m = np . asarray ( c ) . shape [ - 1 ] Gqs = [] hqs = [] for name , ( A , bfb , bfc , d ) in socp_constraints : # (name, (A, b, c, d)) # |Au + bfb| < bfc' u + d # s.t. ||Ax + b||_2 <= c'x + d # But || h\u2081 - G\u2081x ||\u2082 \u227a h\u2080 - g\u2080' x # G = [g\u2080'; G\u2081] = [-c'; -A] # h = [h\u2080; h\u2081] = [d; b] Gqi = np . zeros (( A . shape [ 0 ] + 1 , m )) Gqi [ 0 , :] = - bfc Gqi [ 1 :, :] = - A Gqs . append ( Gqi ) hqi = np . zeros (( A . shape [ 0 ] + 1 , 1 )) hqi [ 0 , 0 ] = d . reshape ( 1 , 1 ) hqi [ 1 :, 0 ] = bfb hqs . append ( hqi ) return c , Gqs , hqs","title":"convert_socp_to_cvxopt_format()"},{"location":"reference/bayes_cbf/optimizers/#bayes_cbf.optimizers.optimizer_socp_cvxopt","text":"Solve the optimization problem min_u A u + b s.t. h\u2080 - (G u)\u2080 \u227b |h\u2081 - (Gu)\u2081 |\u2082 u0: reference control signal linear_objective: ( convert to cvxopt format and pass to cvxopt min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b s\u2080 \u2ab0 0 # Component wise inequalities s\u2096\u2080 \u2ab0 | s\u2096\u2081 |\u2082, k = 1, ..., M min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M Source code in bayes_cbf/optimizers.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def optimizer_socp_cvxopt ( u0 , linear_objective , socp_constraints ): \"\"\" Solve the optimization problem min_u A u + b s.t. h\u2080 - (G u)\u2080 \u227b |h\u2081 - (Gu)\u2081 |\u2082 u0: reference control signal linear_objective: ( convert to cvxopt format and pass to cvxopt min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b s\u2080 \u2ab0 0 # Component wise inequalities s\u2096\u2080 \u2ab0 | s\u2096\u2081 |\u2082, k = 1, ..., M min c\u1d40u s.t G\u2096 x + s\u2096 = h\u2096, k = 0, ..., M A x = b h\u2080 - G\u2080 x \u2ab0 0 # Component wise inequalities h\u2096[0] - G\u2096[0, :] x \u2ab0 | h\u2096[1:] - G\u2096[1:, :] x |\u2082, k = 1, ..., M \"\"\" from cvxopt import solvers , matrix c , Gqs , hqs = convert_socp_to_cvxopt_format ( linear_objective , socp_constraints ) inputs_socp = dict ( c = matrix ( c ), Gq = list ( map ( matrix , Gqs )), hq = list ( map ( matrix , hqs ))) #print(\"optimizers.py:72\", inputs_socp) sol = solvers . socp ( ** inputs_socp ) if sol [ 'status' ] != 'optimal' : if sol [ 'status' ] == 'primal infeasible' : y_uopt = sol . get ( 'z' , u0 ) else : y_uopt = u0 print ( \" {c} .T [y, u] \\n \" . format ( c = c ) + \"s.t. \" + \"\" . join (( \" sq = {hq} - {Gq} [ {y_uopt} ] \\n \" . format ( hq = np . asarray ( hq ), Gq = np . asarray ( Gq ), y_uopt = np . asarray ( y_uopt )) for Gq , hq in zip ( Gqs , hqs )))) raise InfeasibleProblemError ( \"Infeasible problem: %s \" % sol [ 'status' ]) return np . asarray ( sol [ 'x' ]) . astype ( u0 . dtype ) . reshape ( - 1 )","title":"optimizer_socp_cvxopt()"},{"location":"reference/bayes_cbf/pendulum/","text":"run_pendulum_control_cbf_clf = partial ( run_pendulum_experiment , controller_class = PendulumCBFCLFDirect , plotfile = 'data/plots/run_pendulum_control_cbf_clf {suffix} .pdf' , theta0 = 5 * math . pi / 12 , tau = 0.002 , numSteps = 15000 ) module-attribute Run pendulum with a safe CLF-CBF controller. run_pendulum_control_online_learning = partial ( run_pendulum_experiment , plotfile = 'data/plots/run_pendulum_control_online_learning {suffix} .pdf' , controller_class = ControlPendulumCBFLearned , numSteps = 250 , theta0 = 7 * math . pi / 12 , tau = 0.002 , dtype = torch . float64 ) module-attribute Run save pendulum control while learning the parameters online run_pendulum_control_trival = partial ( run_pendulum_experiment , controller_class = ControlTrivial , plotfile = 'data/plots/run_pendulum_control_trival {suffix} .pdf' ) module-attribute Run pendulum with a trivial controller. ControlCBFCLFGroundTruth Bases: ControlPendulumCBFLearned Controller that avoids learning but uses the ground truth model Source code in bayes_cbf/pendulum.py 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 class ControlCBFCLFGroundTruth ( ControlPendulumCBFLearned ): \"\"\" Controller that avoids learning but uses the ground truth model \"\"\" needs_ground_truth = False def __init__ ( self , * a , ** kw ): assert kw . pop ( \"use_ground_truth_model\" , False ) is False super () . __init__ ( * a , use_ground_truth_model = True , mean_dynamics_model_class = PendulumDynamicsModel , ** kw ) control_QP_cbf_clf ( x , ctrl_aff_constraints , constraint_margin_weights = []) Parameters: Name Type Description Default A_cbfs A tuple of CBF functions required b_cbfs A tuple of CBF functions required constraint_margin_weights Add a margin constant to the constraint that is maximized. [] Source code in bayes_cbf/pendulum.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 def control_QP_cbf_clf ( x , ctrl_aff_constraints , constraint_margin_weights = []): \"\"\" Args: A_cbfs: A tuple of CBF functions b_cbfs: A tuple of CBF functions constraint_margin_weights: Add a margin constant to the constraint that is maximized. \"\"\" #import ipdb; ipdb.set_trace() clf_idx = 0 A_total = np . vstack ([ af . A ( x ) . detach () . numpy () for af in ctrl_aff_constraints ]) b_total = np . vstack ([ af . b ( x ) . detach () . numpy () for af in ctrl_aff_constraints ]) . flatten () D_u = A_total . shape [ 1 ] N_const = A_total . shape [ 0 ] # u0 = l*g*sin(theta) # uopt = 0.1*g # contraints = A_total.dot(uopt) - b_total # assert contraints[0] <= 0 # assert contraints[1] <= 0 # assert contraints[2] <= 0 # [A, I][ u ] # [ \u03c1 ] \u2264 b for all constraints # # minimize # [ u, \u03c11, \u03c12 ] [ 1, 0] [ u ] # [ 0, 100] [ \u03c12 ] # [A_cbf, 1] [ u, -\u03c1 ] \u2264 b_cbf # [A_clf, 1] [ u, -\u03c1 ] \u2264 b_clf N_slack = len ( constraint_margin_weights ) A_total_rho = np . hstack ( ( A_total , np . vstack (( - np . eye ( N_slack ), np . zeros (( N_const - N_slack , N_slack )))) )) A = A_total P_rho = np . eye ( D_u + N_slack ) P_rho [ D_u :, D_u :] = np . diag ( constraint_margin_weights ) q_rho = np . zeros ( P_rho . shape [ 0 ]) #u_rho_init = np.linalg.lstsq(A_total_rho, b_total - 1e-1, rcond=-1)[0] u_rho = cvxopt_solve_qp ( P_rho . astype ( np . float64 ), q_rho . astype ( np . float64 ), G = A_total_rho . astype ( np . float64 ), h = b_total . astype ( np . float64 ), show_progress = False , maxiters = 1000 ) if u_rho is None : raise RuntimeError ( \"\"\"QP is infeasible minimize u_rho\u1d40 {P_rho} u_rho s.t. {A_total_rho} u_rho \u2264 {b_total} \"\"\" . format ( P_rho = P_rho , A_total_rho = A_total_rho , b_total = b_total )) # Constraints should be satisfied constraint = A_total_rho @ u_rho - b_total assert np . all (( constraint <= 1e-2 ) | ( constraint / np . abs ( b_total ) <= 1e-2 )) return torch . from_numpy ( u_rho [: D_u ]) . to ( dtype = x . dtype )","title":"pendulum"},{"location":"reference/bayes_cbf/pendulum/#bayes_cbf.pendulum.run_pendulum_control_cbf_clf","text":"Run pendulum with a safe CLF-CBF controller.","title":"run_pendulum_control_cbf_clf"},{"location":"reference/bayes_cbf/pendulum/#bayes_cbf.pendulum.run_pendulum_control_online_learning","text":"Run save pendulum control while learning the parameters online","title":"run_pendulum_control_online_learning"},{"location":"reference/bayes_cbf/pendulum/#bayes_cbf.pendulum.run_pendulum_control_trival","text":"Run pendulum with a trivial controller.","title":"run_pendulum_control_trival"},{"location":"reference/bayes_cbf/pendulum/#bayes_cbf.pendulum.ControlCBFCLFGroundTruth","text":"Bases: ControlPendulumCBFLearned Controller that avoids learning but uses the ground truth model Source code in bayes_cbf/pendulum.py 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 class ControlCBFCLFGroundTruth ( ControlPendulumCBFLearned ): \"\"\" Controller that avoids learning but uses the ground truth model \"\"\" needs_ground_truth = False def __init__ ( self , * a , ** kw ): assert kw . pop ( \"use_ground_truth_model\" , False ) is False super () . __init__ ( * a , use_ground_truth_model = True , mean_dynamics_model_class = PendulumDynamicsModel , ** kw )","title":"ControlCBFCLFGroundTruth"},{"location":"reference/bayes_cbf/pendulum/#bayes_cbf.pendulum.control_QP_cbf_clf","text":"Parameters: Name Type Description Default A_cbfs A tuple of CBF functions required b_cbfs A tuple of CBF functions required constraint_margin_weights Add a margin constant to the constraint that is maximized. [] Source code in bayes_cbf/pendulum.py 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 def control_QP_cbf_clf ( x , ctrl_aff_constraints , constraint_margin_weights = []): \"\"\" Args: A_cbfs: A tuple of CBF functions b_cbfs: A tuple of CBF functions constraint_margin_weights: Add a margin constant to the constraint that is maximized. \"\"\" #import ipdb; ipdb.set_trace() clf_idx = 0 A_total = np . vstack ([ af . A ( x ) . detach () . numpy () for af in ctrl_aff_constraints ]) b_total = np . vstack ([ af . b ( x ) . detach () . numpy () for af in ctrl_aff_constraints ]) . flatten () D_u = A_total . shape [ 1 ] N_const = A_total . shape [ 0 ] # u0 = l*g*sin(theta) # uopt = 0.1*g # contraints = A_total.dot(uopt) - b_total # assert contraints[0] <= 0 # assert contraints[1] <= 0 # assert contraints[2] <= 0 # [A, I][ u ] # [ \u03c1 ] \u2264 b for all constraints # # minimize # [ u, \u03c11, \u03c12 ] [ 1, 0] [ u ] # [ 0, 100] [ \u03c12 ] # [A_cbf, 1] [ u, -\u03c1 ] \u2264 b_cbf # [A_clf, 1] [ u, -\u03c1 ] \u2264 b_clf N_slack = len ( constraint_margin_weights ) A_total_rho = np . hstack ( ( A_total , np . vstack (( - np . eye ( N_slack ), np . zeros (( N_const - N_slack , N_slack )))) )) A = A_total P_rho = np . eye ( D_u + N_slack ) P_rho [ D_u :, D_u :] = np . diag ( constraint_margin_weights ) q_rho = np . zeros ( P_rho . shape [ 0 ]) #u_rho_init = np.linalg.lstsq(A_total_rho, b_total - 1e-1, rcond=-1)[0] u_rho = cvxopt_solve_qp ( P_rho . astype ( np . float64 ), q_rho . astype ( np . float64 ), G = A_total_rho . astype ( np . float64 ), h = b_total . astype ( np . float64 ), show_progress = False , maxiters = 1000 ) if u_rho is None : raise RuntimeError ( \"\"\"QP is infeasible minimize u_rho\u1d40 {P_rho} u_rho s.t. {A_total_rho} u_rho \u2264 {b_total} \"\"\" . format ( P_rho = P_rho , A_total_rho = A_total_rho , b_total = b_total )) # Constraints should be satisfied constraint = A_total_rho @ u_rho - b_total assert np . all (( constraint <= 1e-2 ) | ( constraint / np . abs ( b_total ) <= 1e-2 )) return torch . from_numpy ( u_rho [: D_u ]) . to ( dtype = x . dtype )","title":"control_QP_cbf_clf()"},{"location":"reference/bayes_cbf/planner/","text":"","title":"planner"},{"location":"reference/bayes_cbf/plotting/","text":"angle_from_rotmat ( R ) theta = np.random.rand() * 2*np.pi - np.pi thetae = angle_from_rotmat(rotmat2D(theta)) np.allclose(thetae, theta) True Source code in bayes_cbf/plotting.py 189 190 191 192 193 194 195 196 def angle_from_rotmat ( R ): \"\"\" >>> theta = np.random.rand() * 2*np.pi - np.pi >>> thetae = angle_from_rotmat(rotmat2D(theta)) >>> np.allclose(thetae, theta) True \"\"\" return np . arctan2 ( R [ 1 , 0 ], R [ 0 , 0 ]) var_to_scale_theta ( V ) scale = np.abs(np.random.rand(2)) * 10 theta = np.random.rand() * (2*np.pi) - np.pi s, t = var_to_scale_theta(scale_theta_to_var(scale, theta)) allclose = partial(np.allclose, rtol=1e-2, atol=1e-5) allclose(s, scale) True allclose(t, theta) True Source code in bayes_cbf/plotting.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def var_to_scale_theta ( V ): \"\"\" >>> scale = np.abs(np.random.rand(2)) * 10 >>> theta = np.random.rand() * (2*np.pi) - np.pi >>> s, t = var_to_scale_theta(scale_theta_to_var(scale, theta)) >>> allclose = partial(np.allclose, rtol=1e-2, atol=1e-5) >>> allclose(s, scale) True >>> allclose(t, theta) True \"\"\" w , E = np . linalg . eig ( V ) scale = 3 * w theta = angle_from_rotmat ( E ) return scale , theta","title":"plotting"},{"location":"reference/bayes_cbf/plotting/#bayes_cbf.plotting.angle_from_rotmat","text":"theta = np.random.rand() * 2*np.pi - np.pi thetae = angle_from_rotmat(rotmat2D(theta)) np.allclose(thetae, theta) True Source code in bayes_cbf/plotting.py 189 190 191 192 193 194 195 196 def angle_from_rotmat ( R ): \"\"\" >>> theta = np.random.rand() * 2*np.pi - np.pi >>> thetae = angle_from_rotmat(rotmat2D(theta)) >>> np.allclose(thetae, theta) True \"\"\" return np . arctan2 ( R [ 1 , 0 ], R [ 0 , 0 ])","title":"angle_from_rotmat()"},{"location":"reference/bayes_cbf/plotting/#bayes_cbf.plotting.var_to_scale_theta","text":"scale = np.abs(np.random.rand(2)) * 10 theta = np.random.rand() * (2*np.pi) - np.pi s, t = var_to_scale_theta(scale_theta_to_var(scale, theta)) allclose = partial(np.allclose, rtol=1e-2, atol=1e-5) allclose(s, scale) True allclose(t, theta) True Source code in bayes_cbf/plotting.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def var_to_scale_theta ( V ): \"\"\" >>> scale = np.abs(np.random.rand(2)) * 10 >>> theta = np.random.rand() * (2*np.pi) - np.pi >>> s, t = var_to_scale_theta(scale_theta_to_var(scale, theta)) >>> allclose = partial(np.allclose, rtol=1e-2, atol=1e-5) >>> allclose(s, scale) True >>> allclose(t, theta) True \"\"\" w , E = np . linalg . eig ( V ) scale = 3 * w theta = angle_from_rotmat ( E ) return scale , theta","title":"var_to_scale_theta()"},{"location":"reference/bayes_cbf/sampling/","text":"","title":"sampling"},{"location":"reference/bayes_cbf/trigger_interval/","text":"","title":"trigger_interval"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/","text":"Move to specified pose Daniel Ingram (daniel-s-ingram) Atsushi Sakai(@Atsushi_twi) Vikas Dhiman (github.com/wecacuee) P. I. Corke, \"Robotics, Vision & Control\", Springer 2017, ISBN 978-3-319-54413-7 AckermannDrive DynamicsModel for AckermannDrive x\u0307 = v cos(\u03b8) y\u0307 = v sin(\u03b8) \u03b8\u0307 = (v/L) tan(\u03d5) L is the distance between front and back wheels state = [x, y, \u03b8] input = [v, v tan(\u03d5)] Source code in bayes_cbf/unicycle_move_to_pose.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 class AckermannDrive : \"\"\" DynamicsModel for AckermannDrive x\u0307 = v cos(\u03b8) y\u0307 = v sin(\u03b8) \u03b8\u0307 = (v/L) tan(\u03d5) L is the distance between front and back wheels state = [x, y, \u03b8] input = [v, v tan(\u03d5)] \"\"\" state_size = 3 ctrl_size = 2 def __init__ ( self , L = 0.2 , kernel_diag_A = [ 1.0 , 1.0 , 1.0 ]): self . L = L self . current_state = None self . kernel_diag_A = torch . tensor ( kernel_diag_A ) def set_init_state ( self , x ): self . current_state = x def f_func ( self , x ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] \"\"\" return torch . zeros_like ( x ) def g_func ( self , state_in ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] \"\"\" assert state_in . shape [ - 1 ] == self . state_size state = state_in . unsqueeze ( 0 ) if state_in . dim () <= 1 else state_in x , y , theta = state [ ... , 0 : 1 ], state [ ... , 1 : 2 ], state [ ... , 2 : 3 ] theta_cos = theta . cos () . unsqueeze ( - 1 ) theta_sin = theta . sin () . unsqueeze ( - 1 ) zeros_ = torch . zeros_like ( theta_cos ) inv_L = torch . ones_like ( theta_cos ) / self . L gX = torch . cat ([ torch . cat ([ theta_cos , zeros_ ], dim =- 1 ), torch . cat ([ theta_sin , zeros_ ], dim =- 1 ), torch . cat ([ zeros_ , inv_L ], dim =- 1 )], dim =- 2 ) return gX . squeeze ( 0 ) if state_in . dim () <= 1 else gX def F_func ( self , X ): return torch . cat ([ self . f_func ( X ) . unsqueeze ( - 1 ), self . g_func ( X )], dim =- 1 ) def fu_func_gp ( self , u ): f , g = self . f_func , self . g_func n = self . state_size self . kernel_diag_A = torch_to ( self . kernel_diag_A , device = u . device , dtype = u . dtype ) A = torch . diag ( self . kernel_diag_A ) u_hom = torch . cat ([ torch . tensor ([ 1. ]), u ]) B = torch . eye ( self . ctrl_size + 1 ) return GaussianProcess ( mean = lambda x : f ( x ) + g ( x ) @ u , knl = lambda x , xp : ( u_hom @ B @ u_hom ) * A , shape = ( n ,), name = \"AckermannDrive\" ) def step ( self , u_torch , dt ): x = self . current_state xdot = self . f_func ( x ) + self . g_func ( x ) @ u_torch self . current_state = x + xdot * dt return dict ( xdot = xdot , x = self . current_state ) def custom_predict_fullmat ( self , X ): A = torch . diag ( self . kernel_diag_A ) B = torch . eye ( self . ctrl_size + 1 ) b = X . shape [ 0 ] if X . ndim > 1 else 1 bI = torch . eye ( b ) return ( self . F_func ( X ) . transpose ( - 2 , - 1 ) . reshape ( - 1 ), torch_kron ( bI , torch_kron ( B , A , batch_dims = 0 ), batch_dims = 0 )) f_func ( x ) s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] Source code in bayes_cbf/unicycle_move_to_pose.py 222 223 224 225 226 227 228 229 230 231 232 233 def f_func ( self , x ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] \"\"\" return torch . zeros_like ( x ) g_func ( state_in ) s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] Source code in bayes_cbf/unicycle_move_to_pose.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def g_func ( self , state_in ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] \"\"\" assert state_in . shape [ - 1 ] == self . state_size state = state_in . unsqueeze ( 0 ) if state_in . dim () <= 1 else state_in x , y , theta = state [ ... , 0 : 1 ], state [ ... , 1 : 2 ], state [ ... , 2 : 3 ] theta_cos = theta . cos () . unsqueeze ( - 1 ) theta_sin = theta . sin () . unsqueeze ( - 1 ) zeros_ = torch . zeros_like ( theta_cos ) inv_L = torch . ones_like ( theta_cos ) / self . L gX = torch . cat ([ torch . cat ([ theta_cos , zeros_ ], dim =- 1 ), torch . cat ([ theta_sin , zeros_ ], dim =- 1 ), torch . cat ([ zeros_ , inv_L ], dim =- 1 )], dim =- 2 ) return gX . squeeze ( 0 ) if state_in . dim () <= 1 else gX CLFCartesian Source code in bayes_cbf/unicycle_move_to_pose.py 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 class CLFCartesian : def __init__ ( self , Kp = torch . tensor ([ 9. , 15. , 40. ]) / 10. ): self . Kp = Kp def clf_terms ( self , state , state_goal ): rho , alpha , beta = cartesian2polar ( state , state_goal ) x , y , theta = state x_goal , y_goal , theta_goal = state_goal return torch . tensor (( 0.5 * self . Kp [ 0 ] * rho ** 2 , self . Kp [ 1 ] * ( 1 - torch . cos ( alpha )), self . Kp [ 2 ] * ( 1 - torch . cos ( beta )) )) def _grad_clf_terms_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[0], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[1], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[2], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x_diff , y_diff , theta_diff = state_goal - state rho , alpha , beta = cartesian2polar ( state , state_goal ) return torch . tensor ([[ self . Kp [ 0 ] * x_diff , self . Kp [ 1 ] * torch . sin ( alpha ) * y_diff / ( rho ** 2 ), self . Kp [ 2 ] * torch . sin ( beta ) * y_diff / ( rho ** 2 ) ], [ self . Kp [ 0 ] * y_diff , - self . Kp [ 1 ] * torch . sin ( alpha ) * x_diff / ( rho ** 2 ), - self . Kp [ 2 ] * torch . sin ( beta ) * x_diff / ( rho ** 2 )], [ 0 , 0 , self . Kp [ 2 ] * torch . sin ( beta )] ]) def _grad_clf_terms ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[0], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[1], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[2], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x_diff , y_diff , theta_diff = state_goal - state rho , alpha , beta = cartesian2polar ( state , state_goal ) return torch . tensor ([[ - self . Kp [ 0 ] * x_diff , - self . Kp [ 1 ] * torch . sin ( alpha ) * y_diff / ( rho ** 2 ), - self . Kp [ 2 ] * torch . sin ( beta ) * y_diff / ( rho ** 2 ) ], [ - self . Kp [ 0 ] * y_diff , self . Kp [ 1 ] * torch . sin ( alpha ) * x_diff / ( rho ** 2 ), self . Kp [ 2 ] * torch . sin ( beta ) * x_diff / ( rho ** 2 )], [ 0 , self . Kp [ 1 ] * torch . sin ( alpha ), 0 ] ]) def grad_clf ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, x0_goal) >>> njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( state , state_goal ) . sum ( axis =- 1 ) def grad_clf_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf_wrt_goal(x0, x0_goal) >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms_wrt_goal ( state , state_goal ) . sum ( axis =- 1 ) def isconverged ( self , x , state_goal ): rho , alpha , beta = cartesian2polar ( x , state_goal ) return rho < 1e-3 grad_clf ( state , state_goal ) self = CLFCartesian() x0 = torch.rand(3) x0_goal = torch.rand(3) ajac = self.grad_clf(x0, x0_goal) njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 590 591 592 593 594 595 596 597 598 599 def grad_clf ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, x0_goal) >>> njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( state , state_goal ) . sum ( axis =- 1 ) grad_clf_wrt_goal ( state , state_goal ) self = CLFCartesian() x0 = torch.rand(3) x0_goal = torch.rand(3) ajac = self.grad_clf_wrt_goal(x0, x0_goal) njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 601 602 603 604 605 606 607 608 609 610 def grad_clf_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf_wrt_goal(x0, x0_goal) >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms_wrt_goal ( state , state_goal ) . sum ( axis =- 1 ) CLFPolar Source code in bayes_cbf/unicycle_move_to_pose.py 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 class CLFPolar : def __init__ ( self , Kp = torch . tensor ([ 6. , 15. , 40. , 0. ]) / 10. ): self . Kp = Kp def clf_terms ( self , polar , state_goal ): return self . _clf_terms ( polar , state_goal ) def _clf_terms ( self , polar , state_goal ): rho , alpha , beta = polar return torch . tensor (( 0.5 * self . Kp [ 0 ] * rho ** 2 , self . Kp [ 1 ] * cosdist ( alpha , 0 ), self . Kp [ 2 ] * cosdist ( beta , 0 ), self . Kp [ 3 ] * ( 1 - torch . cos ( beta - alpha )) )) def grad_clf ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> state_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, state_goal) >>> njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( polar , state_goal ) . sum ( axis =- 1 ) def grad_clf_wrt_goal ( self , polar , state_goal ): return torch . zeros_like ( state_goal ) def _grad_clf_terms ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[0], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[1], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[2], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 3] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[3], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" rho , alpha , beta = polar return torch . tensor ([[ self . Kp [ 0 ] * rho , 0 , 0 , 0 ], [ 0 , self . Kp [ 1 ] * torch . sin ( alpha ), 0 , - self . Kp [ 3 ] * torch . sin ( beta - alpha )], [ 0 , 0 , self . Kp [ 2 ] * torch . sin ( beta ), self . Kp [ 3 ] * torch . sin ( beta - alpha )]]) def isconverged ( self , x , state_goal ): rho , alpha , beta = cartesian2polar ( x , state_goal ) return rho < 1e-3 grad_clf ( polar , state_goal ) self = CLFPolar() x0 = torch.rand(3) state_goal = torch.rand(3) ajac = self.grad_clf(x0, state_goal) njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 458 459 460 461 462 463 464 465 466 467 def grad_clf ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> state_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, state_goal) >>> njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( polar , state_goal ) . sum ( axis =- 1 ) ControllerCLF Aicardi, M., Casalino, G., Bicchi, A., & Balestrino, A. (1995). Closed loop steering of unicycle like vehicles via Lyapunov techniques. IEEE Robotics & Automation Magazine, 2(1), 27-35. Source code in bayes_cbf/unicycle_move_to_pose.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 class ControllerCLF : \"\"\" Aicardi, M., Casalino, G., Bicchi, A., & Balestrino, A. (1995). Closed loop steering of unicycle like vehicles via Lyapunov techniques. IEEE Robotics & Automation Magazine, 2(1), 27-35. \"\"\" def __init__ ( self , # simulation parameters planner , u_dim = 2 , coordinate_converter = None , # cartesian2polar/ lambda x, xg: x dynamics = None , # PolarDynamics()/CartesianDynamics() clf = None , # CLFPolar()/CLFCartesian() clf_gamma = 10 , clf_relax_weight = 10 , cbfs = [], cbf_gammas = [], max_risk = 1e-2 , visualizer = None ): self . planner = planner self . u_dim = 2 self . coordinate_converter = coordinate_converter self . dynamics = dynamics self . clf = clf self . clf_gamma = 10 self . clf_relax_weight = 10 self . cbfs = cbfs self . cbf_gammas = cbf_gammas self . max_risk = max_risk self . visualizer = visualizer @property def model ( self ): return self . dynamics def _clc ( self , x , state_goal , t ): polar = self . coordinate_converter ( x , state_goal ) fx = self . dynamics . f_func ( polar ) gx = self . dynamics . g_func ( polar ) gclf = self . clf . grad_clf ( polar , state_goal ) gclf_goal = self . clf . grad_clf_wrt_goal ( polar , state_goal ) TBLOG . add_scalar ( \"x_0\" , x [ 0 ], t ) bfa = to_numpy ( gclf @ gx ) b = to_numpy ( gclf @ fx + gclf_goal @ self . planner . dot_plan ( t ) + self . clf_gamma * self . clf . clf_terms ( polar , state_goal ) . sum ()) return bfa , b def _cbcs ( self , x_in , state_goal , t ): x = self . coordinate_converter ( x_in , state_goal ) fx = self . dynamics . f_func ( x ) gx = self . dynamics . g_func ( x ) for cbf , cbf_gamma in zip ( self . cbfs , self . cbf_gammas ): gcbf = cbf . grad_cbf ( x ) cbfx = cbf . cbf ( x ) TBLOG . add_scalar ( \"cbf\" , cbfx , t ) yield to_numpy ( gcbf @ gx ), to_numpy ( gcbf @ fx + cbf_gamma * cbfx ) def _ctrl_ref ( self , x , u ): return np . zeros_like ( x ) def control ( self , x_torch , t ): state_goal = self . planner . plan ( t ) import cvxpy as cp # pip install cvxpy x = x_torch uvar = cp . Variable ( self . u_dim ) uvar . value = np . zeros ( self . u_dim ) relax = cp . Variable ( 1 ) obj = cp . Minimize ( cp . sum_squares ( uvar ) + self . clf_relax_weight * relax ) clc_bfa , clc_b = self . _clc ( x , state_goal , t ) constraints = [ uvar >= np . array ([ - 10. , - np . pi * 5 ]), uvar <= np . array ([ 10. , np . pi * 5 ]), clc_bfa @ uvar + clc_b - relax <= 0 ] for cbc_bfa , cbc_b in self . _cbcs ( x , state_goal , t ): constraints . append ( cbc_bfa @ uvar + cbc_b >= 0 ) problem = cp . Problem ( obj , constraints ) problem . solve ( solver = 'GUROBI' ) if problem . status not in [ \"infeasible\" , \"unbounded\" ]: # Otherwise, problem.value is inf or -inf, respectively. # print(\"Optimal value: %s\" % problem.value) pass else : raise ValueError ( problem . status ) # for variable in problem.variables(): # print(\"Variable %s: value %s\" % (variable.name(), variable.value)) uopt = torch_to ( torch . from_numpy ( uvar . value ), device = getattr ( x_torch , 'device' , None ), dtype = x_torch . dtype ) if hasattr ( self . dynamics , 'train' ): self . dynamics . train ( x_torch , uopt ) return uopt def isconverged ( self , state , state_goal ): return self . clf . isconverged ( state , state_goal ) ObstacleCBF Source code in bayes_cbf/unicycle_move_to_pose.py 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 class ObstacleCBF : def __init__ ( self , center , radius , term_weights = [ 0.5 , 0.5 ]): self . center = center self . radius = radius self . term_weights = term_weights def _cbf_radial ( self , state ): return (( state [: 2 ] - self . center ) ** 2 ) . sum () - self . radius ** 2 def _cbf_heading ( self , state ): good_heading = state [: 2 ] - self . center good_heading_norm = good_heading / torch . norm ( good_heading ) return torch . cos ( state [ 2 ]) * good_heading_norm [ 0 ] + torch . sin ( state [ 2 ]) * good_heading_norm [ 1 ] def _cbf_terms ( self , state ): return [ self . _cbf_radial ( state ), self . _cbf_heading ( state )] def cbf ( self , state ): self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _cbf_terms ( state ))) def _grad_cbf_radial ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self._grad_cbf_radial(x0) >>> njac = numerical_jac(lambda x: self._cbf_radial(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" gcbf = torch . zeros_like ( state ) gcbf [ ... , : 2 ] = 2 * ( state [ ... , : 2 ] - self . center ) return gcbf def _grad_cbf_heading ( self , state ): \"\"\" \u03b1 = atan2(y, x) [\u2202 cos(\u03b1-\u03b8), \u2202 cos(\u03b1 - \u03b8) \u2202 cos(\u03b8 - \u03b1) ] [------------, ------------, ----------- ] [\u2202 x \u2202 y \u2202 \u03b8 ] >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self._grad_cbf_heading(x0) >>> njac = numerical_jac(lambda x: self._cbf_heading(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" gcbf = torch . zeros_like ( state ) \u03b8 = state [ ... , 2 ] good_heading = state [ ... , : 2 ] - self . center \u03c1 = torch . norm ( good_heading ) \u03b1 = torch . atan2 ( good_heading [ ... , 1 ], good_heading [ ... , 0 ]) # \u2202 / \u2202 x cos(\u03b1-\u03b8) = sin(\u03b1 - \u03b8) y / \u03c1\u00b2 gcbf [ ... , 0 ] = ( \u03b1 - \u03b8 ) . sin () * good_heading [ ... , 1 ] / \u03c1 ** 2 # \u2202 / \u2202 y cos(\u03b1-\u03b8) = - sin(\u03b1 - \u03b8) x / \u03c1\u00b2 gcbf [ ... , 1 ] = - ( \u03b1 - \u03b8 ) . sin () * good_heading [ ... , 0 ] / \u03c1 ** 2 # \u2202 / \u2202 \u03b8 cos(\u03b8-\u03b1) = - sin(\u03b8 - \u03b1) gcbf [ ... , 2 ] = - ( \u03b8 - \u03b1 ) . sin () return gcbf def _grad_cbf_terms ( self , state ): return [ self . _grad_cbf_radial ( state ), self . _grad_cbf_heading ( state )] def grad_cbf ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self.grad_cbf(x0) >>> njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _grad_cbf_terms ( state ))) grad_cbf ( state ) self = ObstacleCBF(torch.rand(2), torch.rand(1)) x0 = torch.rand(3) ajac = self.grad_cbf(x0) njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 def grad_cbf ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self.grad_cbf(x0) >>> njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _grad_cbf_terms ( state ))) cartesian2polar ( state , state_goal ) rho is the distance between the robot and the goal position : \\sqrt((x -x)^2 + (y -y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y -y),(x -x)) beta is the goal position relative to the angle to the goal : theta - atan2((y -y),(x*-x)) state = torch.rand(3) torch.tensor([2, 2, 2 math.pi]) - torch.tensor([1, 1, math.pi]) state_goal = torch.rand(3) torch.tensor([2, 2, 2 math.pi]) - torch.tensor([1, 1, math.pi]) polar = cartesian2polar(state, state_goal) statep = polar2cartesian(polar, state_goal) testing.assert_allclose(state, statep) Source code in bayes_cbf/unicycle_move_to_pose.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def cartesian2polar ( state : CartesianState , state_goal : CartesianState ) -> PolarState : \"\"\" rho is the distance between the robot and the goal position : \\sqrt((x*-x)^2 + (y*-y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y*-y),(x*-x)) beta is the goal position relative to the angle to the goal : theta* - atan2((y*-y),(x*-x)) >>> state = torch.rand(3)* torch.tensor([2, 2, 2*math.pi]) - torch.tensor([1, 1, math.pi]) >>> state_goal = torch.rand(3)* torch.tensor([2, 2, 2*math.pi]) - torch.tensor([1, 1, math.pi]) >>> polar = cartesian2polar(state, state_goal) >>> statep = polar2cartesian(polar, state_goal) >>> testing.assert_allclose(state, statep) \"\"\" x , y , theta = state x_goal , y_goal , theta_goal = state_goal x_diff = x_goal - x y_diff = y_goal - y # reparameterization rho = torch . sqrt ( x_diff ** 2 + y_diff ** 2 ) assert rho . abs () > 1e-6 , \"Invalid conversion\" phi = torch . atan2 ( y_diff , x_diff ) alpha = angdiff ( theta , phi ) beta = angdiff ( theta_goal , phi ) return torch . tensor (( rho , alpha , beta )) move_to_pose ( state_start , state_goal , dt = 0.01 , show_animation = True , controller = None , dynamics = CartesianDynamics (), visualizer = None ) rho is the distance between the robot and the goal position alpha is the angle to the goal relative to the heading of the robot beta is the angle between the robot's position and the goal position plus the goal angle Kp_rho rho and Kp_alpha alpha drive the robot along a line towards the goal Kp_beta*beta rotates the line so that it is parallel to the goal angle Source code in bayes_cbf/unicycle_move_to_pose.py 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 def move_to_pose ( state_start , state_goal , dt = 0.01 , show_animation = True , controller = None , dynamics = CartesianDynamics (), visualizer = None ): \"\"\" rho is the distance between the robot and the goal position alpha is the angle to the goal relative to the heading of the robot beta is the angle between the robot's position and the goal position plus the goal angle Kp_rho*rho and Kp_alpha*alpha drive the robot along a line towards the goal Kp_beta*beta rotates the line so that it is parallel to the goal angle \"\"\" visualizer = ( Visualizer ( NoPlanner ( state_goal ), dt ) if visualizer is None else visualizer ) state = state_start . clone () count = 0 dynamics . set_init_state ( state ) while not controller . isconverged ( state , state_goal ): x , y , theta = state # control ctrl = controller . control ( state , t = count ) # simulation state = dynamics . step ( ctrl , dt )[ 'x' ] if show_animation : # pragma: no cover visualizer . setStateCtrl ( state , ctrl , t = count ) count = count + 1 numerical_jac ( func , x0_in , eps , dtype = torch . float64 ) def func(x): return torch.tensor([torch.cos(x[0]), torch.sin(x[1])]) def jacfunc(x): return torch.tensor([[-torch.sin(x[0]), 0], [0, torch.cos(x[1])]]) x0 = torch.rand(2) njac = numerical_jac(func, x0, 1e-6) ajac = jacfunc(x0) testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 def numerical_jac ( func , x0_in , eps , dtype = torch . float64 ): \"\"\" >>> def func(x): return torch.tensor([torch.cos(x[0]), torch.sin(x[1])]) >>> def jacfunc(x): return torch.tensor([[-torch.sin(x[0]), 0], [0, torch.cos(x[1])]]) >>> x0 = torch.rand(2) >>> njac = numerical_jac(func, x0, 1e-6) >>> ajac = jacfunc(x0) >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x0 = torch_to ( x0_in , dtype = dtype ) f0 = func ( x0 ) m = f0 . shape [ - 1 ] if len ( f0 . shape ) else 1 jac = torch . empty (( m , x0 . shape [ - 1 ]), dtype = x0 . dtype ) Dx = eps * torch . eye ( x0 . shape [ - 1 ], dtype = x0 . dtype ) XpDx = x0 + Dx for c in range ( x0 . shape [ - 1 ]): jac [:, c : c + 1 ] = ( func ( XpDx [ c , :]) . reshape ( - 1 , 1 ) - f0 . reshape ( - 1 , 1 )) / eps return torch_to ( jac , dtype = x0_in . dtype , device = getattr ( x0_in , 'device' , None )) polar2cartesian ( x , state_goal ) rho is the distance between the robot and the goal position : \\sqrt((x -x)^2 + (y -y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y -y),(x -x)) beta is the goal position relative to the angle to the goal : theta - atan2((y -y),(x*-x)) polar = (torch.rand(3) * torch.tensor([1, 2 math.pi, 2 math.pi]) - ... torch.tensor([0, math.pi, math.pi])) state_goal = (torch.rand(3) * torch.tensor([2, 2, 2*math.pi]) - ... torch.tensor([1, 1, math.pi])) state = polar2cartesian(polar, state_goal) polarp = cartesian2polar(state, state_goal) testing.assert_allclose(polar, polarp) Source code in bayes_cbf/unicycle_move_to_pose.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def polar2cartesian ( x : PolarState , state_goal : CartesianState ) -> CartesianState : \"\"\" rho is the distance between the robot and the goal position : \\sqrt((x*-x)^2 + (y*-y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y*-y),(x*-x)) beta is the goal position relative to the angle to the goal : theta* - atan2((y*-y),(x*-x)) >>> polar = (torch.rand(3) * torch.tensor([1, 2*math.pi, 2*math.pi]) - ... torch.tensor([0, math.pi, math.pi])) >>> state_goal = (torch.rand(3) * torch.tensor([2, 2, 2*math.pi]) - ... torch.tensor([1, 1, math.pi])) >>> state = polar2cartesian(polar, state_goal) >>> polarp = cartesian2polar(state, state_goal) >>> testing.assert_allclose(polar, polarp) \"\"\" rho , alpha , beta = x x_goal , y_goal , theta_goal = state_goal phi = angdiff ( theta_goal , beta ) theta = normalize_radians ( phi + alpha ) x_diff = rho * torch . cos ( phi ) y_diff = rho * torch . sin ( phi ) return torch . tensor ([ x_goal - x_diff , y_goal - y_diff , theta ]) track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermannDrive , L = 10.0 ), true_dynamics_gen = partial ( AckermannDrive , L = 1.0 ), visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ) mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermannDrive(L = 10.0) Source code in bayes_cbf/unicycle_move_to_pose.py 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 def track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermannDrive , L = 10.0 ), true_dynamics_gen = partial ( AckermannDrive , L = 1.0 ), visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ): \"\"\" mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermannDrive(L = 10.0) \"\"\" visualizer = visualizer_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt ), dt , cbfs = cbfs ( x , x_g ) ) return sample_generator_trajectory ( dynamics_model = true_dynamics_gen (), D = numSteps , controller = controller_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt , frac_time_to_reach_goal = 0.95 ), coordinate_converter = lambda x , x_g : x , dynamics = LearnedShiftInvariantDynamics ( dt = dt , mean_dynamics = mean_dynamics_gen (), enable_learning = enable_learning , train_every_n_steps = train_every_n_steps ), # dynamics = ZeroDynamicsBayesian(m = 2, n = 3), clf = CLFCartesian ( Kp = torch . tensor ([ 0.9 , 1.5 , 0. ]) ), cbfs = cbfs ( x , x_g ), cbf_gammas = cbf_gammas , visualizer = visualizer ) . control , visualizer = visualizer , x0 = x , dt = dt , ** kw )","title":"unicycle_move_to_pose"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.AckermannDrive","text":"DynamicsModel for AckermannDrive x\u0307 = v cos(\u03b8) y\u0307 = v sin(\u03b8) \u03b8\u0307 = (v/L) tan(\u03d5) L is the distance between front and back wheels state = [x, y, \u03b8] input = [v, v tan(\u03d5)] Source code in bayes_cbf/unicycle_move_to_pose.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 class AckermannDrive : \"\"\" DynamicsModel for AckermannDrive x\u0307 = v cos(\u03b8) y\u0307 = v sin(\u03b8) \u03b8\u0307 = (v/L) tan(\u03d5) L is the distance between front and back wheels state = [x, y, \u03b8] input = [v, v tan(\u03d5)] \"\"\" state_size = 3 ctrl_size = 2 def __init__ ( self , L = 0.2 , kernel_diag_A = [ 1.0 , 1.0 , 1.0 ]): self . L = L self . current_state = None self . kernel_diag_A = torch . tensor ( kernel_diag_A ) def set_init_state ( self , x ): self . current_state = x def f_func ( self , x ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] \"\"\" return torch . zeros_like ( x ) def g_func ( self , state_in ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] \"\"\" assert state_in . shape [ - 1 ] == self . state_size state = state_in . unsqueeze ( 0 ) if state_in . dim () <= 1 else state_in x , y , theta = state [ ... , 0 : 1 ], state [ ... , 1 : 2 ], state [ ... , 2 : 3 ] theta_cos = theta . cos () . unsqueeze ( - 1 ) theta_sin = theta . sin () . unsqueeze ( - 1 ) zeros_ = torch . zeros_like ( theta_cos ) inv_L = torch . ones_like ( theta_cos ) / self . L gX = torch . cat ([ torch . cat ([ theta_cos , zeros_ ], dim =- 1 ), torch . cat ([ theta_sin , zeros_ ], dim =- 1 ), torch . cat ([ zeros_ , inv_L ], dim =- 1 )], dim =- 2 ) return gX . squeeze ( 0 ) if state_in . dim () <= 1 else gX def F_func ( self , X ): return torch . cat ([ self . f_func ( X ) . unsqueeze ( - 1 ), self . g_func ( X )], dim =- 1 ) def fu_func_gp ( self , u ): f , g = self . f_func , self . g_func n = self . state_size self . kernel_diag_A = torch_to ( self . kernel_diag_A , device = u . device , dtype = u . dtype ) A = torch . diag ( self . kernel_diag_A ) u_hom = torch . cat ([ torch . tensor ([ 1. ]), u ]) B = torch . eye ( self . ctrl_size + 1 ) return GaussianProcess ( mean = lambda x : f ( x ) + g ( x ) @ u , knl = lambda x , xp : ( u_hom @ B @ u_hom ) * A , shape = ( n ,), name = \"AckermannDrive\" ) def step ( self , u_torch , dt ): x = self . current_state xdot = self . f_func ( x ) + self . g_func ( x ) @ u_torch self . current_state = x + xdot * dt return dict ( xdot = xdot , x = self . current_state ) def custom_predict_fullmat ( self , X ): A = torch . diag ( self . kernel_diag_A ) B = torch . eye ( self . ctrl_size + 1 ) b = X . shape [ 0 ] if X . ndim > 1 else 1 bI = torch . eye ( b ) return ( self . F_func ( X ) . transpose ( - 2 , - 1 ) . reshape ( - 1 ), torch_kron ( bI , torch_kron ( B , A , batch_dims = 0 ), batch_dims = 0 ))","title":"AckermannDrive"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.AckermannDrive.f_func","text":"s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] Source code in bayes_cbf/unicycle_move_to_pose.py 222 223 224 225 226 227 228 229 230 231 232 233 def f_func ( self , x ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ 0 ] f(s) = [ 0 ] [ 0 ] \"\"\" return torch . zeros_like ( x )","title":"f_func()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.AckermannDrive.g_func","text":"s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] Source code in bayes_cbf/unicycle_move_to_pose.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def g_func ( self , state_in ): \"\"\" s\u0307 = f(s) + G(s) u s = [x, y, \u03b8] u = [v, v tan(\u03d5)] [ cos(\u03b8) , 0 ] G(s)u = [ sin(\u03b8) , 0 ] [ v ] [ 0 1/L] [ v tan(\u00f8) ] \"\"\" assert state_in . shape [ - 1 ] == self . state_size state = state_in . unsqueeze ( 0 ) if state_in . dim () <= 1 else state_in x , y , theta = state [ ... , 0 : 1 ], state [ ... , 1 : 2 ], state [ ... , 2 : 3 ] theta_cos = theta . cos () . unsqueeze ( - 1 ) theta_sin = theta . sin () . unsqueeze ( - 1 ) zeros_ = torch . zeros_like ( theta_cos ) inv_L = torch . ones_like ( theta_cos ) / self . L gX = torch . cat ([ torch . cat ([ theta_cos , zeros_ ], dim =- 1 ), torch . cat ([ theta_sin , zeros_ ], dim =- 1 ), torch . cat ([ zeros_ , inv_L ], dim =- 1 )], dim =- 2 ) return gX . squeeze ( 0 ) if state_in . dim () <= 1 else gX","title":"g_func()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.CLFCartesian","text":"Source code in bayes_cbf/unicycle_move_to_pose.py 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 class CLFCartesian : def __init__ ( self , Kp = torch . tensor ([ 9. , 15. , 40. ]) / 10. ): self . Kp = Kp def clf_terms ( self , state , state_goal ): rho , alpha , beta = cartesian2polar ( state , state_goal ) x , y , theta = state x_goal , y_goal , theta_goal = state_goal return torch . tensor (( 0.5 * self . Kp [ 0 ] * rho ** 2 , self . Kp [ 1 ] * ( 1 - torch . cos ( alpha )), self . Kp [ 2 ] * ( 1 - torch . cos ( beta )) )) def _grad_clf_terms_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[0], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[1], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms_wrt_goal(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg)[2], x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x_diff , y_diff , theta_diff = state_goal - state rho , alpha , beta = cartesian2polar ( state , state_goal ) return torch . tensor ([[ self . Kp [ 0 ] * x_diff , self . Kp [ 1 ] * torch . sin ( alpha ) * y_diff / ( rho ** 2 ), self . Kp [ 2 ] * torch . sin ( beta ) * y_diff / ( rho ** 2 ) ], [ self . Kp [ 0 ] * y_diff , - self . Kp [ 1 ] * torch . sin ( alpha ) * x_diff / ( rho ** 2 ), - self . Kp [ 2 ] * torch . sin ( beta ) * x_diff / ( rho ** 2 )], [ 0 , 0 , self . Kp [ 2 ] * torch . sin ( beta )] ]) def _grad_clf_terms ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[0], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[1], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[2], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x_diff , y_diff , theta_diff = state_goal - state rho , alpha , beta = cartesian2polar ( state , state_goal ) return torch . tensor ([[ - self . Kp [ 0 ] * x_diff , - self . Kp [ 1 ] * torch . sin ( alpha ) * y_diff / ( rho ** 2 ), - self . Kp [ 2 ] * torch . sin ( beta ) * y_diff / ( rho ** 2 ) ], [ - self . Kp [ 0 ] * y_diff , self . Kp [ 1 ] * torch . sin ( alpha ) * x_diff / ( rho ** 2 ), self . Kp [ 2 ] * torch . sin ( beta ) * x_diff / ( rho ** 2 )], [ 0 , self . Kp [ 1 ] * torch . sin ( alpha ), 0 ] ]) def grad_clf ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, x0_goal) >>> njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( state , state_goal ) . sum ( axis =- 1 ) def grad_clf_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf_wrt_goal(x0, x0_goal) >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms_wrt_goal ( state , state_goal ) . sum ( axis =- 1 ) def isconverged ( self , x , state_goal ): rho , alpha , beta = cartesian2polar ( x , state_goal ) return rho < 1e-3","title":"CLFCartesian"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.CLFCartesian.grad_clf","text":"self = CLFCartesian() x0 = torch.rand(3) x0_goal = torch.rand(3) ajac = self.grad_clf(x0, x0_goal) njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 590 591 592 593 594 595 596 597 598 599 def grad_clf ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, x0_goal) >>> njac = numerical_jac(lambda x: self.clf_terms(x, x0_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( state , state_goal ) . sum ( axis =- 1 )","title":"grad_clf()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.CLFCartesian.grad_clf_wrt_goal","text":"self = CLFCartesian() x0 = torch.rand(3) x0_goal = torch.rand(3) ajac = self.grad_clf_wrt_goal(x0, x0_goal) njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 601 602 603 604 605 606 607 608 609 610 def grad_clf_wrt_goal ( self , state , state_goal ): \"\"\" >>> self = CLFCartesian() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self.grad_clf_wrt_goal(x0, x0_goal) >>> njac = numerical_jac(lambda xg: self.clf_terms(x0, xg).sum(), x0_goal, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms_wrt_goal ( state , state_goal ) . sum ( axis =- 1 )","title":"grad_clf_wrt_goal()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.CLFPolar","text":"Source code in bayes_cbf/unicycle_move_to_pose.py 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 class CLFPolar : def __init__ ( self , Kp = torch . tensor ([ 6. , 15. , 40. , 0. ]) / 10. ): self . Kp = Kp def clf_terms ( self , polar , state_goal ): return self . _clf_terms ( polar , state_goal ) def _clf_terms ( self , polar , state_goal ): rho , alpha , beta = polar return torch . tensor (( 0.5 * self . Kp [ 0 ] * rho ** 2 , self . Kp [ 1 ] * cosdist ( alpha , 0 ), self . Kp [ 2 ] * cosdist ( beta , 0 ), self . Kp [ 3 ] * ( 1 - torch . cos ( beta - alpha )) )) def grad_clf ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> state_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, state_goal) >>> njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( polar , state_goal ) . sum ( axis =- 1 ) def grad_clf_wrt_goal ( self , polar , state_goal ): return torch . zeros_like ( state_goal ) def _grad_clf_terms ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> x0_goal = torch.rand(3) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 0] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[0], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 1] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[1], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 2] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[2], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) >>> ajac = self._grad_clf_terms(x0, x0_goal)[:, 3] >>> njac = numerical_jac(lambda x: self.clf_terms(x,x0_goal)[3], x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" rho , alpha , beta = polar return torch . tensor ([[ self . Kp [ 0 ] * rho , 0 , 0 , 0 ], [ 0 , self . Kp [ 1 ] * torch . sin ( alpha ), 0 , - self . Kp [ 3 ] * torch . sin ( beta - alpha )], [ 0 , 0 , self . Kp [ 2 ] * torch . sin ( beta ), self . Kp [ 3 ] * torch . sin ( beta - alpha )]]) def isconverged ( self , x , state_goal ): rho , alpha , beta = cartesian2polar ( x , state_goal ) return rho < 1e-3","title":"CLFPolar"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.CLFPolar.grad_clf","text":"self = CLFPolar() x0 = torch.rand(3) state_goal = torch.rand(3) ajac = self.grad_clf(x0, state_goal) njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 458 459 460 461 462 463 464 465 466 467 def grad_clf ( self , polar , state_goal ): \"\"\" >>> self = CLFPolar() >>> x0 = torch.rand(3) >>> state_goal = torch.rand(3) >>> ajac = self.grad_clf(x0, state_goal) >>> njac = numerical_jac(lambda x: self._clf_terms(x, state_goal).sum(), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" return self . _grad_clf_terms ( polar , state_goal ) . sum ( axis =- 1 )","title":"grad_clf()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.ControllerCLF","text":"Aicardi, M., Casalino, G., Bicchi, A., & Balestrino, A. (1995). Closed loop steering of unicycle like vehicles via Lyapunov techniques. IEEE Robotics & Automation Magazine, 2(1), 27-35. Source code in bayes_cbf/unicycle_move_to_pose.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 class ControllerCLF : \"\"\" Aicardi, M., Casalino, G., Bicchi, A., & Balestrino, A. (1995). Closed loop steering of unicycle like vehicles via Lyapunov techniques. IEEE Robotics & Automation Magazine, 2(1), 27-35. \"\"\" def __init__ ( self , # simulation parameters planner , u_dim = 2 , coordinate_converter = None , # cartesian2polar/ lambda x, xg: x dynamics = None , # PolarDynamics()/CartesianDynamics() clf = None , # CLFPolar()/CLFCartesian() clf_gamma = 10 , clf_relax_weight = 10 , cbfs = [], cbf_gammas = [], max_risk = 1e-2 , visualizer = None ): self . planner = planner self . u_dim = 2 self . coordinate_converter = coordinate_converter self . dynamics = dynamics self . clf = clf self . clf_gamma = 10 self . clf_relax_weight = 10 self . cbfs = cbfs self . cbf_gammas = cbf_gammas self . max_risk = max_risk self . visualizer = visualizer @property def model ( self ): return self . dynamics def _clc ( self , x , state_goal , t ): polar = self . coordinate_converter ( x , state_goal ) fx = self . dynamics . f_func ( polar ) gx = self . dynamics . g_func ( polar ) gclf = self . clf . grad_clf ( polar , state_goal ) gclf_goal = self . clf . grad_clf_wrt_goal ( polar , state_goal ) TBLOG . add_scalar ( \"x_0\" , x [ 0 ], t ) bfa = to_numpy ( gclf @ gx ) b = to_numpy ( gclf @ fx + gclf_goal @ self . planner . dot_plan ( t ) + self . clf_gamma * self . clf . clf_terms ( polar , state_goal ) . sum ()) return bfa , b def _cbcs ( self , x_in , state_goal , t ): x = self . coordinate_converter ( x_in , state_goal ) fx = self . dynamics . f_func ( x ) gx = self . dynamics . g_func ( x ) for cbf , cbf_gamma in zip ( self . cbfs , self . cbf_gammas ): gcbf = cbf . grad_cbf ( x ) cbfx = cbf . cbf ( x ) TBLOG . add_scalar ( \"cbf\" , cbfx , t ) yield to_numpy ( gcbf @ gx ), to_numpy ( gcbf @ fx + cbf_gamma * cbfx ) def _ctrl_ref ( self , x , u ): return np . zeros_like ( x ) def control ( self , x_torch , t ): state_goal = self . planner . plan ( t ) import cvxpy as cp # pip install cvxpy x = x_torch uvar = cp . Variable ( self . u_dim ) uvar . value = np . zeros ( self . u_dim ) relax = cp . Variable ( 1 ) obj = cp . Minimize ( cp . sum_squares ( uvar ) + self . clf_relax_weight * relax ) clc_bfa , clc_b = self . _clc ( x , state_goal , t ) constraints = [ uvar >= np . array ([ - 10. , - np . pi * 5 ]), uvar <= np . array ([ 10. , np . pi * 5 ]), clc_bfa @ uvar + clc_b - relax <= 0 ] for cbc_bfa , cbc_b in self . _cbcs ( x , state_goal , t ): constraints . append ( cbc_bfa @ uvar + cbc_b >= 0 ) problem = cp . Problem ( obj , constraints ) problem . solve ( solver = 'GUROBI' ) if problem . status not in [ \"infeasible\" , \"unbounded\" ]: # Otherwise, problem.value is inf or -inf, respectively. # print(\"Optimal value: %s\" % problem.value) pass else : raise ValueError ( problem . status ) # for variable in problem.variables(): # print(\"Variable %s: value %s\" % (variable.name(), variable.value)) uopt = torch_to ( torch . from_numpy ( uvar . value ), device = getattr ( x_torch , 'device' , None ), dtype = x_torch . dtype ) if hasattr ( self . dynamics , 'train' ): self . dynamics . train ( x_torch , uopt ) return uopt def isconverged ( self , state , state_goal ): return self . clf . isconverged ( state , state_goal )","title":"ControllerCLF"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.ObstacleCBF","text":"Source code in bayes_cbf/unicycle_move_to_pose.py 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 class ObstacleCBF : def __init__ ( self , center , radius , term_weights = [ 0.5 , 0.5 ]): self . center = center self . radius = radius self . term_weights = term_weights def _cbf_radial ( self , state ): return (( state [: 2 ] - self . center ) ** 2 ) . sum () - self . radius ** 2 def _cbf_heading ( self , state ): good_heading = state [: 2 ] - self . center good_heading_norm = good_heading / torch . norm ( good_heading ) return torch . cos ( state [ 2 ]) * good_heading_norm [ 0 ] + torch . sin ( state [ 2 ]) * good_heading_norm [ 1 ] def _cbf_terms ( self , state ): return [ self . _cbf_radial ( state ), self . _cbf_heading ( state )] def cbf ( self , state ): self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _cbf_terms ( state ))) def _grad_cbf_radial ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self._grad_cbf_radial(x0) >>> njac = numerical_jac(lambda x: self._cbf_radial(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" gcbf = torch . zeros_like ( state ) gcbf [ ... , : 2 ] = 2 * ( state [ ... , : 2 ] - self . center ) return gcbf def _grad_cbf_heading ( self , state ): \"\"\" \u03b1 = atan2(y, x) [\u2202 cos(\u03b1-\u03b8), \u2202 cos(\u03b1 - \u03b8) \u2202 cos(\u03b8 - \u03b1) ] [------------, ------------, ----------- ] [\u2202 x \u2202 y \u2202 \u03b8 ] >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self._grad_cbf_heading(x0) >>> njac = numerical_jac(lambda x: self._cbf_heading(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" gcbf = torch . zeros_like ( state ) \u03b8 = state [ ... , 2 ] good_heading = state [ ... , : 2 ] - self . center \u03c1 = torch . norm ( good_heading ) \u03b1 = torch . atan2 ( good_heading [ ... , 1 ], good_heading [ ... , 0 ]) # \u2202 / \u2202 x cos(\u03b1-\u03b8) = sin(\u03b1 - \u03b8) y / \u03c1\u00b2 gcbf [ ... , 0 ] = ( \u03b1 - \u03b8 ) . sin () * good_heading [ ... , 1 ] / \u03c1 ** 2 # \u2202 / \u2202 y cos(\u03b1-\u03b8) = - sin(\u03b1 - \u03b8) x / \u03c1\u00b2 gcbf [ ... , 1 ] = - ( \u03b1 - \u03b8 ) . sin () * good_heading [ ... , 0 ] / \u03c1 ** 2 # \u2202 / \u2202 \u03b8 cos(\u03b8-\u03b1) = - sin(\u03b8 - \u03b1) gcbf [ ... , 2 ] = - ( \u03b8 - \u03b1 ) . sin () return gcbf def _grad_cbf_terms ( self , state ): return [ self . _grad_cbf_radial ( state ), self . _grad_cbf_heading ( state )] def grad_cbf ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self.grad_cbf(x0) >>> njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _grad_cbf_terms ( state )))","title":"ObstacleCBF"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.ObstacleCBF.grad_cbf","text":"self = ObstacleCBF(torch.rand(2), torch.rand(1)) x0 = torch.rand(3) ajac = self.grad_cbf(x0) njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 683 684 685 686 687 688 689 690 691 692 693 694 695 696 def grad_cbf ( self , state ): \"\"\" >>> self = ObstacleCBF(torch.rand(2), torch.rand(1)) >>> x0 = torch.rand(3) >>> ajac = self.grad_cbf(x0) >>> njac = numerical_jac(lambda x: self.cbf(x), x0, 1e-6)[0] >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" self . center , self . radius = map ( partial ( torch_to , device = state . device , dtype = state . dtype ), ( self . center , self . radius )) return sum ( w * t for w , t in zip ( self . term_weights , self . _grad_cbf_terms ( state )))","title":"grad_cbf()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.cartesian2polar","text":"rho is the distance between the robot and the goal position : \\sqrt((x -x)^2 + (y -y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y -y),(x -x)) beta is the goal position relative to the angle to the goal : theta - atan2((y -y),(x*-x)) state = torch.rand(3) torch.tensor([2, 2, 2 math.pi]) - torch.tensor([1, 1, math.pi]) state_goal = torch.rand(3) torch.tensor([2, 2, 2 math.pi]) - torch.tensor([1, 1, math.pi]) polar = cartesian2polar(state, state_goal) statep = polar2cartesian(polar, state_goal) testing.assert_allclose(state, statep) Source code in bayes_cbf/unicycle_move_to_pose.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def cartesian2polar ( state : CartesianState , state_goal : CartesianState ) -> PolarState : \"\"\" rho is the distance between the robot and the goal position : \\sqrt((x*-x)^2 + (y*-y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y*-y),(x*-x)) beta is the goal position relative to the angle to the goal : theta* - atan2((y*-y),(x*-x)) >>> state = torch.rand(3)* torch.tensor([2, 2, 2*math.pi]) - torch.tensor([1, 1, math.pi]) >>> state_goal = torch.rand(3)* torch.tensor([2, 2, 2*math.pi]) - torch.tensor([1, 1, math.pi]) >>> polar = cartesian2polar(state, state_goal) >>> statep = polar2cartesian(polar, state_goal) >>> testing.assert_allclose(state, statep) \"\"\" x , y , theta = state x_goal , y_goal , theta_goal = state_goal x_diff = x_goal - x y_diff = y_goal - y # reparameterization rho = torch . sqrt ( x_diff ** 2 + y_diff ** 2 ) assert rho . abs () > 1e-6 , \"Invalid conversion\" phi = torch . atan2 ( y_diff , x_diff ) alpha = angdiff ( theta , phi ) beta = angdiff ( theta_goal , phi ) return torch . tensor (( rho , alpha , beta ))","title":"cartesian2polar()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.move_to_pose","text":"rho is the distance between the robot and the goal position alpha is the angle to the goal relative to the heading of the robot beta is the angle between the robot's position and the goal position plus the goal angle Kp_rho rho and Kp_alpha alpha drive the robot along a line towards the goal Kp_beta*beta rotates the line so that it is parallel to the goal angle Source code in bayes_cbf/unicycle_move_to_pose.py 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 def move_to_pose ( state_start , state_goal , dt = 0.01 , show_animation = True , controller = None , dynamics = CartesianDynamics (), visualizer = None ): \"\"\" rho is the distance between the robot and the goal position alpha is the angle to the goal relative to the heading of the robot beta is the angle between the robot's position and the goal position plus the goal angle Kp_rho*rho and Kp_alpha*alpha drive the robot along a line towards the goal Kp_beta*beta rotates the line so that it is parallel to the goal angle \"\"\" visualizer = ( Visualizer ( NoPlanner ( state_goal ), dt ) if visualizer is None else visualizer ) state = state_start . clone () count = 0 dynamics . set_init_state ( state ) while not controller . isconverged ( state , state_goal ): x , y , theta = state # control ctrl = controller . control ( state , t = count ) # simulation state = dynamics . step ( ctrl , dt )[ 'x' ] if show_animation : # pragma: no cover visualizer . setStateCtrl ( state , ctrl , t = count ) count = count + 1","title":"move_to_pose()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.numerical_jac","text":"def func(x): return torch.tensor([torch.cos(x[0]), torch.sin(x[1])]) def jacfunc(x): return torch.tensor([[-torch.sin(x[0]), 0], [0, torch.cos(x[1])]]) x0 = torch.rand(2) njac = numerical_jac(func, x0, 1e-6) ajac = jacfunc(x0) testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) Source code in bayes_cbf/unicycle_move_to_pose.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 def numerical_jac ( func , x0_in , eps , dtype = torch . float64 ): \"\"\" >>> def func(x): return torch.tensor([torch.cos(x[0]), torch.sin(x[1])]) >>> def jacfunc(x): return torch.tensor([[-torch.sin(x[0]), 0], [0, torch.cos(x[1])]]) >>> x0 = torch.rand(2) >>> njac = numerical_jac(func, x0, 1e-6) >>> ajac = jacfunc(x0) >>> testing.assert_allclose(njac, ajac, rtol=1e-3, atol=1e-4) \"\"\" x0 = torch_to ( x0_in , dtype = dtype ) f0 = func ( x0 ) m = f0 . shape [ - 1 ] if len ( f0 . shape ) else 1 jac = torch . empty (( m , x0 . shape [ - 1 ]), dtype = x0 . dtype ) Dx = eps * torch . eye ( x0 . shape [ - 1 ], dtype = x0 . dtype ) XpDx = x0 + Dx for c in range ( x0 . shape [ - 1 ]): jac [:, c : c + 1 ] = ( func ( XpDx [ c , :]) . reshape ( - 1 , 1 ) - f0 . reshape ( - 1 , 1 )) / eps return torch_to ( jac , dtype = x0_in . dtype , device = getattr ( x0_in , 'device' , None ))","title":"numerical_jac()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.polar2cartesian","text":"rho is the distance between the robot and the goal position : \\sqrt((x -x)^2 + (y -y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y -y),(x -x)) beta is the goal position relative to the angle to the goal : theta - atan2((y -y),(x*-x)) polar = (torch.rand(3) * torch.tensor([1, 2 math.pi, 2 math.pi]) - ... torch.tensor([0, math.pi, math.pi])) state_goal = (torch.rand(3) * torch.tensor([2, 2, 2*math.pi]) - ... torch.tensor([1, 1, math.pi])) state = polar2cartesian(polar, state_goal) polarp = cartesian2polar(state, state_goal) testing.assert_allclose(polar, polarp) Source code in bayes_cbf/unicycle_move_to_pose.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def polar2cartesian ( x : PolarState , state_goal : CartesianState ) -> CartesianState : \"\"\" rho is the distance between the robot and the goal position : \\sqrt((x*-x)^2 + (y*-y)^2) alpha is the heading of the robot relative the angle to the goal : theta - atan2((y*-y),(x*-x)) beta is the goal position relative to the angle to the goal : theta* - atan2((y*-y),(x*-x)) >>> polar = (torch.rand(3) * torch.tensor([1, 2*math.pi, 2*math.pi]) - ... torch.tensor([0, math.pi, math.pi])) >>> state_goal = (torch.rand(3) * torch.tensor([2, 2, 2*math.pi]) - ... torch.tensor([1, 1, math.pi])) >>> state = polar2cartesian(polar, state_goal) >>> polarp = cartesian2polar(state, state_goal) >>> testing.assert_allclose(polar, polarp) \"\"\" rho , alpha , beta = x x_goal , y_goal , theta_goal = state_goal phi = angdiff ( theta_goal , beta ) theta = normalize_radians ( phi + alpha ) x_diff = rho * torch . cos ( phi ) y_diff = rho * torch . sin ( phi ) return torch . tensor ([ x_goal - x_diff , y_goal - y_diff , theta ])","title":"polar2cartesian()"},{"location":"reference/bayes_cbf/unicycle_move_to_pose/#bayes_cbf.unicycle_move_to_pose.track_trajectory_ackerman_clf_bayesian","text":"mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermannDrive(L = 10.0) Source code in bayes_cbf/unicycle_move_to_pose.py 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 def track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermannDrive , L = 10.0 ), true_dynamics_gen = partial ( AckermannDrive , L = 1.0 ), visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ): \"\"\" mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermannDrive(L = 10.0) \"\"\" visualizer = visualizer_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt ), dt , cbfs = cbfs ( x , x_g ) ) return sample_generator_trajectory ( dynamics_model = true_dynamics_gen (), D = numSteps , controller = controller_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt , frac_time_to_reach_goal = 0.95 ), coordinate_converter = lambda x , x_g : x , dynamics = LearnedShiftInvariantDynamics ( dt = dt , mean_dynamics = mean_dynamics_gen (), enable_learning = enable_learning , train_every_n_steps = train_every_n_steps ), # dynamics = ZeroDynamicsBayesian(m = 2, n = 3), clf = CLFCartesian ( Kp = torch . tensor ([ 0.9 , 1.5 , 0. ]) ), cbfs = cbfs ( x , x_g ), cbf_gammas = cbf_gammas , visualizer = visualizer ) . control , visualizer = visualizer , x0 = x , dt = dt , ** kw )","title":"track_trajectory_ackerman_clf_bayesian()"},{"location":"reference/bayes_cbf/bulletcar/","text":"","title":"bulletcar"},{"location":"reference/bayes_cbf/bulletcar/racecar/","text":"","title":"racecar"},{"location":"reference/bayes_cbf/bulletcar/safe_control/","text":"track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermanDrive , L = 10.0 ), true_dynamics_gen = RacecarEnv , visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ) mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermanDrive(L = 10.0) Source code in bayes_cbf/bulletcar/safe_control.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermanDrive , L = 10.0 ), true_dynamics_gen = RacecarEnv , visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ): \"\"\" mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermanDrive(L = 10.0) \"\"\" obstacles = cbfs ( x , x_g ) visualizer = visualizer_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt ), dt , cbfs = obstacles ) true_dynamics_model = true_dynamics_gen () for i , obs in enumerate ( obstacles ): true_dynamics_model . create_new_obstacle ( 'obstacle_ %d ' % i , obs . center , obs . radius ) return sample_generator_trajectory ( dynamics_model = true_dynamics_model , D = numSteps , controller = controller_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt , frac_time_to_reach_goal = 0.95 ), coordinate_converter = lambda x , x_g : x , dynamics = LearnedShiftInvariantDynamics ( dt = dt , mean_dynamics = mean_dynamics_gen (), enable_learning = enable_learning , train_every_n_steps = train_every_n_steps ), # dynamics = ZeroDynamicsBayesian(m = 2, n = 3), clf = CLFCartesian ( Kp = torch . tensor ([ 0.9 , 1.5 , 0. ]) ), cbfs = cbfs ( x , x_g ), cbf_gammas = cbf_gammas , visualizer = visualizer ) . control , visualizer = visualizer , x0 = x , dt = dt , ** kw )","title":"safe_control"},{"location":"reference/bayes_cbf/bulletcar/safe_control/#bayes_cbf.bulletcar.safe_control.track_trajectory_ackerman_clf_bayesian","text":"mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermanDrive(L = 10.0) Source code in bayes_cbf/bulletcar/safe_control.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def track_trajectory_ackerman_clf_bayesian ( x , x_g , dt = None , cbfs = None , cbf_gammas = None , numSteps = None , enable_learning = True , mean_dynamics_gen = partial ( AckermanDrive , L = 10.0 ), true_dynamics_gen = RacecarEnv , visualizer_class = Visualizer , controller_class = ControllerCLFBayesian , train_every_n_steps = 20 , ** kw ): \"\"\" mean_dynamics is either ZeroDynamicsModel(m = 2, n = 3) or AckermanDrive(L = 10.0) \"\"\" obstacles = cbfs ( x , x_g ) visualizer = visualizer_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt ), dt , cbfs = obstacles ) true_dynamics_model = true_dynamics_gen () for i , obs in enumerate ( obstacles ): true_dynamics_model . create_new_obstacle ( 'obstacle_ %d ' % i , obs . center , obs . radius ) return sample_generator_trajectory ( dynamics_model = true_dynamics_model , D = numSteps , controller = controller_class ( PiecewiseLinearPlanner ( x , x_g , numSteps , dt , frac_time_to_reach_goal = 0.95 ), coordinate_converter = lambda x , x_g : x , dynamics = LearnedShiftInvariantDynamics ( dt = dt , mean_dynamics = mean_dynamics_gen (), enable_learning = enable_learning , train_every_n_steps = train_every_n_steps ), # dynamics = ZeroDynamicsBayesian(m = 2, n = 3), clf = CLFCartesian ( Kp = torch . tensor ([ 0.9 , 1.5 , 0. ]) ), cbfs = cbfs ( x , x_g ), cbf_gammas = cbf_gammas , visualizer = visualizer ) . control , visualizer = visualizer , x0 = x , dt = dt , ** kw )","title":"track_trajectory_ackerman_clf_bayesian()"},{"location":"reference/bayes_cbf/car/","text":"","title":"car"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/","text":"HyundaiGenesisDynamicsModel Bases: object A vehicle dynamics simulator using a linear tire model. Modified Code from https://github.com/MPC-Berkeley/genesis_path_follower/blob/master/scripts/vehicle_simulator.py https://github.com/urosolia/RacingLMPC/blob/master/src/fnc/SysModel.py Source code in bayes_cbf/car/HyundaiGenesis.pyclass HyundaiGenesisDynamicsModel ( object ): ''' A vehicle dynamics simulator using a linear tire model. Modified Code from: https://github.com/MPC-Berkeley/genesis_path_follower/blob/master/scripts/vehicle_simulator.py https://github.com/urosolia/RacingLMPC/blob/master/src/fnc/SysModel.py ''' def __init__ ( self ): # Hyundai Genesis Parameters from HCE: self . param = HyundaiGenesisParameters () self . state = StateSE3 () self . state . pose = PoseSE3 () self . state . pose . position = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . state . pose . orientation = torch . eye ( 3 ) . unsqueeze ( 0 ) self . state . twist = TwistSE3 () self . state . twist . linear = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . state . twist . angular = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . input = AckermannInput () self . input . acceleration = torch . tensor ([ 0.0 ]) self . input . steering_angle = torch . tensor ([ 0.0 ]) self . dt = 0.01 # vehicle model update period (s) and frequency (Hz) self . hz = int ( 1.0 / self . dt ) self . desired_acceleration = 0.0 # m/s^2 self . desired_steering_angle = 0.0 # rad @property def ctrl_size ( self ): return 3 @property def state_size ( self ): return 9 def setInput ( self , acc , steer ): self . desired_acceleration = acc self . desired_steering_angle = steer def _fg_func ( self , X_in ): if X_in . ndim == 1 : X = X_in . unsqueeze ( 0 ) else : X = X_in assert X . shape [ - 1 ] == self . state_size state , inp = StateAsArray () . deserialize ( X ) m , Iz , lf , lr = self . param . mass , self . param . Iz , self . param . lf , self . param . lr vx , vy , w = ( state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ]) # Compute tire slip angle and lateral force at front and rear tire (linear model) Fyf , Fyr = self . tireLateralForce ( state , inp ) fX = torch . zeros_like ( X ) gX = X . new_zeros ( X . shape [ 0 ], X . shape [ - 1 ], self . ctrl_size ) fX [:, : 2 ] = dpos = state . pose . orientation . bmm ( state . twist . linear . unsqueeze ( - 1 )) . squeeze ( - 1 )[:, : 2 ] fX [:, 2 ] = dori = state . twist . angular [:, 2 ] #dX[:, 3] = dvx = (a - 1.0/m*Fyf*sins + w*vy) #dX[:, 4] = dvy = (1.0/m*(Fyf*coss + Fyr) - w*vx) #dX[:, 5] = dw = 1.0/Iz*(lf*Fyf*coss - lr*Fyr) gX [:, 3 , :], fX [:, 3 ] = torch . tensor ([ 1 , 0 , - 1.0 / m * Fyf ]), w * vy gX [:, 4 , :], fX [:, 4 ] = torch . tensor ([ 0 , 1.0 / m * Fyf , 0 ]), 1.0 / m * Fyr - w * vx gX [:, 5 , :], fX [:, 5 ] = torch . tensor ([ 0 , 1.0 / Iz * lf * Fyf , 0 ]), - 1.0 / Iz * lr * Fyr gX [:, 6 : 9 , :] = torch . eye ( self . ctrl_size ) if X_in . ndim == 1 : fX = fX . squeeze ( 0 ) gX = gX . squeeze ( 0 ) return fX , gX def fu_func ( self , X , U ): assert U . shape [ - 1 ] == self . ctrl_size _ , inp = StateAsArray () . deserialize ( X ) dU = self . controlDelay ( self . dt , inp , U ) inp . inc_control ( dU ) Ut = inp . control () fX , gX = self . _fg_func ( X ) return fX + gX . bmm ( Ut . unsqueeze ( - 1 )) . squeeze ( - 1 ) def f_func ( self , X ): return self . _fg_func ( X )[ 0 ] def g_func ( self , X ): return self . _fg_func ( X )[ 1 ] def updateModel ( self , disc_steps = 10 ): deltaT = self . dt / disc_steps U = torch . tensor ([[ self . desired_acceleration , math . cos ( self . desired_steering_angle ), math . sin ( self . desired_steering_angle )]]) #U = torch.tensor([[self.desired_acceleration, self.desired_steering_angle]]) dU = self . controlDelay ( self . dt , self . input , U ) self . input . inc_control ( dU ) for i in range ( disc_steps ): R = self . state . pose . orientation linear_twist = self . state . twist . linear X = StateAsArray () . serialize ( self . state , self . input ) dX = self . fu_func ( X , U ) # discretized SE(3) dynamics dstate , dinp = StateAsArray () . deserialize ( dX * deltaT ) # self.state.pose.orientation @ self.state.twist.linear self . state . pose . position += dstate . pose . position self . state . pose . orientation = self . state . pose . orientation @ dstate . pose . orientation self . state . twist . linear += dstate . twist . linear self . state . twist . angular += dstate . twist . angular def tireLateralForce ( self , state , inp ): ''' compute tire slip angle and lateral force ''' alpha_f , alpha_r = 0.0 , 0.0 vx , vy , w = state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ] if torch . abs ( vx ) > 1.0 : # np.fabs alpha_f = inp . steering_angle - torch . atan2 ( vy + self . param . lf * w , vx ) alpha_r = - torch . atan2 ( vy - self . param . lr * w , vx ) return self . param . C_alpha_f * alpha_f , self . param . C_alpha_r * alpha_r def controlDelay ( self , dt , inp , dctrl ): ''' Simulate first order control delay in acceleration/steering ''' # e_<n> = self.<n> - self.<n>_des # d/dt e_<n> = - kp * e_<n> # or kp = alpha, low pass filter gain # kp = alpha = discretization time/(time constant + discretization time) #ad = self.desired_acceleration #sd = self.desired_steering_angle ad = dctrl [:, 0 ] sd = torch . atan2 ( dctrl [:, 2 ], dctrl [:, 1 ]) atc = self . param . acceleration_time_constant stc = self . param . steering_angle_time_constant ctc = self . param . control_time_constant da = dt / ( dt + atc ) * ( ad - inp . acceleration ) ds = dt / ( dt + stc ) * ( sd - inp . steering_angle ) #du = dt/(dt + ctc) * (dctrl - inp.control()) inp = AckermannInput () inp . acceleration = da inp . steering_angle = ds return inp . control () controlDelay ( dt , inp , dctrl ) Simulate first order control delay in acceleration/steering Source code in bayes_cbf/car/HyundaiGenesis.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def controlDelay ( self , dt , inp , dctrl ): ''' Simulate first order control delay in acceleration/steering ''' # e_<n> = self.<n> - self.<n>_des # d/dt e_<n> = - kp * e_<n> # or kp = alpha, low pass filter gain # kp = alpha = discretization time/(time constant + discretization time) #ad = self.desired_acceleration #sd = self.desired_steering_angle ad = dctrl [:, 0 ] sd = torch . atan2 ( dctrl [:, 2 ], dctrl [:, 1 ]) atc = self . param . acceleration_time_constant stc = self . param . steering_angle_time_constant ctc = self . param . control_time_constant da = dt / ( dt + atc ) * ( ad - inp . acceleration ) ds = dt / ( dt + stc ) * ( sd - inp . steering_angle ) #du = dt/(dt + ctc) * (dctrl - inp.control()) inp = AckermannInput () inp . acceleration = da inp . steering_angle = ds return inp . control () tireLateralForce ( state , inp ) compute tire slip angle and lateral force Source code in bayes_cbf/car/HyundaiGenesis.py 219 220 221 222 223 224 225 226 def tireLateralForce ( self , state , inp ): ''' compute tire slip angle and lateral force ''' alpha_f , alpha_r = 0.0 , 0.0 vx , vy , w = state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ] if torch . abs ( vx ) > 1.0 : # np.fabs alpha_f = inp . steering_angle - torch . atan2 ( vy + self . param . lf * w , vx ) alpha_r = - torch . atan2 ( vy - self . param . lr * w , vx ) return self . param . C_alpha_f * alpha_f , self . param . C_alpha_r * alpha_r rotmat_to_z ( R ) Assuming R is rotation around +Z axis, returns the angle of rotation. a = torch.rand(1) * 2 * math.pi agot = rotmat_to_z(rotz(a)) a == agot True Source code in bayes_cbf/car/HyundaiGenesis.py 65 66 67 68 69 70 71 72 73 74 def rotmat_to_z ( R ): \"\"\" Assuming R is rotation around +Z axis, returns the angle of rotation. >>> a = torch.rand(1) * 2 * math.pi >>> agot = rotmat_to_z(rotz(a)) >>> a == agot True \"\"\" return torch . atan2 ( R [ ... , 1 , 0 ], R [ ... , 0 , 0 ]) rotz ( a ) a rotation of a about the Z axis Source code in bayes_cbf/car/HyundaiGenesis.py 14 15 16 17 18 19 20 21 22 def rotz ( a ): ''' a rotation of a about the Z axis''' ca , sa = torch . cos ( a ), torch . sin ( a ) zz , ee = torch . zeros_like ( a ), torch . ones_like ( a ) R = torch . empty ( list ( a . shape ) + [ 3 , 3 ]) if isinstance ( a , torch . Tensor ) else torch . empty (( 3 , 3 )) R [ ... , 0 , 0 ], R [ ... , 0 , 1 ], R [ ... , 0 , 2 ] = ca , - sa , zz R [ ... , 1 , 0 ], R [ ... , 1 , 1 ], R [ ... , 1 , 2 ] = sa , ca , zz R [ ... , 2 , 0 ], R [ ... , 2 , 1 ], R [ ... , 2 , 2 ] = zz , zz , ee return R","title":"HyundaiGenesis"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/#bayes_cbf.car.HyundaiGenesis.HyundaiGenesisDynamicsModel","text":"Bases: object A vehicle dynamics simulator using a linear tire model. Modified Code from https://github.com/MPC-Berkeley/genesis_path_follower/blob/master/scripts/vehicle_simulator.py https://github.com/urosolia/RacingLMPC/blob/master/src/fnc/SysModel.py Source code in bayes_cbf/car/HyundaiGenesis.pyclass HyundaiGenesisDynamicsModel ( object ): ''' A vehicle dynamics simulator using a linear tire model. Modified Code from: https://github.com/MPC-Berkeley/genesis_path_follower/blob/master/scripts/vehicle_simulator.py https://github.com/urosolia/RacingLMPC/blob/master/src/fnc/SysModel.py ''' def __init__ ( self ): # Hyundai Genesis Parameters from HCE: self . param = HyundaiGenesisParameters () self . state = StateSE3 () self . state . pose = PoseSE3 () self . state . pose . position = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . state . pose . orientation = torch . eye ( 3 ) . unsqueeze ( 0 ) self . state . twist = TwistSE3 () self . state . twist . linear = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . state . twist . angular = torch . tensor ([[ 0.0 , 0.0 , 0.0 ]]) self . input = AckermannInput () self . input . acceleration = torch . tensor ([ 0.0 ]) self . input . steering_angle = torch . tensor ([ 0.0 ]) self . dt = 0.01 # vehicle model update period (s) and frequency (Hz) self . hz = int ( 1.0 / self . dt ) self . desired_acceleration = 0.0 # m/s^2 self . desired_steering_angle = 0.0 # rad @property def ctrl_size ( self ): return 3 @property def state_size ( self ): return 9 def setInput ( self , acc , steer ): self . desired_acceleration = acc self . desired_steering_angle = steer def _fg_func ( self , X_in ): if X_in . ndim == 1 : X = X_in . unsqueeze ( 0 ) else : X = X_in assert X . shape [ - 1 ] == self . state_size state , inp = StateAsArray () . deserialize ( X ) m , Iz , lf , lr = self . param . mass , self . param . Iz , self . param . lf , self . param . lr vx , vy , w = ( state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ]) # Compute tire slip angle and lateral force at front and rear tire (linear model) Fyf , Fyr = self . tireLateralForce ( state , inp ) fX = torch . zeros_like ( X ) gX = X . new_zeros ( X . shape [ 0 ], X . shape [ - 1 ], self . ctrl_size ) fX [:, : 2 ] = dpos = state . pose . orientation . bmm ( state . twist . linear . unsqueeze ( - 1 )) . squeeze ( - 1 )[:, : 2 ] fX [:, 2 ] = dori = state . twist . angular [:, 2 ] #dX[:, 3] = dvx = (a - 1.0/m*Fyf*sins + w*vy) #dX[:, 4] = dvy = (1.0/m*(Fyf*coss + Fyr) - w*vx) #dX[:, 5] = dw = 1.0/Iz*(lf*Fyf*coss - lr*Fyr) gX [:, 3 , :], fX [:, 3 ] = torch . tensor ([ 1 , 0 , - 1.0 / m * Fyf ]), w * vy gX [:, 4 , :], fX [:, 4 ] = torch . tensor ([ 0 , 1.0 / m * Fyf , 0 ]), 1.0 / m * Fyr - w * vx gX [:, 5 , :], fX [:, 5 ] = torch . tensor ([ 0 , 1.0 / Iz * lf * Fyf , 0 ]), - 1.0 / Iz * lr * Fyr gX [:, 6 : 9 , :] = torch . eye ( self . ctrl_size ) if X_in . ndim == 1 : fX = fX . squeeze ( 0 ) gX = gX . squeeze ( 0 ) return fX , gX def fu_func ( self , X , U ): assert U . shape [ - 1 ] == self . ctrl_size _ , inp = StateAsArray () . deserialize ( X ) dU = self . controlDelay ( self . dt , inp , U ) inp . inc_control ( dU ) Ut = inp . control () fX , gX = self . _fg_func ( X ) return fX + gX . bmm ( Ut . unsqueeze ( - 1 )) . squeeze ( - 1 ) def f_func ( self , X ): return self . _fg_func ( X )[ 0 ] def g_func ( self , X ): return self . _fg_func ( X )[ 1 ] def updateModel ( self , disc_steps = 10 ): deltaT = self . dt / disc_steps U = torch . tensor ([[ self . desired_acceleration , math . cos ( self . desired_steering_angle ), math . sin ( self . desired_steering_angle )]]) #U = torch.tensor([[self.desired_acceleration, self.desired_steering_angle]]) dU = self . controlDelay ( self . dt , self . input , U ) self . input . inc_control ( dU ) for i in range ( disc_steps ): R = self . state . pose . orientation linear_twist = self . state . twist . linear X = StateAsArray () . serialize ( self . state , self . input ) dX = self . fu_func ( X , U ) # discretized SE(3) dynamics dstate , dinp = StateAsArray () . deserialize ( dX * deltaT ) # self.state.pose.orientation @ self.state.twist.linear self . state . pose . position += dstate . pose . position self . state . pose . orientation = self . state . pose . orientation @ dstate . pose . orientation self . state . twist . linear += dstate . twist . linear self . state . twist . angular += dstate . twist . angular def tireLateralForce ( self , state , inp ): ''' compute tire slip angle and lateral force ''' alpha_f , alpha_r = 0.0 , 0.0 vx , vy , w = state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ] if torch . abs ( vx ) > 1.0 : # np.fabs alpha_f = inp . steering_angle - torch . atan2 ( vy + self . param . lf * w , vx ) alpha_r = - torch . atan2 ( vy - self . param . lr * w , vx ) return self . param . C_alpha_f * alpha_f , self . param . C_alpha_r * alpha_r def controlDelay ( self , dt , inp , dctrl ): ''' Simulate first order control delay in acceleration/steering ''' # e_<n> = self.<n> - self.<n>_des # d/dt e_<n> = - kp * e_<n> # or kp = alpha, low pass filter gain # kp = alpha = discretization time/(time constant + discretization time) #ad = self.desired_acceleration #sd = self.desired_steering_angle ad = dctrl [:, 0 ] sd = torch . atan2 ( dctrl [:, 2 ], dctrl [:, 1 ]) atc = self . param . acceleration_time_constant stc = self . param . steering_angle_time_constant ctc = self . param . control_time_constant da = dt / ( dt + atc ) * ( ad - inp . acceleration ) ds = dt / ( dt + stc ) * ( sd - inp . steering_angle ) #du = dt/(dt + ctc) * (dctrl - inp.control()) inp = AckermannInput () inp . acceleration = da inp . steering_angle = ds return inp . control ()","title":"HyundaiGenesisDynamicsModel"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/#bayes_cbf.car.HyundaiGenesis.HyundaiGenesisDynamicsModel.controlDelay","text":"Simulate first order control delay in acceleration/steering Source code in bayes_cbf/car/HyundaiGenesis.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def controlDelay ( self , dt , inp , dctrl ): ''' Simulate first order control delay in acceleration/steering ''' # e_<n> = self.<n> - self.<n>_des # d/dt e_<n> = - kp * e_<n> # or kp = alpha, low pass filter gain # kp = alpha = discretization time/(time constant + discretization time) #ad = self.desired_acceleration #sd = self.desired_steering_angle ad = dctrl [:, 0 ] sd = torch . atan2 ( dctrl [:, 2 ], dctrl [:, 1 ]) atc = self . param . acceleration_time_constant stc = self . param . steering_angle_time_constant ctc = self . param . control_time_constant da = dt / ( dt + atc ) * ( ad - inp . acceleration ) ds = dt / ( dt + stc ) * ( sd - inp . steering_angle ) #du = dt/(dt + ctc) * (dctrl - inp.control()) inp = AckermannInput () inp . acceleration = da inp . steering_angle = ds return inp . control ()","title":"controlDelay()"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/#bayes_cbf.car.HyundaiGenesis.HyundaiGenesisDynamicsModel.tireLateralForce","text":"compute tire slip angle and lateral force Source code in bayes_cbf/car/HyundaiGenesis.py 219 220 221 222 223 224 225 226 def tireLateralForce ( self , state , inp ): ''' compute tire slip angle and lateral force ''' alpha_f , alpha_r = 0.0 , 0.0 vx , vy , w = state . twist . linear [:, 0 ], state . twist . linear [:, 1 ], state . twist . angular [:, 2 ] if torch . abs ( vx ) > 1.0 : # np.fabs alpha_f = inp . steering_angle - torch . atan2 ( vy + self . param . lf * w , vx ) alpha_r = - torch . atan2 ( vy - self . param . lr * w , vx ) return self . param . C_alpha_f * alpha_f , self . param . C_alpha_r * alpha_r","title":"tireLateralForce()"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/#bayes_cbf.car.HyundaiGenesis.rotmat_to_z","text":"Assuming R is rotation around +Z axis, returns the angle of rotation. a = torch.rand(1) * 2 * math.pi agot = rotmat_to_z(rotz(a)) a == agot True Source code in bayes_cbf/car/HyundaiGenesis.py 65 66 67 68 69 70 71 72 73 74 def rotmat_to_z ( R ): \"\"\" Assuming R is rotation around +Z axis, returns the angle of rotation. >>> a = torch.rand(1) * 2 * math.pi >>> agot = rotmat_to_z(rotz(a)) >>> a == agot True \"\"\" return torch . atan2 ( R [ ... , 1 , 0 ], R [ ... , 0 , 0 ])","title":"rotmat_to_z()"},{"location":"reference/bayes_cbf/car/HyundaiGenesis/#bayes_cbf.car.HyundaiGenesis.rotz","text":"a rotation of a about the Z axis Source code in bayes_cbf/car/HyundaiGenesis.py 14 15 16 17 18 19 20 21 22 def rotz ( a ): ''' a rotation of a about the Z axis''' ca , sa = torch . cos ( a ), torch . sin ( a ) zz , ee = torch . zeros_like ( a ), torch . ones_like ( a ) R = torch . empty ( list ( a . shape ) + [ 3 , 3 ]) if isinstance ( a , torch . Tensor ) else torch . empty (( 3 , 3 )) R [ ... , 0 , 0 ], R [ ... , 0 , 1 ], R [ ... , 0 , 2 ] = ca , - sa , zz R [ ... , 1 , 0 ], R [ ... , 1 , 1 ], R [ ... , 1 , 2 ] = sa , ca , zz R [ ... , 2 , 0 ], R [ ... , 2 , 1 ], R [ ... , 2 , 2 ] = zz , zz , ee return R","title":"rotz()"},{"location":"reference/bayes_cbf/car/core/","text":"CircularObstacleCBC Bases: NamedAffineFunc Relative degree 1 L_f h(x) + L_g h(x) u - \u03b1 h(x) > 0 Source code in bayes_cbf/car/core.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 class CircularObstacleCBC ( NamedAffineFunc ): \"\"\" Relative degree 1 L_f h(x) + L_g h(x) u - \u03b1 h(x) > 0 \"\"\" @store_args def __init__ ( self , model , center , radius , cbf_col_K_alpha = [ 2 , 3 ], name = \"cbf-circles\" , dtype = torch . get_default_dtype ()): self . model = model self . center = center self . radius = radius self . encoder = StateAsArray () def to ( self , dtype ): self . dtype = dtype self . model . to ( dtype = dtype ) def value ( self , X ): state , inp = self . encoder . deserialize ( X ) pos = state . pose . position [:, : 2 ] distsq = (( pos - self . center ) ** 2 ) . sum ( dim =- 1 ) return distsq - self . radius ** 2 def __call__ ( self , x , u ): return self . A ( x ) @ u - self . b ( x ) def grad_h_col ( self , X_in ): if X_in . ndim == 1 : X = X_in . unsqueeze ( 0 ) with variable_required_grad ( X ): grad_h_x = torch . autograd . grad ( self . value ( X ), X )[ 0 ] if X_in . ndim == 1 : grad_h_x = grad_h_x . squeeze ( 0 ) return grad_h_x def lie_f_h_col ( self , X ): return self . grad_h_col ( X ) . bmm ( self . model . f_func ( X ) ) def grad_lie_f_h_col ( self , X ): with variable_required_grad ( X ): return torch . autograd . grad ( self . lie_f_h_col ( X ), X )[ 0 ] def lie2_f_h_col ( self , X ): return self . grad_lie_f_h_col ( X ) . bmm ( self . model . f_func ( X ) ) def lie_g_lie_f_h_col ( self , X ): return self . grad_lie_f_h_col ( X ) . bmm ( self . model . g_func ( X ) ) def lie2_fu_h_col ( self , X , U ): grad_L1h = self . grad_lie_f_h_col ( X ) return grad_L1h . bmm ( self . f_func ( X ) + self . g_func ( X ) . bmm ( U )) def A ( self , X ): return - self . lie_g_lie_f_h_col ( X ) def b ( self , X ): K_\u03b1 = torch . tensor ( self . cbf_col_K_alpha , dtype = self . dtype ) \u03b7_b_x = torch . cat ([ self . value ( X ) . unsqueeze ( 0 ), self . lie_f_h_col ( X ) . unsqueeze ( 0 )]) return ( self . lie2_f_h_col ( X ) + K_\u03b1 @ \u03b7_b_x ) ControlCarCBFGroundTruth Bases: ControlCarCBFLearned Controller that avoids learning but uses the ground truth model Source code in bayes_cbf/car/core.py 217 218 219 220 221 222 223 224 class ControlCarCBFGroundTruth ( ControlCarCBFLearned ): \"\"\" Controller that avoids learning but uses the ground truth model \"\"\" needs_ground_truth = False def __init__ ( self , * a , ** kw ): assert kw . pop ( \"use_ground_truth_model\" , False ) is False super () . __init__ ( * a , use_ground_truth_model = True , ** kw ) UnicycleDynamicsModel Bases: DynamicsModel X\u0307 = f(X) + g(X) u [ v\u0307\u2093 ] [ 0 ] [ cos(\u03b8), 0 ] [ v\u0307y ] [ 0 ] [ sin(\u03b8), 0 ] [ \u03c9\u0307 ] [ 0 ] [ 0, 1 ] [ x\u0307 ] = [ v\u2093 ] + [ 0, 0 ] [ a ] [ y\u0307 ] [ vy ] [ 0, 0 ] [ \u03b1 ] [ \u03b8\u0307 ] [ \u03c9 ] [ 0, 0 ] Source code in bayes_cbf/car/core.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class UnicycleDynamicsModel ( DynamicsModel ): \"\"\" X\u0307 = f(X) + g(X) u [ v\u0307\u2093 ] [ 0 ] [ cos(\u03b8), 0 ] [ v\u0307y ] [ 0 ] [ sin(\u03b8), 0 ] [ \u03c9\u0307 ] [ 0 ] [ 0, 1 ] [ x\u0307 ] = [ v\u2093 ] + [ 0, 0 ] [ a ] [ y\u0307 ] [ vy ] [ 0, 0 ] [ \u03b1 ] [ \u03b8\u0307 ] [ \u03c9 ] [ 0, 0 ] \"\"\" def __init__ ( self , m , n ): self . m = 2 # [a, \u03b1] self . n = 6 # [v\u2093, vy, \u03c9, x, y, \u03b8] @property def ctrl_size ( self ): return self . m @property def state_size ( self ): return self . n def f_func ( self , X_in ): \"\"\" [ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in v = X [ ... , 0 ] \u03c9 = X [ ... , 1 ] \u03b8 = X [ ... , 4 ] fX = X . new_zeros ( X . shape ) fX [:, 0 ] = v . new_zeros ( v . shape ) fX [:, 1 ] = \u03c9 . new_zeros ( v . shape ) fX [:, 2 ] = ( v * \u03b8 . cos ()) . sum ( dim =- 1 ) fX [:, 3 ] = ( v * \u03b8 . sin ()) . sum ( dim =- 1 ) fX [:, 4 ] = \u03c9 return fX . squeeze ( 0 ) if X_in . dim () <= 1 else fX def g_func ( self , X_in ): \"\"\" [ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in gX = torch . zeros (( * X . shape , self . m )) gX [ ... , :, :] = torch . eye ( 2 ) return gX . squeeze ( 0 ) if X_in . dim () <= 1 else gX f_func ( X_in ) [ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] Source code in bayes_cbf/car/core.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def f_func ( self , X_in ): \"\"\" [ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in v = X [ ... , 0 ] \u03c9 = X [ ... , 1 ] \u03b8 = X [ ... , 4 ] fX = X . new_zeros ( X . shape ) fX [:, 0 ] = v . new_zeros ( v . shape ) fX [:, 1 ] = \u03c9 . new_zeros ( v . shape ) fX [:, 2 ] = ( v * \u03b8 . cos ()) . sum ( dim =- 1 ) fX [:, 3 ] = ( v * \u03b8 . sin ()) . sum ( dim =- 1 ) fX [:, 4 ] = \u03c9 return fX . squeeze ( 0 ) if X_in . dim () <= 1 else fX g_func ( X_in ) [ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] Source code in bayes_cbf/car/core.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def g_func ( self , X_in ): \"\"\" [ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in gX = torch . zeros (( * X . shape , self . m )) gX [ ... , :, :] = torch . eye ( 2 ) return gX . squeeze ( 0 ) if X_in . dim () <= 1 else gX run_car_control_ground_truth () Run save car control with ground_truth model Source code in bayes_cbf/car/core.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 def run_car_control_ground_truth (): \"\"\" Run save car control with ground_truth model \"\"\" controller = ControlCarCBFLearned ( mean_dynamics_model = UnicycleDynamicsModel ) start , inp = StateAsArray () . deserialize ( torch . zeros ( 1 , controller . x_dim )) start . pose . position [:, : 2 ] = torch . tensor ([[ 0 , 2 ]]) start . pose . orientation = rotz ( torch . tensor ([ - math . pi / 2 ])) return sample_generator_trajectory ( dynamics_model = HyundaiGenesisDynamicsModel (), D = 1000 , controller = controller . control , visualizer = UnicycleVisualizer ( controller . centers , controller . radii ), x0 = StateAsArray () . serialize ( start , inp ))","title":"core"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.CircularObstacleCBC","text":"Bases: NamedAffineFunc Relative degree 1 L_f h(x) + L_g h(x) u - \u03b1 h(x) > 0 Source code in bayes_cbf/car/core.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 class CircularObstacleCBC ( NamedAffineFunc ): \"\"\" Relative degree 1 L_f h(x) + L_g h(x) u - \u03b1 h(x) > 0 \"\"\" @store_args def __init__ ( self , model , center , radius , cbf_col_K_alpha = [ 2 , 3 ], name = \"cbf-circles\" , dtype = torch . get_default_dtype ()): self . model = model self . center = center self . radius = radius self . encoder = StateAsArray () def to ( self , dtype ): self . dtype = dtype self . model . to ( dtype = dtype ) def value ( self , X ): state , inp = self . encoder . deserialize ( X ) pos = state . pose . position [:, : 2 ] distsq = (( pos - self . center ) ** 2 ) . sum ( dim =- 1 ) return distsq - self . radius ** 2 def __call__ ( self , x , u ): return self . A ( x ) @ u - self . b ( x ) def grad_h_col ( self , X_in ): if X_in . ndim == 1 : X = X_in . unsqueeze ( 0 ) with variable_required_grad ( X ): grad_h_x = torch . autograd . grad ( self . value ( X ), X )[ 0 ] if X_in . ndim == 1 : grad_h_x = grad_h_x . squeeze ( 0 ) return grad_h_x def lie_f_h_col ( self , X ): return self . grad_h_col ( X ) . bmm ( self . model . f_func ( X ) ) def grad_lie_f_h_col ( self , X ): with variable_required_grad ( X ): return torch . autograd . grad ( self . lie_f_h_col ( X ), X )[ 0 ] def lie2_f_h_col ( self , X ): return self . grad_lie_f_h_col ( X ) . bmm ( self . model . f_func ( X ) ) def lie_g_lie_f_h_col ( self , X ): return self . grad_lie_f_h_col ( X ) . bmm ( self . model . g_func ( X ) ) def lie2_fu_h_col ( self , X , U ): grad_L1h = self . grad_lie_f_h_col ( X ) return grad_L1h . bmm ( self . f_func ( X ) + self . g_func ( X ) . bmm ( U )) def A ( self , X ): return - self . lie_g_lie_f_h_col ( X ) def b ( self , X ): K_\u03b1 = torch . tensor ( self . cbf_col_K_alpha , dtype = self . dtype ) \u03b7_b_x = torch . cat ([ self . value ( X ) . unsqueeze ( 0 ), self . lie_f_h_col ( X ) . unsqueeze ( 0 )]) return ( self . lie2_f_h_col ( X ) + K_\u03b1 @ \u03b7_b_x )","title":"CircularObstacleCBC"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.ControlCarCBFGroundTruth","text":"Bases: ControlCarCBFLearned Controller that avoids learning but uses the ground truth model Source code in bayes_cbf/car/core.py 217 218 219 220 221 222 223 224 class ControlCarCBFGroundTruth ( ControlCarCBFLearned ): \"\"\" Controller that avoids learning but uses the ground truth model \"\"\" needs_ground_truth = False def __init__ ( self , * a , ** kw ): assert kw . pop ( \"use_ground_truth_model\" , False ) is False super () . __init__ ( * a , use_ground_truth_model = True , ** kw )","title":"ControlCarCBFGroundTruth"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.UnicycleDynamicsModel","text":"Bases: DynamicsModel X\u0307 = f(X) + g(X) u [ v\u0307\u2093 ] [ 0 ] [ cos(\u03b8), 0 ] [ v\u0307y ] [ 0 ] [ sin(\u03b8), 0 ] [ \u03c9\u0307 ] [ 0 ] [ 0, 1 ] [ x\u0307 ] = [ v\u2093 ] + [ 0, 0 ] [ a ] [ y\u0307 ] [ vy ] [ 0, 0 ] [ \u03b1 ] [ \u03b8\u0307 ] [ \u03c9 ] [ 0, 0 ] Source code in bayes_cbf/car/core.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class UnicycleDynamicsModel ( DynamicsModel ): \"\"\" X\u0307 = f(X) + g(X) u [ v\u0307\u2093 ] [ 0 ] [ cos(\u03b8), 0 ] [ v\u0307y ] [ 0 ] [ sin(\u03b8), 0 ] [ \u03c9\u0307 ] [ 0 ] [ 0, 1 ] [ x\u0307 ] = [ v\u2093 ] + [ 0, 0 ] [ a ] [ y\u0307 ] [ vy ] [ 0, 0 ] [ \u03b1 ] [ \u03b8\u0307 ] [ \u03c9 ] [ 0, 0 ] \"\"\" def __init__ ( self , m , n ): self . m = 2 # [a, \u03b1] self . n = 6 # [v\u2093, vy, \u03c9, x, y, \u03b8] @property def ctrl_size ( self ): return self . m @property def state_size ( self ): return self . n def f_func ( self , X_in ): \"\"\" [ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in v = X [ ... , 0 ] \u03c9 = X [ ... , 1 ] \u03b8 = X [ ... , 4 ] fX = X . new_zeros ( X . shape ) fX [:, 0 ] = v . new_zeros ( v . shape ) fX [:, 1 ] = \u03c9 . new_zeros ( v . shape ) fX [:, 2 ] = ( v * \u03b8 . cos ()) . sum ( dim =- 1 ) fX [:, 3 ] = ( v * \u03b8 . sin ()) . sum ( dim =- 1 ) fX [:, 4 ] = \u03c9 return fX . squeeze ( 0 ) if X_in . dim () <= 1 else fX def g_func ( self , X_in ): \"\"\" [ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in gX = torch . zeros (( * X . shape , self . m )) gX [ ... , :, :] = torch . eye ( 2 ) return gX . squeeze ( 0 ) if X_in . dim () <= 1 else gX","title":"UnicycleDynamicsModel"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.UnicycleDynamicsModel.f_func","text":"[ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] Source code in bayes_cbf/car/core.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def f_func ( self , X_in ): \"\"\" [ 0 ] [ 0 ] [ 0 ] f(x) = [ v cos(\u03b8) ] [ v sin(\u03b8) ] [ \u03c9 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in v = X [ ... , 0 ] \u03c9 = X [ ... , 1 ] \u03b8 = X [ ... , 4 ] fX = X . new_zeros ( X . shape ) fX [:, 0 ] = v . new_zeros ( v . shape ) fX [:, 1 ] = \u03c9 . new_zeros ( v . shape ) fX [:, 2 ] = ( v * \u03b8 . cos ()) . sum ( dim =- 1 ) fX [:, 3 ] = ( v * \u03b8 . sin ()) . sum ( dim =- 1 ) fX [:, 4 ] = \u03c9 return fX . squeeze ( 0 ) if X_in . dim () <= 1 else fX","title":"f_func()"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.UnicycleDynamicsModel.g_func","text":"[ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] Source code in bayes_cbf/car/core.py 60 61 62 63 64 65 66 67 68 69 70 71 72 def g_func ( self , X_in ): \"\"\" [ cos(\u03b8), 0 ] [ sin(\u03b8), 0 ] [ 0, 1 ] g(x) = [ 0, 0 ] [ 0, 0 ] [ 0, 0 ] \"\"\" X = X_in . unsqueeze ( 0 ) if X_in . dim () <= 1 else X_in gX = torch . zeros (( * X . shape , self . m )) gX [ ... , :, :] = torch . eye ( 2 ) return gX . squeeze ( 0 ) if X_in . dim () <= 1 else gX","title":"g_func()"},{"location":"reference/bayes_cbf/car/core/#bayes_cbf.car.core.run_car_control_ground_truth","text":"Run save car control with ground_truth model Source code in bayes_cbf/car/core.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 def run_car_control_ground_truth (): \"\"\" Run save car control with ground_truth model \"\"\" controller = ControlCarCBFLearned ( mean_dynamics_model = UnicycleDynamicsModel ) start , inp = StateAsArray () . deserialize ( torch . zeros ( 1 , controller . x_dim )) start . pose . position [:, : 2 ] = torch . tensor ([[ 0 , 2 ]]) start . pose . orientation = rotz ( torch . tensor ([ - math . pi / 2 ])) return sample_generator_trajectory ( dynamics_model = HyundaiGenesisDynamicsModel (), D = 1000 , controller = controller . control , visualizer = UnicycleVisualizer ( controller . centers , controller . radii ), x0 = StateAsArray () . serialize ( start , inp ))","title":"run_car_control_ground_truth()"},{"location":"reference/bayes_cbf/car/main/","text":"","title":"main"},{"location":"reference/bayes_cbf/car/vis/","text":"","title":"vis"}]}